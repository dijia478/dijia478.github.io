<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dijia478-刘力源</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dijia478.cn/"/>
  <updated>2018-09-20T13:47:56.219Z</updated>
  <id>http://dijia478.cn/</id>
  
  <author>
    <name>dijia478</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL8.0安装步骤</title>
    <link href="http://dijia478.cn/blog/2018/09/20/2018-09-20-MySQL8-0%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
    <id>http://dijia478.cn/blog/2018/09/20/2018-09-20-MySQL8-0安装步骤/</id>
    <published>2018-09-20T12:43:02.000Z</published>
    <updated>2018-09-20T13:47:56.219Z</updated>
    
    <content type="html"><![CDATA[<p>半年没有更新了，因为谈了个恋爱吧，女友把电脑借走了，又不想在公司电脑更新博客。现在分手后就比较闲啦。在新公司里学了好多新知识，慢慢的会把新学的一些知识都整理一番。</p><p>这次先说说mysql，话说从5.7，直接升8.0，不用惊讶，其实5.6版本就相当于6.0版本，5.7就相当于7.0版本。Oracle 公司这次没有用5.8，而是直接命名为了8.0，所以以为自己没用过6.0和7.0的同学们不用介意啦。下面直接说正题，如何在windows上安装mysql8.0</p><a id="more"></a><h1 id="一、下载MySQL"><a href="#一、下载MySQL" class="headerlink" title="一、下载MySQL"></a>一、下载MySQL</h1><p>这个没啥好说的了吧，去官网下好，下下来解压</p><img src="/blog/2018/09/20/2018-09-20-MySQL8-0安装步骤/mysql01.png"><h1 id="二、设置环境变量"><a href="#二、设置环境变量" class="headerlink" title="二、设置环境变量"></a>二、设置环境变量</h1><p>不知道怎么设置环境变量的话，去百度吧。我是win10的系统，设置好之后是这样的</p><img src="/blog/2018/09/20/2018-09-20-MySQL8-0安装步骤/mysql02.png"><h1 id="三、在解压目录下，添加my-ini文件"><a href="#三、在解压目录下，添加my-ini文件" class="headerlink" title="三、在解压目录下，添加my.ini文件"></a>三、在解压目录下，添加my.ini文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">#设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">#设置3306端口</span><br><span class="line">port = 3306 </span><br><span class="line">#设置mysql的安装目录</span><br><span class="line">basedir=D:\develop\mysql-8.0.12-winx64</span><br><span class="line">#设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=D:\develop\mysql-8.0.12-winx64\data</span><br><span class="line">#允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line">#服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line">#创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure><img src="/blog/2018/09/20/2018-09-20-MySQL8-0安装步骤/mysql03.png"><h1 id="四、数据库初始化"><a href="#四、数据库初始化" class="headerlink" title="四、数据库初始化"></a>四、数据库初始化</h1><p>按键盘的win+R，输入cmd，打开命令窗口</p><p>切换到刚才解压mysql的bin目录下（别问我怎么切换。。）</p><img src="/blog/2018/09/20/2018-09-20-MySQL8-0安装步骤/mysql04.png"><p>输入命令，自动生成root用户，这个地方会有点慢，大概两三分钟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure><img src="/blog/2018/09/20/2018-09-20-MySQL8-0安装步骤/mysql05.png"><h1 id="五、安装"><a href="#五、安装" class="headerlink" title="五、安装"></a>五、安装</h1><p>还在上面的目录下<br>安装服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></table></figure><img src="/blog/2018/09/20/2018-09-20-MySQL8-0安装步骤/mysql06.png"><p>报错了，是因为没有用管理员权限启动cmd命令窗口</p><p>重新用管理员身份打开cmd，运行安装命令（怎么用管理员什么打开？自行百度）</p><img src="/blog/2018/09/20/2018-09-20-MySQL8-0安装步骤/mysql07.png"><p>启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure><img src="/blog/2018/09/20/2018-09-20-MySQL8-0安装步骤/mysql08.png"><p>连接mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure><img src="/blog/2018/09/20/2018-09-20-MySQL8-0安装步骤/mysql09.png"><p>OK！到这里就已经启动好了</p><p>停止服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure><p>注意一下，如果需要卸载服务，重新安装，需要将mysql解压目录里的data文件夹里的东西清空</p><p>然后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld -remove</span><br></pre></td></tr></table></figure><h1 id="六、更换密码"><a href="#六、更换密码" class="headerlink" title="六、更换密码"></a>六、更换密码</h1><p>刚才安装完，进入mysql是不需要密码的，实际中肯定是不行的，现在要登录mysql后设置密码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456'; #更新一下用户的密码为123456</span><br></pre></td></tr></table></figure><img src="/blog/2018/09/20/2018-09-20-MySQL8-0安装步骤/mysql10.png"><p>以后登录就需要输入密码了</p><img src="/blog/2018/09/20/2018-09-20-MySQL8-0安装步骤/mysql11.png">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;半年没有更新了，因为谈了个恋爱吧，女友把电脑借走了，又不想在公司电脑更新博客。现在分手后就比较闲啦。在新公司里学了好多新知识，慢慢的会把新学的一些知识都整理一番。&lt;/p&gt;
&lt;p&gt;这次先说说mysql，话说从5.7，直接升8.0，不用惊讶，其实5.6版本就相当于6.0版本，5.7就相当于7.0版本。Oracle 公司这次没有用5.8，而是直接命名为了8.0，所以以为自己没用过6.0和7.0的同学们不用介意啦。下面直接说正题，如何在windows上安装mysql8.0&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://dijia478.cn/categories/MySQL/"/>
    
    
      <category term="MySQL安装" scheme="http://dijia478.cn/tags/MySQL%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>session共享问题-下篇</title>
    <link href="http://dijia478.cn/blog/2018/03/18/2018-03-18-session%E5%85%B1%E4%BA%AB%E9%97%AE%E9%A2%98-%E4%B8%8B%E7%AF%87/"/>
    <id>http://dijia478.cn/blog/2018/03/18/2018-03-18-session共享问题-下篇/</id>
    <published>2018-03-18T14:17:19.000Z</published>
    <updated>2018-09-09T04:02:40.128Z</updated>
    
    <content type="html"><![CDATA[<p>过了个年，换了份工作，来到一家通讯行业的公司，之前的技术感觉好多都有点用不上了，需要学习很多新的东西，而且还有了女朋友，所以最近跟新可能会很慢，大家见谅。现在继续更新年前写的那篇博客。本文是第二篇。<br><a id="more"></a></p><p>由于nginx是随机分配请求，假设一个用户登录时访问网站登录时被分配到192.168.25.128:8080上，然后进行了登录操作，此时该服务器上就会有该用户登录的session信息，然后登陆后重定向到网站首页或个人中心时，此时如果被分配到192.168.25.128:8081上，那么这台服务器上没有该用户session信息，于是又会变成未登录状态，所以由于nginx的负载均衡会导致session共享的问题。</p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>1.nginx提供了ip_hash的分配策略（还有轮询策略和权重策略），可以保持用户ip进行hash值计算固定分配到某台服务器上，然后只要是该ip则会保持分配到该服务器上，保证用户访问的是同一台服务器，那么session问题就不存在了。这也是解决session共享的一种方式，也称为黏性session。但是假设一台tomcat服务器挂了的话，那么session也会丢失。所以比较好的方案是抽取session。</p><p>2.将session存到memcache或者redis中，以这种方式来同步session，把session抽取出来，放到内存级数据库里面，解决了session共享问题，同时读取速度也是非常之快。</p><img src="/blog/2018/03/18/2018-03-18-session共享问题-下篇/nginx01.png"><h2 id="Redis解决session共享："><a href="#Redis解决session共享：" class="headerlink" title="Redis解决session共享："></a>Redis解决session共享：</h2><p>在redis服务器192.168.25.128上搭建redis（我这里还是在同一台上搭建），redis默认端口为6379</p><p>redis的部署步骤我这里就不详细讲了，可以去看我之前写的<a href="http://dijia478.cn/blog/2017/03/18/2017-03-18-Redis%E5%9C%A8Linux%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8CJedis%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/">《Redis在Linux上的部署和Jedis简单使用》</a></p><p>不过我之前写的那个，没有指定配置文件启动，会采用redis默认的配置文件。这个配置文件其实是可以指定的，启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server ./redis.conf</span><br></pre></td></tr></table></figure><p>这种启动方式叫做前端启动，必须保持在当前窗口，如果ctrl + c 退出，那么redis也就退出了，实际工作中不建议使用</p><p>那么后端启动：</p><p>首先修改redis的配置文件redis.conf中daemonize的值，打开可以看到默认是no，修改为daemonize yes，启动即可。也可以在该配置文件中修改redis默认端口6379为其他值。</p><img src="/blog/2018/03/18/2018-03-18-session共享问题-下篇/nginx02.png"><p>关闭redis：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></table></figure><p>至此，redis服务器搭建完成。</p><h2 id="tomcat与redis集成实现session共享："><a href="#tomcat与redis集成实现session共享：" class="headerlink" title="tomcat与redis集成实现session共享："></a>tomcat与redis集成实现session共享：</h2><ol><li><p>在所有需要共享session的服务器的tomcat的lib目录中添加如下ar包：</p><img src="/blog/2018/03/18/2018-03-18-session共享问题-下篇/nginx03.png"><p>这些jar包，主要起作用的是第4个，tomcat-cluster-redis-session-manager-2.0.4。</p><p>这些jar包都可以在这里下载到，下载zip压缩包的那个，里面会有需要的所有依赖和文件（一共需要5个）：</p><p><a href="https://github.com/ran-jit/tomcat-cluster-redis-session-manager/wiki" target="_blank" rel="noopener">https://github.com/ran-jit/tomcat-cluster-redis-session-manager/wiki</a></p></li><li><p>接下来，在所有需要共享session的服务器的tomcat的conf目录下，添加redis-data-cache.properties文件，这个文件也在刚才下的压缩包里有。</p><p>修改每个redis-data-cache.properties文件如下：</p><img src="/blog/2018/03/18/2018-03-18-session共享问题-下篇/nginx04.png"><p>这个应该很好看懂吧，我只用了一台redis，所以就配一个地址，如果有redis集群，那就配多个。redis如果设置了密码，下面第二个参数把密码也要设好。</p></li><li><p>然后，需要在两个tomcat/conf/context.xml文件中增加以下两行：</p><img src="/blog/2018/03/18/2018-03-18-session共享问题-下篇/nginx05.png"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"tomcat.request.session.redis.SessionHandlerValve"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"tomcat.request.session.redis.SessionManager"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置tomcat/conf/web.xml中，session有效期（这个不配的话，也是默认有的，30分钟，可以省略此步骤）</p><img src="/blog/2018/03/18/2018-03-18-session共享问题-下篇/nginx06.png"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>60<span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果项目里也配置了session有效期，则以项目中为准。</p></li></ol><p><strong>先启动redis服务，再重新启动所有tomcat，再启动nginx，刷新nginx页面,两台tomcat页面可以看到sessionid值不变，关闭某台tomcat，nginx中sessionid不变，说明session是共享的。</strong></p><blockquote><p><strong>问题：</strong></p><p>有可能此时访问会报错，redis无法访问，这是由于redis的安全机制，默认只有127.0.0.1才能访问，在redis.conf中可以找到bind 127.0.0.1，你可以将此ip改为访问者ip，</p><p>如果有多个访问者，也可以把bind 127.0.0.1注释掉，然后在配置文件中找到protected-mode，修改protected-mode yes改为protected-mode no 关闭redis保护模式即可</p></blockquote><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>按照如上配置，使用redis数据库，放入session中的对象必须要实现java.io.Serializable接口，而使用memcache实现session共享的可以不用实现Serializable接口</p><p>原因是：因为tomcat里使用的将session放置redis使用的工具类：是使用的jdk序列化模式存储的，这一点也是很容易理解的，session.setAttribute(String key, Object value)，存储Object类型</p><p>object放入redis中又要能取出来，只能是序列化进行存储了，然后取出的时候进行反序列化。</p><p>所以我们在session中存储的任何对象，都必须实现序列化接口。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过了个年，换了份工作，来到一家通讯行业的公司，之前的技术感觉好多都有点用不上了，需要学习很多新的东西，而且还有了女朋友，所以最近跟新可能会很慢，大家见谅。现在继续更新年前写的那篇博客。本文是第二篇。&lt;br&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://dijia478.cn/categories/Nginx/"/>
    
    
      <category term="session共享" scheme="http://dijia478.cn/tags/session%E5%85%B1%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Nginx反向代理和负载均衡实现-上篇</title>
    <link href="http://dijia478.cn/blog/2018/02/12/2018-02-12-Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0-%E4%B8%8A%E7%AF%87/"/>
    <id>http://dijia478.cn/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/</id>
    <published>2018-02-12T12:10:07.000Z</published>
    <updated>2018-09-09T04:01:54.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>纯干货，分上、下，两篇来写。总结一下Nginx反向代理和负载均衡实现（上篇），redis解决session共享（下篇），但只是停留在使用的层面上，没有深入原理。<br><a id="more"></a><br><strong>使用的资源：</strong></p><p>nginx主服务器一台，nginx备服务器一台，使用keepalived进行宕机切换，实现高可用。</p><p>tomcat服务器两台，由nginx进行反向代理和负载均衡，此处可搭建服务器集群。</p><p>redis服务器一台，用于session的分离共享。</p><p>因为我的小电脑配置不高，没法开那么多台服务器，所以就全部安装在同一个服务器（192.168.25.128）里了啊，通过不同的端口来区分。实际应用中应该是安装在5台服务器里，ip地址不同。</p><p>注意访问时需要配置防火墙规则，或者关闭防火墙</p><p><strong>环境： </strong></p><p>VMware12 Pro</p><p>CentOS-6.7-i386</p><p>jdk-8u151-linux-i586</p><p>nginx-1.12.2</p><p>apache-tomcat-8.5.24</p><p>redis-4.0.8</p><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx01.png"><p><strong>此时需要用到三台服务器，一台nginx服务器，两台正式部署项目的服务器</strong></p><p>因为条件限制，我就用一台服务器（192.168.25.128），来部署三个服务了。</p><h2 id="一、安装tomcat"><a href="#一、安装tomcat" class="headerlink" title="一、安装tomcat"></a>一、安装tomcat</h2><p>这个简单，不多说，上传解压即可使用，tomcat/bin目录下 startup.sh启动，shutdown.sh关闭</p><p>复制两份出来，放在/usr/local/nginx下</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx02.png"><p>在tomcat/conf/server.xml中，修改端口，这里演示tomcat01里的</p><p>用/port命令搜索port字符串，按n搜索下一个，有三个地方要改，原本是8005,8080,8009，依次更改为</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx03.png"><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx04.png"><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx05.png"><p>tomcat02里也是修改这三个位置，分别修改为8205,8280,8209。</p><p><strong>修改端口是因为我这里是在同一台服务器上部署了两个tomcat。如果按照原本的架构，是在两台服务器部署，ip不同，那么是不用修改端口的，可省略上面修改端口这步。</strong></p><h2 id="二、修改防火墙规则"><a href="#二、修改防火墙规则" class="headerlink" title="二、修改防火墙规则"></a>二、修改防火墙规则</h2><p>配置防火墙拦截规则：<code>vim /etc/sysconfig/iptables</code></p><p>开放8180和8280端口，80端口等一些常用端口，当然后边有用到一些端口都是需要配置开放的，不建议关闭防火墙</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx06.png"><p>编辑好后 <code>service iptables restart</code> 命令，重新加载防火墙配置</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx07.png"><p><strong>如果是自己测试嫌配置麻烦，可以关闭防火墙： <code>service iptables stop</code> 此命令在重启服务器后，防火墙还会打开，即在此次开机状态下有效。完全关闭防火墙： <code>chkconfig iptables off</code> ，即使重启服务器后防火墙也不会打开。</strong></p><p><strong>注意有时候服务都起了，但访问就是出错，可能就是防火墙问题</strong></p><p>启动tomcat访问：192.168.25.128:8180，192.168.25.128:8280，打开tomcat首页即成功。</p><h2 id="三、部署项目"><a href="#三、部署项目" class="headerlink" title="三、部署项目"></a>三、部署项目</h2><p>编写测试项目，IDEA新建maven项目，项目名为testproject，在webapp目录下新建一个jsp页面为index.jsp,添加如下内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;测试页面&lt;h1/&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;h1&gt;SessionId:&lt;%=session.getId() %&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>将项目中web.xml中的访问顺序<code>&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</code>上移到第一个访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>testproject<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在pom.xml中添加<code>&lt;packaging&gt;war&lt;/packaging&gt;</code>标签，然后利用IDEA最右侧maven工具将项目打成war包，testproject.war</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx08.png"><p>将该war包上传到两台服务器的tomcat的webapps中</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx09.png"><p>然后修改tomcat的server.xml文件，在tomcat/conf目录中</p><p>我这次使用的是notepad++的插件NppFTP直接连上的linux，然后使用notepad++修改文件的，修改后保存记得使用UTF-8无BOM格式</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx10.png"><p>修改Engine标签，添加jvmRoute属性，用于标识nginx访问的是哪个服务器tomcat，tomcat01服务器标识为8180Server1，tomcat02服务器标识为8280Server2。我这里只演示tomcat01</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx11.png"><p>设置tomcat的虚拟目录，在两台tomcat的server.xml文件，Host标签中添加：<code>&lt;Context path=&quot;&quot; docBase=&quot;testproject&quot;/&gt;</code>，path表示访问路径，为空的话访问地址就不用输入项目名，docBase为项目路径，我这是相对路径。这里还是只演示tomcat01</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx12.png"><p>此时，重新启动两个tomcat，访问两个项目，两台服务器访问显示如下：</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx13.png"><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx14.png"><p>至此，两台tomcat服务搭建完成。</p><h2 id="四、安装Nginx"><a href="#四、安装Nginx" class="headerlink" title="四、安装Nginx"></a>四、安装Nginx</h2><p>先使用yum命令安装gcc的环境，然后安装pcre，zlib，openssl第三方的开发包，依次执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><p>上传nginx-1.12.2.tar.gz，解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxf nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure><p>进入解压后的目录，依次执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">mkae install</span><br></pre></td></tr></table></figure><p> 此时nginx安装完毕，默认安装目录是/usr/local/nginx，nginx默认占用80端口</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx15.png"><p>哎呀，和之前的两个tomcat放在同一目录下了。。。算了，不影响啥，就放这吧。那两个脚本文件是我用来启动和关闭两个tomcat的，懒得进目录去一个一个打开关闭。之前的步骤里没说这两个脚本。其实在上面输入<code>./configure</code> 命令时，可以给后面加上<code>--prefix=安装路径</code> 来指定安装位置的。</p><p>继续说Nginx，其中，sbin目录为nginx执行命令，conf目录下的nginx.conf为默认加载的配置文件</p><p>启动nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx</span><br></pre></td></tr></table></figure><p>关闭nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx -s quit</span><br></pre></td></tr></table></figure><p>重启nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先关闭后启动。</span><br><span class="line">刷新配置文件：</span><br><span class="line">./sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>启动nginx后访问192.168.25.128:80即可访问nginx：显示nginx欢迎页（注意防火墙是否添加80端口）</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx16.png"><p>至此，nginx安装完毕。</p><h2 id="五、nginx反向代理"><a href="#五、nginx反向代理" class="headerlink" title="五、nginx反向代理"></a>五、nginx反向代理</h2><p>现有两台tomcat服务器，一台为192.168.25.128:8180，一台为192.168.25.128:8280。有一台Nginx在192.168.25.128:80。</p><p>现在要配置nginx，当访问192.168.25.128:80时，即可访问192.168.25.128:8180，192.168.25.128:8280中随机一台。此时192.168.25.128:80被nginx监听，当有请求时，代理到192.168.25.128:8180，192.168.25.128:8280随机一台即可，即为nginx反向代理功能。</p><p>同时，此时可以通过nginx将请求进行转发，保证了一个入口，将所有请求转发到两台服务器上，也减轻了任何一台的负载压力，当有大量请求时，可以搭建大量服务器，在入口代理服务器上使用nginx进行转发，即是负载均衡功能。、</p><p>配置即是配置nginx安装目录中conf目录下的nginx.conf文件即可：具体配置如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">#Nginx所用用户和组</span><br><span class="line"><span class="meta">#user  niumd niumd;</span></span><br><span class="line"></span><br><span class="line">#工作的子进程数量（通常等于CPU数量或者<span class="number">2</span>倍于CPU）</span><br><span class="line">worker_processes  <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">#错误日志存放路径</span><br><span class="line">#error_log  logs/error.<span class="built_in">log</span>;</span><br><span class="line">#error_log  logs/error.<span class="built_in">log</span>  notice;</span><br><span class="line">error_log  logs/error.<span class="built_in">log</span>  info;</span><br><span class="line"></span><br><span class="line">#指定pid存放文件</span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    #使用网络IO模型linux建议epoll，FreeBSD建议采用kqueue</span><br><span class="line">    <span class="meta">#use epoll;</span></span><br><span class="line">    </span><br><span class="line">    #允许最大连接数</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #定义日志格式</span><br><span class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] $request '</span><br><span class="line">    #                  '"$status" $body_bytes_sent "$http_referer" '</span><br><span class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    #access_log  off;</span><br><span class="line">    access_log  logs/access.<span class="built_in">log</span>;</span><br><span class="line"></span><br><span class="line">    client_header_timeout  <span class="number">3</span>m;</span><br><span class="line">    client_body_timeout    <span class="number">3</span>m;</span><br><span class="line">    send_timeout           <span class="number">3</span>m;</span><br><span class="line"> </span><br><span class="line">    client_header_buffer_size    <span class="number">1</span>k;</span><br><span class="line">    large_client_header_buffers  <span class="number">4</span> <span class="number">4</span>k;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush      on;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line"></span><br><span class="line">    #fastcgi_intercept_errors on; </span><br><span class="line">   </span><br><span class="line">    error_page <span class="number">404</span>  /<span class="number">404.</span>html;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  <span class="number">75</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    gzip                 on;</span><br><span class="line">    gzip_min_length      <span class="number">1000</span>;</span><br><span class="line">    gzip_types           text/plain text/css application/x-javascript;</span><br><span class="line"></span><br><span class="line">    #配置被代理的服务器，blank这个名称可以改</span><br><span class="line">    upstream blank &#123;</span><br><span class="line">        #ip_hash;</span><br><span class="line">        server <span class="number">192.168</span><span class="number">.25</span><span class="number">.128</span>:<span class="number">8180</span>;</span><br><span class="line">        server <span class="number">192.168</span><span class="number">.25</span><span class="number">.139</span>:<span class="number">8280</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #一个server节点就是一个虚拟主机，可以配置多个server，来配置多个虚拟主机</span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="meta">#nginx监听80端口，请求该端口时转发到真实目标</span></span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        #配置访问域名</span><br><span class="line">        server_name  localhost;                  </span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">            #这里配置代理是指上面定义的两个被代理目标，blank名字必须一致</span><br><span class="line">            proxy_pass http:<span class="comment">//blank;</span></span><br><span class="line">                </span><br><span class="line">            #proxy_redirect          off;</span><br><span class="line">            #如果是非<span class="number">80</span>端口，配置为Host $host：端口号，目的是将代理服务器收到的用户的信息传到真实服务器上</span><br><span class="line">            proxy_set_header        Host $host;</span><br><span class="line">            proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            client_max_body_size    <span class="number">10</span>m;</span><br><span class="line">            client_body_buffer_size <span class="number">128</span>k;</span><br><span class="line">            proxy_connect_timeout   <span class="number">300</span>;</span><br><span class="line">            proxy_send_timeout      <span class="number">300</span>;</span><br><span class="line">            proxy_read_timeout      <span class="number">300</span>;</span><br><span class="line">            proxy_buffer_size       <span class="number">4</span>k;</span><br><span class="line">            proxy_buffers           <span class="number">4</span> <span class="number">32</span>k;</span><br><span class="line">            proxy_busy_buffers_size <span class="number">64</span>k;</span><br><span class="line">            proxy_temp_file_write_size <span class="number">64</span>k;</span><br><span class="line">            add_header Access-Control-Allow-Origin *;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        #此处定义<span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>的错误页面</span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">        #错误页面位置</span><br><span class="line">        location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">            #root表示路径 html为nginx安装目录中的html文件夹</span><br><span class="line">            #位于/usr/local/nginx/html/下</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点是红色部分</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx17.png"><p>还有注意一个小问题，我这里的server节点，是我复制配置文件里原有的，并不是修改原有的。在文件下面还有个server节点，它的监听端口原本是80，因为我复制的server节点要监听这个端口，所以我将配置文件里原有的server节点改成了监听81端口。不然会冲突。</p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx20.png"><p>启动两台tomcat，重新启动nginx，刷新配置文件。</p><p>访问192.168.25.128:80将会访问192.168.25.128:8180，192.168.25.128:8280中随机一台。</p><p><strong>注意：现在每次刷新nginx服务器地址，SessionId会变，存在session不能共享的问题。这个问题会留到我的下一篇博客《redis解决session共享（中篇）》中去解决</strong></p><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx18.png"><img src="/blog/2018/02/12/2018-02-12-Nginx反向代理和负载均衡实现-上篇/nginx19.png"><p>至此，nginx的反向代理功能已经实现。session共享问题放到下一篇博客去解决。</p><h2 id="六、-nginx负载均衡"><a href="#六、-nginx负载均衡" class="headerlink" title="六、 nginx负载均衡"></a>六、 nginx负载均衡</h2><p><strong>nginx负载均衡到多台服务器上时，默认采用轮询策略</strong></p><p><strong>常见策略：</strong></p><p>1、轮询</p><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><p>2、weight<br>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况，数字越大命中率越高。<br>例如：轮询几率是2:1，只需在nginx.conf中这么配置：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream blank &#123;</span><br><span class="line">    server <span class="number">192.168</span><span class="number">.25</span><span class="number">.128</span>:<span class="number">8180</span> weight=<span class="number">2</span>;</span><br><span class="line">    server <span class="number">192.168</span><span class="number">.25</span><span class="number">.128</span>:<span class="number">8280</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、ip_hash<br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。<br>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream blank &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server <span class="number">192.168</span><span class="number">.25</span><span class="number">.128</span>:<span class="number">8180</span>;</span><br><span class="line">    server <span class="number">192.168</span><span class="number">.25</span><span class="number">.128</span>:<span class="number">8280</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他策略可以自行查询学习，nginx还有很多其他可配置项，静态资源缓存，重定向等，想深入的童鞋请自行学习</p><p>nginx配置详解：<a href="http://blog.csdn.net/tjcyjd/article/details/50695922" target="_blank" rel="noopener">http://blog.csdn.net/tjcyjd/article/details/50695922</a></p><p>《Nginx反向代理和负载均衡实现（上篇）》就先写到这里，过几天会再整理出来《redis解决session共享（中篇）》。快过年了，祝大家新年快乐！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;纯干货，分上、下，两篇来写。总结一下Nginx反向代理和负载均衡实现（上篇），redis解决session共享（下篇），但只是停留在使用的层面上，没有深入原理。&lt;br&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://dijia478.cn/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://dijia478.cn/tags/Nginx/"/>
    
      <category term="反向代理" scheme="http://dijia478.cn/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="负载均衡" scheme="http://dijia478.cn/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat在Linux服务器上的BIO、NIO、APR模式设置</title>
    <link href="http://dijia478.cn/blog/2018/01/04/2018-01-04-Tomcat%E5%9C%A8Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84BIO%E3%80%81NIO%E3%80%81APR%E6%A8%A1%E5%BC%8F%E8%AE%BE%E7%BD%AE/"/>
    <id>http://dijia478.cn/blog/2018/01/04/2018-01-04-Tomcat在Linux服务器上的BIO、NIO、APR模式设置/</id>
    <published>2018-01-04T03:21:57.000Z</published>
    <updated>2018-01-06T05:36:02.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、BIO、NIO、AIO"><a href="#一、BIO、NIO、AIO" class="headerlink" title="一、BIO、NIO、AIO"></a>一、BIO、NIO、AIO</h2><h3 id="先了解四个概念"><a href="#先了解四个概念" class="headerlink" title="先了解四个概念"></a>先了解四个概念</h3><p><strong>同步：</strong> 自己亲自出马持银行卡到银行取钱（使用同步IO时，Java自己处理IO读写）。</p><p><strong>异步：</strong>  委托一小弟拿银行卡到银行取钱，然后给你（使用异步IO时，Java将IO读写委托给OS处理，需要将数据缓冲区地址和大小传给OS(银行卡和密码)，OS需要支持异步IO操作API）。<br><a id="more"></a><br><strong>阻塞：</strong>  ATM排队取款，你只能等待（使用阻塞IO时，Java调用会一直阻塞到读写完成才返回）。</p><p><strong>非阻塞：</strong>柜台取款，取个号，然后坐在椅子上做其它事，等号广播会通知你办理，没到号你就不能去，你可以不断问大堂经理排到了没有，大堂经理如果说还没到你就不能去（使用非阻塞IO时，如果不能读写Java调用会马上返回，当IO事件分发器会通知可读写时再继续进行读写，不断循环直到读写完成）。</p><h3 id="Java对BIO、NIO、AIO的支持"><a href="#Java对BIO、NIO、AIO的支持" class="headerlink" title="Java对BIO、NIO、AIO的支持"></a>Java对BIO、NIO、AIO的支持</h3><p><strong>Java BIO：</strong> 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。</p><p><strong>Java NIO：</strong> 同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。</p><p><strong>Java AIO(NIO.2)：</strong> 异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理</p><h3 id="BIO、NIO、AIO适用场景分析"><a href="#BIO、NIO、AIO适用场景分析" class="headerlink" title="BIO、NIO、AIO适用场景分析"></a>BIO、NIO、AIO适用场景分析</h3><p>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。</p><p>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。</p><p>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。</p><h2 id="二、tomcat三种模式简介"><a href="#二、tomcat三种模式简介" class="headerlink" title="二、tomcat三种模式简介"></a>二、tomcat三种模式简介</h2><h3 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h3><p>BIO(blocking I/O)，顾名思义，即阻塞式I/O操作，表示Tomcat使用的是传统的Java I/O操作(即java.io包及其子包)。Tomcat在默认情况下，就是以bio模式运行的。遗憾的是，就一般而言，bio模式是三种运行模式中性能最低的一种。我们可以通过Tomcat Manager来查看服务器的当前状态。</p><h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><p>是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，因此nio也被看成是non-blocking I/O的缩写。它拥有比传统I/O操作(bio)更好的并发运行性能。</p><h3 id="APR"><a href="#APR" class="headerlink" title="APR"></a>APR</h3><p>(Apache Portable Runtime/Apache可移植运行库)，是Apache HTTP服务器的支持库。你可以简单地理解为，Tomcat将以JNI的形式调用Apache HTTP服务器的核心动态链接库来处理文件读取或网络传输操作，从而大大地提高Tomcat对静态文件的处理性能。 Tomcat apr也是在Tomcat上运行高并发应用的首选模式。</p><h2 id="三、tomcat三种模式性能比较"><a href="#三、tomcat三种模式性能比较" class="headerlink" title="三、tomcat三种模式性能比较"></a>三、tomcat三种模式性能比较</h2><p>这里我引用了网友给出的测试结果</p><img src="/blog/2018/01/04/2018-01-04-Tomcat在Linux服务器上的BIO、NIO、APR模式设置/tomcat01.png"><h2 id="四、tomcat模式设置"><a href="#四、tomcat模式设置" class="headerlink" title="四、tomcat模式设置"></a>四、tomcat模式设置</h2><p>我这里演示的是tomcat7，默认是BIO模式的。而tomcat8是默认NIO模式的。</p><img src="/blog/2018/01/04/2018-01-04-Tomcat在Linux服务器上的BIO、NIO、APR模式设置/tomcat02.png"><h3 id="BIO模式"><a href="#BIO模式" class="headerlink" title="BIO模式"></a>BIO模式</h3><p>tomcat7默认就是。如果你是tomcat8或9想设置成BIO模式的，那么在tomcat目录里的conf目录里的server.xml文件中修改。找到设置端口号8080的那个标签，主要是修改protocol属性为<code>HTTP/1.1</code>，重启tomcat就会使用BIO模式。tomcat7默认就是这个样子的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="NIO模式"><a href="#NIO模式" class="headerlink" title="NIO模式"></a>NIO模式</h3><p>在和设置BIO模式同样的位置上，修改protocol属性为<code>org.apache.coyote.http11.Http11NioProtocol</code>，重启tomcat就会使用NIO模式。tomcat8以上默认就是这个样子的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="APR模式"><a href="#APR模式" class="headerlink" title="APR模式"></a>APR模式</h3><p>启用这种模式稍微麻烦一些，除了需要改配置文件，还需要安装一些依赖库，以下就是安装所需的条件：</p><pre><code>1. 最新的apr2. 最新的apr-util3. tomcat-native.tar.gz(在tomcat/bin/下有相应的安装tar包)</code></pre><p>前两个依赖库的官方下载地址：<a href="http://apr.apache.org/download.cgi" target="_blank" rel="noopener">http://apr.apache.org/download.cgi</a></p><p>先改配置文件，和改BIO,NIO模式的位置一样，修改protocol属性为<code>org.apache.coyote.http11.Http11AprProtocol</code>，注意和NIO的很像，但不一样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>现在先安装apr，在解压好的apr目录下，执行下面的命令，指定apr安装目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/apr &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>再安装apr-util，在解压好的apr-util目录下，执行下面的命令，指定apr目录和apr-util安装目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --<span class="keyword">with</span>-apr=/usr/local/apr/ --prefix=/usr/local/apr-util &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>再安装tomcat-native，这个不用下载，在tomcat/bin/下有相应的安装tar包，在解压好的tomcat-native目录下，执行下面的命令，指定指定apr目录和JAVA_HOME目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./native/configure --<span class="keyword">with</span>-apr=/usr/local/apr --<span class="keyword">with</span>-java-home=/usr/share/jdk1<span class="number">.8</span> &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>安装完后记得在 /etc/profile 文件中的JAVA_HOME环境变量后面多加一条APR的环境变量（注意你自己安装的apr目录）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/apr/lib</span><br></pre></td></tr></table></figure><p>用source /etc/profile命令让环境变量配置立即生效，启动tomcat，就是APR模式了</p><h2 id="五、如何确定自己当前的模式"><a href="#五、如何确定自己当前的模式" class="headerlink" title="五、如何确定自己当前的模式"></a>五、如何确定自己当前的模式</h2><p>启动tomcat后，可以在tomcat/logs目录下，执行如下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f catalina.out</span><br></pre></td></tr></table></figure><p>我这里就是成功启动APR模式后显示的样子</p><p><img src="tomcat03.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、BIO、NIO、AIO&quot;&gt;&lt;a href=&quot;#一、BIO、NIO、AIO&quot; class=&quot;headerlink&quot; title=&quot;一、BIO、NIO、AIO&quot;&gt;&lt;/a&gt;一、BIO、NIO、AIO&lt;/h2&gt;&lt;h3 id=&quot;先了解四个概念&quot;&gt;&lt;a href=&quot;#先了解四个概念&quot; class=&quot;headerlink&quot; title=&quot;先了解四个概念&quot;&gt;&lt;/a&gt;先了解四个概念&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;同步：&lt;/strong&gt; 自己亲自出马持银行卡到银行取钱（使用同步IO时，Java自己处理IO读写）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异步：&lt;/strong&gt;  委托一小弟拿银行卡到银行取钱，然后给你（使用异步IO时，Java将IO读写委托给OS处理，需要将数据缓冲区地址和大小传给OS(银行卡和密码)，OS需要支持异步IO操作API）。&lt;br&gt;
    
    </summary>
    
      <category term="Tomcat" scheme="http://dijia478.cn/categories/Tomcat/"/>
    
    
      <category term="Tomcat设置" scheme="http://dijia478.cn/tags/Tomcat%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Solr集群在Linux上搭建详细步骤</title>
    <link href="http://dijia478.cn/blog/2017/12/24/2017-12-24-Solr%E9%9B%86%E7%BE%A4%E5%9C%A8Linux%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/"/>
    <id>http://dijia478.cn/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/</id>
    <published>2017-12-24T05:54:10.000Z</published>
    <updated>2018-02-12T14:10:09.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Solr集群的系统架构"><a href="#一、Solr集群的系统架构" class="headerlink" title="一、Solr集群的系统架构"></a>一、Solr集群的系统架构</h2><p>SolrCloud(solr 云)是Solr提供的分布式搜索方案，当你需要大规模，容错，分布式索引和检索能力时使用 SolrCloud。当一个系统的索引数据量少的时候是不需要使用SolrCloud的，当索引量很大，搜索请求并发很高，这时需要使用SolrCloud来满足这些需求。</p><p>SolrCloud是基于Solr和Zookeeper的分布式搜索方案，它的主要思想是使用Zookeeper作为集群的配置信息中心。<br><a id="more"></a><br>它有几个特色功能：</p><p>1）集中式的配置信息</p><p>2）自动容错</p><p>3）近实时搜索</p><p>4）查询时自动负载均衡</p><h3 id="1-物理结构"><a href="#1-物理结构" class="headerlink" title="1.物理结构"></a>1.物理结构</h3><p>三个Solr实例（ 每个实例包括两个Core），组成一个SolrCloud。</p><h3 id="2-逻辑结构"><a href="#2-逻辑结构" class="headerlink" title="2.逻辑结构"></a>2.逻辑结构</h3><p>索引集合包括两个Shard（shard1和shard2），shard1和shard2分别由三个Core组成，其中一个Leader两个Replication，Leader是由zookeeper选举产生，zookeeper控制每个shard上三个Core的索引数据一致，解决高可用问题。</p><p>用户发起索引请求分别从shard1和shard2上获取，解决高并发问题。</p><h4 id="2-1-collection"><a href="#2-1-collection" class="headerlink" title="2.1. collection"></a>2.1. collection</h4><p>Collection在SolrCloud集群中是一个逻辑意义上的完整的索引结构。它常常被划分为一个或多个Shard（分片），它们使用相同的配置信息。</p><p>比如：针对商品信息搜索可以创建一个collection。</p><p>collection=shard1+shard2+….+shardX</p><h4 id="2-2-Core"><a href="#2-2-Core" class="headerlink" title="2.2. Core"></a>2.2. Core</h4><p>每个Core是Solr中一个独立运行单位，提供 索引和搜索服务。一个shard需要由一个Core或多个Core组成。由于collection由多个shard组成所以collection一般由多个core组成。</p><h4 id="2-3-Master或Slave"><a href="#2-3-Master或Slave" class="headerlink" title="2.3. Master或Slave"></a>2.3. Master或Slave</h4><p>Master是master-slave结构中的主结点（通常说主服务器），Slave是master-slave结构中的从结点（通常说从服务器或备服务器）。同一个Shard下master和slave存储的数据是一致的，这是为了达到高可用目的。</p><h4 id="2-4-Shard"><a href="#2-4-Shard" class="headerlink" title="2.4. Shard"></a>2.4. Shard</h4><p>Collection的逻辑分片。每个Shard被化成一个或者多个replication，通过选举确定哪个是Leader。</p><h3 id="3-本次演示实现的solr集群架构"><a href="#3-本次演示实现的solr集群架构" class="headerlink" title="3.本次演示实现的solr集群架构"></a>3.本次演示实现的solr集群架构</h3><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr01.png"><p>Zookeeper作为集群的管理工具。</p><p>1、集群管理：容错、负载均衡。</p><p>2、配置文件的集中管理</p><p>3、集群的入口</p><p>需要实现zookeeper 高可用。需要搭建集群。建议是奇数节点。需要三个zookeeper服务器。</p><p>搭建solr集群至少需要7台服务器。</p><p>这里因环境限制，演示的是搭建伪分布式（在一台虚拟机上，建议内存至少1G）：</p><p>需要三个zookeeper节点</p><p>需要四个tomcat节点。</p><p>本文使用tomcat进行部署，而不使用solr自带的jetty</p><h3 id="4-系统环境"><a href="#4-系统环境" class="headerlink" title="4.系统环境"></a>4.系统环境</h3><p>CentOS-6.7-i386-bin-DVD1</p><p>jdk-8u151-linux-i586</p><p>apache-tomcat-8.5.24</p><p>zookeeper-3.4.10</p><p>solr-7.1.0</p><p><strong>注意：solr6.0以上版本，官方建议使用jdk8，tomcat8，搭建集群步骤和solr6以下略微有区别。搭建solr集群前，要先关闭iptables防火墙服务</strong></p><h2 id="二、-先搭建Zookeeper集群"><a href="#二、-先搭建Zookeeper集群" class="headerlink" title="二、 先搭建Zookeeper集群"></a>二、 先搭建Zookeeper集群</h2><h3 id="第一步：上传，解压zookeeper"><a href="#第一步：上传，解压zookeeper" class="headerlink" title="第一步：上传，解压zookeeper"></a>第一步：上传，解压zookeeper</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rz</span><br><span class="line">tar zxf zookeeper-3.4.10.tar.gz</span><br></pre></td></tr></table></figure><h3 id="第二步：在zookeeper目录下创建一个data目录"><a href="#第二步：在zookeeper目录下创建一个data目录" class="headerlink" title="第二步：在zookeeper目录下创建一个data目录"></a>第二步：在zookeeper目录下创建一个data目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ./zookeeper-3.4.10/data</span><br></pre></td></tr></table></figure><h3 id="第三步：把zookeeper目录下的conf目录下的zoo-sample-cfg文件改名为zoo-cfg"><a href="#第三步：把zookeeper目录下的conf目录下的zoo-sample-cfg文件改名为zoo-cfg" class="headerlink" title="第三步：把zookeeper目录下的conf目录下的zoo_sample.cfg文件改名为zoo.cfg"></a>第三步：把zookeeper目录下的conf目录下的zoo_sample.cfg文件改名为zoo.cfg</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./zookeeper-3.4.10/conf</span><br><span class="line">mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><h3 id="第四步：把zookeeper目录复制三份"><a href="#第四步：把zookeeper目录复制三份" class="headerlink" title="第四步：把zookeeper目录复制三份"></a>第四步：把zookeeper目录复制三份</h3><p>先创建目录/usr/local/solr-cloud，这里就是后面集群放置的目录了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/solr-cloud</span><br><span class="line">cp -r ./zookeeper-3.4.10 /usr/<span class="built_in">local</span>/solr-cloud/zookeeper01</span><br><span class="line">cp -r ./zookeeper-3.4.10 /usr/<span class="built_in">local</span>/solr-cloud/zookeeper02</span><br><span class="line">cp -r ./zookeeper-3.4.10 /usr/<span class="built_in">local</span>/solr-cloud/zookeeper03</span><br></pre></td></tr></table></figure><h3 id="第五步：创建三个myid文件"><a href="#第五步：创建三个myid文件" class="headerlink" title="第五步：创建三个myid文件"></a>第五步：创建三个myid文件</h3><p>在第四步复制的三个zookeeper目录里的data目录下，分别创建一个myid文件，文件名都叫做“myid”。内容就是每个实例的id。例如1、2、3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt;&gt; ./zookeeper01/data/myid</span><br><span class="line"><span class="built_in">echo</span> 2 &gt;&gt; ./zookeeper02/data/myid</span><br><span class="line"><span class="built_in">echo</span> 3 &gt;&gt; ./zookeeper03/data/myid</span><br></pre></td></tr></table></figure><h3 id="第六步：修改三个zoo-cfg配置文件"><a href="#第六步：修改三个zoo-cfg配置文件" class="headerlink" title="第六步：修改三个zoo.cfg配置文件"></a>第六步：修改三个zoo.cfg配置文件</h3><p>就是上面第三步改的文件，第四步复制了三份。这里只演示一个，但三份都要改。前两个红色框框里的（目录和端口号）内容三份配置文件是不一样的，目录就是各自对应的目录，我的端口号分别改为了2181，2182，2183。而最后那个红框里的内容三份配置文件是一样的。</p><p>server.1的这个1，就是第五步myid文件的内容。在实际工作中每个zookeeper实例在不同的服务器上，所以后面的ip应该是不同的，我这里是在一台虚拟机上演示，所以ip相同。</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr02.png"><h3 id="第七步：启动每个zookeeper实例"><a href="#第七步：启动每个zookeeper实例" class="headerlink" title="第七步：启动每个zookeeper实例"></a>第七步：启动每个zookeeper实例</h3><p>这里一个个进目录里启动实在麻烦，我这里在solr-cloud目录下写个脚本来执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi start-zookeeper-all.sh</span><br></pre></td></tr></table></figure><p>脚本内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/solr-cloud/zookeeper01/bin/</span><br><span class="line">./zkServer.sh start</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/solr-cloud/zookeeper02/bin/</span><br><span class="line">./zkServer.sh start</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/solr-cloud/zookeeper03/bin/</span><br><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><p>写完后保存退出，发现脚本没有执行权限，添加权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x start-zookeeper-all.sh</span><br></pre></td></tr></table></figure><p>执行脚本：</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr03.png"><p>为了验证，去三个zookeeper的实例里bin目录下分别查看每个实例的状态</p><p>（我刚开始是把查看状态的命令写在脚本里的，让它一启动就查看，可每次状态都显示not running，后来想了想，应该是因为脚本执行太快，启动命令执行了但还没启动起来，就去查看状态，所以会显示没有运行）</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr04.png"><p>如果你显示的是这样子的一个领导两个部下（leader和follower不一定是谁，随机的），那么就代表zookeeper集群已经搭建完成</p><p>zookeeper集群搭建完成了，下来搭建solr集群</p><h2 id="三、solr集群搭建"><a href="#三、solr集群搭建" class="headerlink" title="三、solr集群搭建"></a>三、solr集群搭建</h2><p><strong>注意，在搭建solr集群前，建议最好有一个solr服务是已经搭建好的，可以简化大量重复的配置操作。</strong></p><p>单机solr服务搭建过程参看我的这篇文章：</p><p><a href="http://dijia478.cn/blog/2017/12/20/2017-12-20-Solr%E6%9C%8D%E5%8A%A1%E5%9C%A8Linux%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/">Solr服务在Linux上搭建详细步骤</a></p><p>这个单机solr服务在solr集群搭建第二步和第三步里需要，搭建好一个solr服务后，就可以进行集群搭建了。</p><h3 id="第一步：创建四个tomcat实例。每个tomcat运行在不同的端口。8180、8280、8380、8480"><a href="#第一步：创建四个tomcat实例。每个tomcat运行在不同的端口。8180、8280、8380、8480" class="headerlink" title="第一步：创建四个tomcat实例。每个tomcat运行在不同的端口。8180、8280、8380、8480"></a>第一步：创建四个tomcat实例。每个tomcat运行在不同的端口。8180、8280、8380、8480</h3><p>在搭建单机solr服务第二步的时候，tomcat8已经上传解压好了，所以直接复制用就行，复制到搭建zookeeper集群第四步时创建的/usr/local/solr-cloud/目录下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp -r apache-tomcat-8.5.24 /usr/<span class="built_in">local</span>/solr-cloud/tomcat01</span><br><span class="line">cp -r apache-tomcat-8.5.24 /usr/<span class="built_in">local</span>/solr-cloud/tomcat02</span><br><span class="line">cp -r apache-tomcat-8.5.24 /usr/<span class="built_in">local</span>/solr-cloud/tomcat03</span><br><span class="line">cp -r apache-tomcat-8.5.24 /usr/<span class="built_in">local</span>/solr-cloud/tomcat04</span><br></pre></td></tr></table></figure><p>在复制过来的四个tomcat目录下的conf里的server.xml，修改每个tomcat的端口号，这里只演示第一个目录的，另外三个都要改，端口要互不冲突</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ./tomcat01/conf/server.xml</span><br></pre></td></tr></table></figure><p>用/port命令搜索port字符串，按n搜索下一个，有三个地方要改，依次更改为</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr05.png"><p>其他三个tomcat目录里的server.xml配置的端口按照234的顺序全改了啊，这里我就不截图了。</p><p>一共要改四个文件，每个文件里改三个地方，这12个端口号要互不冲突。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi ./tomcat02/conf/server.xml</span><br><span class="line">vi ./tomcat03/conf/server.xml</span><br><span class="line">vi ./tomcat04/conf/server.xml</span><br></pre></td></tr></table></figure><h3 id="第二步：把单机版的solr工程复制到集群中的tomcat里"><a href="#第二步：把单机版的solr工程复制到集群中的tomcat里" class="headerlink" title="第二步：把单机版的solr工程复制到集群中的tomcat里"></a>第二步：把单机版的solr工程复制到集群中的tomcat里</h3><p>在搭建好的单机solr服务里（这里是另一篇教程，上面说过了），复制solr工程到第一步的4个tomcat目录里，一共是复制4份</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp -r /usr/<span class="built_in">local</span>/solr/tomcat/webapps/solr /usr/<span class="built_in">local</span>/solr-cloud/tomcat01/webapps/</span><br><span class="line">cp -r /usr/<span class="built_in">local</span>/solr/tomcat/webapps/solr /usr/<span class="built_in">local</span>/solr-cloud/tomcat02/webapps/</span><br><span class="line">cp -r /usr/<span class="built_in">local</span>/solr/tomcat/webapps/solr /usr/<span class="built_in">local</span>/solr-cloud/tomcat03/webapps/</span><br><span class="line">cp -r /usr/<span class="built_in">local</span>/solr/tomcat/webapps/solr /usr/<span class="built_in">local</span>/solr-cloud/tomcat04/webapps/</span><br></pre></td></tr></table></figure><h3 id="第三步：为每个solr实例创建一个对应的solrhome"><a href="#第三步：为每个solr实例创建一个对应的solrhome" class="headerlink" title="第三步：为每个solr实例创建一个对应的solrhome"></a>第三步：为每个solr实例创建一个对应的solrhome</h3><p>一样在之前搭建的单机solr服务里，把solrhome复制4份出来到solr-cloud目录里</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp -r /usr/<span class="built_in">local</span>/solr/solrhome /usr/<span class="built_in">local</span>/solr-cloud/solrhome01</span><br><span class="line">cp -r /usr/<span class="built_in">local</span>/solr/solrhome /usr/<span class="built_in">local</span>/solr-cloud/solrhome02</span><br><span class="line">cp -r /usr/<span class="built_in">local</span>/solr/solrhome /usr/<span class="built_in">local</span>/solr-cloud/solrhome03</span><br><span class="line">cp -r /usr/<span class="built_in">local</span>/solr/solrhome /usr/<span class="built_in">local</span>/solr-cloud/solrhome04</span><br></pre></td></tr></table></figure><p>现在solr-cloud目录里是有这些目录，检查一下有没有复制错地方的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">solrhome01</span><br><span class="line">solrhome02</span><br><span class="line">solrhome03</span><br><span class="line">solrhome04</span><br><span class="line">start-zookeeper-all.sh</span><br><span class="line">tomcat01</span><br><span class="line">tomcat02</span><br><span class="line">tomcat03</span><br><span class="line">tomcat04</span><br><span class="line">zookeeper01</span><br><span class="line">zookeeper02</span><br><span class="line">zookeeper03</span><br></pre></td></tr></table></figure><h3 id="第四步：配置solrCloud相关的配置"><a href="#第四步：配置solrCloud相关的配置" class="headerlink" title="第四步：配置solrCloud相关的配置"></a>第四步：配置solrCloud相关的配置</h3><p>第三步复制好的四个solrhome下，都有一个solr.xml，把其中的ip及端口号配置好。搭建单机版solr服务的时候没有动过solrhome里的这个文件，现在搭建集群了，需要进行修改。需要修改4个solr.xml，我这里还是只演示第一个，另外三个目录里的类比着改，一样的，就是1234的顺序</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi solrhome01/solr.xml</span><br></pre></td></tr></table></figure><p>找到这个地方，第一个红框代表当前节点的ip地址，实际工作中就是会部署4个服务器，一个服务器是一个节点，部署一个solr服务。第二个红框代表当前solr服务实例的端口号，就是所在的tomcat的端口号，就是第一步在tomcat01的server.xml里配置的8180</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr06.png"><p>我的配置完后是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"host"</span>&gt;</span>192.168.25.128<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">int</span> <span class="attr">name</span>=<span class="string">"hostPort"</span>&gt;</span>8180<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他三个solr.xml照着改，由于我是在一台虚拟机搭建的四个solr实例，所以肯定四个实例的ip是一样的，但端口分别是8180，8280，8380，8480</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi solrhome02/solr.xml</span><br><span class="line">vi solrhome03/solr.xml</span><br><span class="line">vi solrhome04/solr.xml</span><br></pre></td></tr></table></figure><h3 id="第五步：修改solr服务的web-xml文件。把solrhome关联起来"><a href="#第五步：修改solr服务的web-xml文件。把solrhome关联起来" class="headerlink" title="第五步：修改solr服务的web.xml文件。把solrhome关联起来"></a>第五步：修改solr服务的web.xml文件。把solrhome关联起来</h3><p>修改这个文件，和单机版的solr配置是一样的</p><p>要注意的是，tomcat01这里的solr服务，是上面第二步复制过来的对吧，是我之前用solr7搭建的单机solr服务，里面的配置和solr4不太一样，具体还是去上面看我提供的单机solr服务搭建教程链接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi tomcat01/webapps/solr/WEB-INF/web.xml</span><br></pre></td></tr></table></figure><p>找到这个，这里是我之前搭建单机solr服务时，配置的solrhome路径</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr07.png"><p>现在改成集群的solrhome01目录，使他们关联起来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">env-entry-value</span>&gt;</span>/usr/local/solr-cloud/solrhome01<span class="tag">&lt;/<span class="name">env-entry-value</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他三个tomcat里的web.xml都对应着一改，solrhome02，03，04</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi tomcat02/webapps/solr/WEB-INF/web.xml</span><br><span class="line">vi tomcat03/webapps/solr/WEB-INF/web.xml</span><br><span class="line">vi tomcat04/webapps/solr/WEB-INF/web.xml</span><br></pre></td></tr></table></figure><h3 id="第六步：让zookeeper统一管理配置文件。需要把-conf目录上传到zookeeper"><a href="#第六步：让zookeeper统一管理配置文件。需要把-conf目录上传到zookeeper" class="headerlink" title="第六步：让zookeeper统一管理配置文件。需要把/conf目录上传到zookeeper"></a>第六步：让zookeeper统一管理配置文件。需要把/conf目录上传到zookeeper</h3><p>现在我们每一个solr都有了自己的solrhome，现在我们要让每一个solr实例的配置文件都一样，这个配置文件需要集中管理，这个时候我们使用zookeeper来统一管理配置文件。所以要将配置文件上传到zookeeper中。那么上传哪些配置文件呢？</p><p>这里注意下managed-schema文件，网上有很多低版本solr，会提到一个collection1/conf下的schema.xml，但是本人并没有找到。好像是从5.0版本开始不使用schema.xml的，这俩其实内容都一样，搞不懂为啥要换个名字，而且内容格式是xml，但是文件名却没有.xml的后辍，这里直接上传整个conf目录就行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/solr-cloud/solrhome01/configsets/sample_techproducts_configs/conf</span><br></pre></td></tr></table></figure><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr08.png"><p>知道了要上传什么，那么怎么上传呢？打开最早solr解压出来的原始文件（如果删了那就重新上传解压吧）</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr09.png"><p>在这个目录下有个zkcli.sh脚本文件，执行这个脚本就可以将配置文件上传到zookeeper了，有点难找，我是用find命令给搜出来的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/dijia478/solr-7.1.0/server/scripts/cloud-scripts</span><br></pre></td></tr></table></figure><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr10.png"><p>要注意，在执行脚本上传配置文件前，必须先去启动zookeeper集群</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/solr-cloud/</span><br><span class="line">./start-zookeeper-all.sh</span><br></pre></td></tr></table></figure><p>然后回来执行脚本，这里脚本的执行命令有点长，主要是参数多，建议复制出来改好后再粘贴上去</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/dijia478/solr-7.1.0/server/scripts/cloud-scripts</span><br><span class="line">./zkcli.sh -zkhost 192.168.25.128:2181,192.168.25.128:2182,192.168.25.128:2183 -cmd upconfig -confdir /usr/<span class="built_in">local</span>/solr-cloud/solrhome01/configsets/sample_techproducts_configs/conf -confname myconf</span><br></pre></td></tr></table></figure><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr11.png"><p>我解释下各个参数的含义：</p><p>红色框代表zookeeper集群的ip和端口号列表（搭建zookeeper集群的时候配置过的）</p><p>绿色框代表要执行的是上传配置文件操作</p><p>黄色框代表的是要上传的配置文件目录（低版本不太一样，具体以那两个主要的配置文件所在目录为准，不知到在哪就find命令搜吧）</p><p>紫色框代表的是你给上传的配置起的名字，可以改</p><p>现在上传完了，那么我们怎么确定是否上传成功呢？去zookeeper集群的一个目录找到bin里zookeeper的客户端脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/solr-cloud/zookeeper01/bin/</span><br><span class="line">./zkCli.sh</span><br></pre></td></tr></table></figure><p>运行后，里面会出现一大堆内容，如果你不指定参数，他会默认访问localhost:2181</p><p>在最下面执行<code>ls /</code>，查看在根目录下有什么，发现一个configs，再看它里面有什么？</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr12.png"><p>这就是我们刚才上传的配置了，名字一样的，代表上传成功了</p><p>然后用quit命令退出</p><p>如果你以后需要修改solr配置的话，只用在刚才那个solrhome01/…/conf目录里改好，改好后再上传一次就行了，就会覆盖原来的配置文件</p><h3 id="第七步：修改tomcat-bin目录下的catalina-sh-文件，关联solr和zookeeper"><a href="#第七步：修改tomcat-bin目录下的catalina-sh-文件，关联solr和zookeeper" class="headerlink" title="第七步：修改tomcat/bin目录下的catalina.sh 文件，关联solr和zookeeper"></a>第七步：修改tomcat/bin目录下的catalina.sh 文件，关联solr和zookeeper</h3><p>现在上传好配置文件了，可是solr和zookeeper还没有建立任何关系，他们也不知道对方在哪里，这个时候需要修改4个tomcat的配置文件，这里只演示tomcat01，其他三个完全相同照着改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tomcat01/bin</span><br><span class="line">vi catalina.sh</span><br></pre></td></tr></table></figure><p>用<code>/JAVA_OPTS</code>搜索红色框框里的这句话（因为低版本加的位置长的不太一样，但这句话的例子是不变的），在这句话下面的位置加（注意位置，不要弄错了）：</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr13.png"><p>在图上位置加上JAVA_OPTS的值（zookeeper集群的ip列表）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">"-DzkHost=192.168.25.128:2181,192.168.25.128:2182,192.168.25.128:2183"</span></span><br></pre></td></tr></table></figure><p>然后把其他三个tomcat也一改，改的位置和内容是一样的，不用变</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi tomcat02/bin/catalina.sh</span><br><span class="line">vi tomcat03/bin/catalina.sh</span><br><span class="line">vi tomcat04/bin/catalina.sh</span><br></pre></td></tr></table></figure><p>这样每个solr实例就通过这个参数和zookeeper集群建立了联系，solr会将自己的状态发送给zookeeper，比如ip地址啊，端口号啊，zookeeper就可以连接到solr了，建立了通信关系</p><h3 id="第八步：启动每个tomcat实例。要包装zookeeper集群是启动状态"><a href="#第八步：启动每个tomcat实例。要包装zookeeper集群是启动状态" class="headerlink" title="第八步：启动每个tomcat实例。要包装zookeeper集群是启动状态"></a>第八步：启动每个tomcat实例。要包装zookeeper集群是启动状态</h3><p>现在需要启动每个tomcat，当然了，这个和启动zookeeper集群一样，要一个一个进去启动，太麻烦了，还是在solr-cloud目录下写个批处理脚本来运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi start-tomcat-all.sh</span><br></pre></td></tr></table></figure><p>脚本内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/solr-cloud/tomcat01/bin/startup.sh</span><br><span class="line">/usr/<span class="built_in">local</span>/solr-cloud/tomcat02/bin/startup.sh</span><br><span class="line">/usr/<span class="built_in">local</span>/solr-cloud/tomcat03/bin/startup.sh</span><br><span class="line">/usr/<span class="built_in">local</span>/solr-cloud/tomcat04/bin/startup.sh</span><br></pre></td></tr></table></figure><p>保存，退出，还是要为脚本添加执行权限，不然执行不了。添加完后运行脚本，tomcat集群启动有点慢</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x start-tomcat-all.sh</span><br><span class="line">./start-tomcat-all.sh</span><br></pre></td></tr></table></figure><p>如果你想看启动起来没有，可以复制一个SSH渠道（我用的xshell5），去看看tomcat的日志信息（相当于看控制台打印信息），在另一个会话窗口里运行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /usr/local/solr-cloud/tomcat01/logs/catalina.out</span><br></pre></td></tr></table></figure><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr14.png"><p>这里说个小知识点，tomcat8开始，默认启动的是NIO模式，7默认启动的是BIO模式，还可以通过配置设置APR模式启动，至于APR，NIO和BIO的区别，是和tomcat并发性能有关的，高并发的系统应该将tomcat的模式设置成APR模式，会大幅度的提高服务器的处理和响应性能。感兴趣的可以自己百度下。当然这个不用在意，跟本文集群搭建没关系，就是想到了说一下。过几天我再写个配置tomcat三种模式的博客吧。</p><h3 id="第九步：访问集群"><a href="#第九步：访问集群" class="headerlink" title="第九步：访问集群"></a>第九步：访问集群</h3><p>然后用自己的电脑访问下集群，之前单机版是没有红框框出来的两个东西的，出现这个就是OK了，但还没完</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr15.png"><p>我这里还没创建collections，所以什么都没有：</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr16.png"><p>注意下访问地址的输入，要写全。访问地址写成这样会404</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr17.png"><h3 id="第十步：创建新的Collection进行分片处理"><a href="#第十步：创建新的Collection进行分片处理" class="headerlink" title="第十步：创建新的Collection进行分片处理"></a>第十步：创建新的Collection进行分片处理</h3><p>点击页面的Collections按钮，然后就能添加了（高版本的solr才有，低版本的需要通过地址栏传递参数去设置，比较麻烦）</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr18.png"><p>我这里选择的是名字叫mycollection1，用自己上传的myconf配置文件，有2片shard，每个shard有2个备份节点一主一备</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr19.png"><p>然后回去那个第九步空的页面看下，这样solr集群就搭建ok了！</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr20.png"><h3 id="第十一步：删除不用的Collection或core"><a href="#第十一步：删除不用的Collection或core" class="headerlink" title="第十一步：删除不用的Collection或core"></a>第十一步：删除不用的Collection或core</h3><p>删除collection，点这里，然后输入你要删除的collection名称就行</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr21.png"><p>删除core在右边，完了如果要添加下面有add replica（如果工作中你的哪个备份机挂了，就这样删掉挂的服务器，再添加一个好的就行，当然了，在这里添加前，肯定是需要在服务器上部署好solr服务，然后连接zookeeper集群才行的）</p><img src="/blog/2017/12/24/2017-12-24-Solr集群在Linux上搭建详细步骤/solr22.png">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Solr集群的系统架构&quot;&gt;&lt;a href=&quot;#一、Solr集群的系统架构&quot; class=&quot;headerlink&quot; title=&quot;一、Solr集群的系统架构&quot;&gt;&lt;/a&gt;一、Solr集群的系统架构&lt;/h2&gt;&lt;p&gt;SolrCloud(solr 云)是Solr提供的分布式搜索方案，当你需要大规模，容错，分布式索引和检索能力时使用 SolrCloud。当一个系统的索引数据量少的时候是不需要使用SolrCloud的，当索引量很大，搜索请求并发很高，这时需要使用SolrCloud来满足这些需求。&lt;/p&gt;
&lt;p&gt;SolrCloud是基于Solr和Zookeeper的分布式搜索方案，它的主要思想是使用Zookeeper作为集群的配置信息中心。&lt;br&gt;
    
    </summary>
    
      <category term="solr" scheme="http://dijia478.cn/categories/solr/"/>
    
    
      <category term="solr集群搭建" scheme="http://dijia478.cn/tags/solr%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Solr服务在Linux上搭建详细步骤</title>
    <link href="http://dijia478.cn/blog/2017/12/20/2017-12-20-Solr%E6%9C%8D%E5%8A%A1%E5%9C%A8Linux%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/"/>
    <id>http://dijia478.cn/blog/2017/12/20/2017-12-20-Solr服务在Linux上搭建详细步骤/</id>
    <published>2017-12-20T04:47:12.000Z</published>
    <updated>2018-01-06T05:36:57.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、系统环境"><a href="#一、系统环境" class="headerlink" title="一、系统环境"></a>一、系统环境</h2><p>CentOS-6.7-i386-bin-DVD1</p><p>jdk-8u151-linux-i586</p><p>apache-tomcat-8.5.24.tar</p><p>solr-7.1.0</p><p><strong>注意：solr6.0以上，官方建议使用jdk8，tomcat8。和solr4部署流程有略微差别。部署solr服务前，要先关闭iptables防火墙服务</strong><br><a id="more"></a></p><h2 id="二、搭建步骤"><a href="#二、搭建步骤" class="headerlink" title="二、搭建步骤"></a>二、搭建步骤</h2><h3 id="第一步：上传并解压solr7-1"><a href="#第一步：上传并解压solr7-1" class="headerlink" title="第一步：上传并解压solr7.1"></a>第一步：上传并解压solr7.1</h3><p>这里解压出来的文件夹叫solr-7.1.0，后面有很多步骤需要这个目录，以下简称：solr目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rz </span><br><span class="line">tar zxf solr-7.1.0.tgz</span><br></pre></td></tr></table></figure><h3 id="第二步：上传并解压tomcat8-5，复制一份出来"><a href="#第二步：上传并解压tomcat8-5，复制一份出来" class="headerlink" title="第二步：上传并解压tomcat8.5，复制一份出来"></a>第二步：上传并解压tomcat8.5，复制一份出来</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rz</span><br><span class="line">tar zxf apache-tomcat-8.5.24.tar.gz</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/solr</span><br><span class="line">cp -r apache-tomcat-8.5.24 /usr/<span class="built_in">local</span>/solr/tomcat</span><br></pre></td></tr></table></figure><h3 id="第三步：把solr部署到tomcat下"><a href="#第三步：把solr部署到tomcat下" class="headerlink" title="第三步：把solr部署到tomcat下"></a>第三步：把solr部署到tomcat下</h3><p>注意，这里因为我用的是solr7.1最新版，所以跟网上很多solr4的版本要拷贝*.war文件，然后再启动tomcat解压的操作是不一样的。（这里直接就是解压好的）</p><p>复制并重命名solr目录里的server/solr-webapp/webapp文件夹到/usr/local/solr/tomcat/webapps/solr</p><img src="/blog/2017/12/20/2017-12-20-Solr服务在Linux上搭建详细步骤/solr01.png"><h3 id="第四步：把solr目录里的server-lib-目录下的部分jar包，添加到第三步部署的solr工程中。"><a href="#第四步：把solr目录里的server-lib-目录下的部分jar包，添加到第三步部署的solr工程中。" class="headerlink" title="第四步：把solr目录里的server/lib/目录下的部分jar包，添加到第三步部署的solr工程中。"></a>第四步：把solr目录里的server/lib/目录下的部分jar包，添加到第三步部署的solr工程中。</h3><p>solr目录里的server/lib/ext/下的所有jar包，都复制到 /usr/local/solr/tomcat/webapps/solr/WEB-INF/lib/下，都是些日志相关的jar包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> server/lib/ext/</span><br><span class="line">cp * /usr/<span class="built_in">local</span>/solr/tomcat/webapps/solr/WEB-INF/lib/</span><br></pre></td></tr></table></figure><p>solr目录里的server/lib/metrics* 开头的5个jar包，复制到 /usr/local/solr/tomcat/webapps/solr/WEB-INF/lib/下（solr4部署没有这个）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> server/lib/</span><br><span class="line">cp met* /usr/<span class="built_in">local</span>/solr/tomcat/webapps/solr/WEB-INF/lib/</span><br></pre></td></tr></table></figure><h3 id="第五步：把solr目录里的server-resources-目录下的log4j-properties，添加到第三步部署的solr工程中"><a href="#第五步：把solr目录里的server-resources-目录下的log4j-properties，添加到第三步部署的solr工程中" class="headerlink" title="第五步：把solr目录里的server/resources/目录下的log4j.properties，添加到第三步部署的solr工程中"></a>第五步：把solr目录里的server/resources/目录下的log4j.properties，添加到第三步部署的solr工程中</h3><p>注意要创建一个classes的目录（solr4部署没有第五步）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/solr/tomcat/webapps/solr/WEB-INF/classes/</span><br><span class="line"><span class="built_in">cd</span> server/resources/</span><br><span class="line">cp log4j.properties /usr/<span class="built_in">local</span>/solr/tomcat/webapps/solr/WEB-INF/classes/</span><br></pre></td></tr></table></figure><h3 id="第六步：创建一个solrhome"><a href="#第六步：创建一个solrhome" class="headerlink" title="第六步：创建一个solrhome"></a>第六步：创建一个solrhome</h3><p>将solr目录里的servier/solr文件夹，复制到/usr/local/solr/下，重命名为solrhome，现在/usr/local/solr/目录下就有两个文件夹了，分别是第二步复制过来的tomcat文件夹，和第六步复制过来的solrhome文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> server</span><br><span class="line">cp -r solr /usr/<span class="built_in">local</span>/solr/solrhome</span><br></pre></td></tr></table></figure><h3 id="第七步：关联已部署的solr和solrhome"><a href="#第七步：关联已部署的solr和solrhome" class="headerlink" title="第七步：关联已部署的solr和solrhome"></a>第七步：关联已部署的solr和solrhome</h3><p>需要修改第二步复制出来的tomcat目录里，solr工程的web.xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd tomcat/webapps/solr/WEB-INF/</span><br><span class="line">vi web.xml</span><br></pre></td></tr></table></figure><p>找到这个，是被注释的，需要修改value那项</p><img src="/blog/2017/12/20/2017-12-20-Solr服务在Linux上搭建详细步骤/solr02.png"><p>打开注释，修改为上面自己创建的solrhome目录</p><img src="/blog/2017/12/20/2017-12-20-Solr服务在Linux上搭建详细步骤/solr03.png"><p>然后到最下方，将这一段注释掉，不然会报403错误，完成后保存退出（solr4部署不用注释这个）</p><img src="/blog/2017/12/20/2017-12-20-Solr服务在Linux上搭建详细步骤/solr04.png"><h3 id="第八步：启动tomcat"><a href="#第八步：启动tomcat" class="headerlink" title="第八步：启动tomcat"></a>第八步：启动tomcat</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tomcat/bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><p>去自己的电脑上访问下服务器的solr服务</p><p>注意下访问地址，直接访问(根据你自己的服务器ip写)192.168.25.128:8080/solr会报404，需要在后面加上/index.xml</p><p>如果出现下面的页面，就是solr服务搭建ok了</p><img src="/blog/2017/12/20/2017-12-20-Solr服务在Linux上搭建详细步骤/solr05.png"><p>如果要关闭solr服务，直接关闭tomcat就可以了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tomcat/bin</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure><h2 id="三、关于集群搭建"><a href="#三、关于集群搭建" class="headerlink" title="三、关于集群搭建"></a>三、关于集群搭建</h2><p>这篇只是单机solr服务的搭建过程，如果需要搭建solr集群，请参考我的这篇博客：</p><p><a href="http://dijia478.cn/blog/2017/12/24/2017-12-24-Solr%E9%9B%86%E7%BE%A4%E5%9C%A8Linux%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/">Solr集群在Linux上搭建详细步骤</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、系统环境&quot;&gt;&lt;a href=&quot;#一、系统环境&quot; class=&quot;headerlink&quot; title=&quot;一、系统环境&quot;&gt;&lt;/a&gt;一、系统环境&lt;/h2&gt;&lt;p&gt;CentOS-6.7-i386-bin-DVD1&lt;/p&gt;
&lt;p&gt;jdk-8u151-linux-i586&lt;/p&gt;
&lt;p&gt;apache-tomcat-8.5.24.tar&lt;/p&gt;
&lt;p&gt;solr-7.1.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：solr6.0以上，官方建议使用jdk8，tomcat8。和solr4部署流程有略微差别。部署solr服务前，要先关闭iptables防火墙服务&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Solr" scheme="http://dijia478.cn/categories/Solr/"/>
    
    
      <category term="单机solr服务搭建" scheme="http://dijia478.cn/tags/%E5%8D%95%E6%9C%BAsolr%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器上安装JDK小白教程</title>
    <link href="http://dijia478.cn/blog/2017/09/07/2017-09-07-Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85JDK%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B/"/>
    <id>http://dijia478.cn/blog/2017/09/07/2017-09-07-Linux服务器上安装JDK小白教程/</id>
    <published>2017-09-07T06:55:37.000Z</published>
    <updated>2018-01-07T03:13:27.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h2><p>VMware12 Pro</p><p>CentOS-6.7-i386-bin-DVD1</p><p>jdk-8u151-linux-i586</p><h2 id="二、详细安装步骤"><a href="#二、详细安装步骤" class="headerlink" title="二、详细安装步骤"></a>二、详细安装步骤</h2><h3 id="前提：需要卸载已经装过的jdk"><a href="#前提：需要卸载已经装过的jdk" class="headerlink" title="前提：需要卸载已经装过的jdk"></a>前提：需要卸载已经装过的jdk</h3><a id="more"></a><p>rpm -qa | grep jdk        会显示你所有包含jdk这个字符串的安装包</p><p>rpm -e –nodeps 对应的每个包名        会卸载对应的包</p><p>之后如果输入<code>java -version</code>命令后显示<code>command not found</code>，就是卸载完了。我之前是装过jdk1.7的，所以我需要卸载 ，从来没装过jdk的直接从下面开始</p><h3 id="1-去官网下载JDK"><a href="#1-去官网下载JDK" class="headerlink" title="1. 去官网下载JDK"></a>1. 去官网下载JDK</h3><p> <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>需要选中那个图中红色框起来的小圆点，才能下在，意思就是你接收许可协议</p><p>因为我的虚拟系统是32位的，所以我下32位JDK，根据你的情况具体看。x86代表32位系统，x64代表64位系统。</p><p>不知道服务器是多少位系统的，直接用这个命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getconf LONG_BIT</span><br></pre></td></tr></table></figure><img src="/blog/2017/09/07/2017-09-07-Linux服务器上安装JDK小白教程/jdk01.png"><h3 id="2-上传，解压JDK"><a href="#2-上传，解压JDK" class="headerlink" title="2. 上传，解压JDK"></a>2. 上传，解压JDK</h3><p>有人可能不知到怎么上传文件到服务器上，这里我推荐个软件，叫<code>lrzsz</code></p><p>这是一个简单的linux服务器上传下载工具，如果你没装过的话，可以装一下，挺好用的</p><p>安装前先检查有没有安装lrzsz：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm –q lrzsz</span><br></pre></td></tr></table></figure><p>没安装可以使用下列命令进行安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install lrzsz</span><br></pre></td></tr></table></figure><p>之后你就可以用rz命令上传本地文件到服务器的当前目录下了，sz命令后面跟上指定文件目录，可以将其从服务器上下载到本地</p><p>好了，用rz命令上传好jdk的tar包后，需要解压，执行如下命令，可能你用的版本和我不一样，注意后面是你自己上传的jdk的包名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxf jdk<span class="number">-8</span>u151-linux-i586.tar.gz</span><br></pre></td></tr></table></figure><h3 id="3-移动下位置"><a href="#3-移动下位置" class="headerlink" title="3. 移动下位置"></a>3. 移动下位置</h3><p>为了以后方便管理，我把jdk的目录换个位置，重命名一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv jdk1.8.0_151 /usr/share/jdk1.8</span><br></pre></td></tr></table></figure><h3 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a>4. 配置环境变量</h3><p>用vim打开<code>/etc/profile</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在文件最下面添加下面的语句，保存退出（按ESC，然后输入，英文冒号wq英文感叹号（:wq!），按回车）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/share/jdk1<span class="number">.8</span></span><br><span class="line">CLASSPATH=$JAVA_HOME/lib/</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure><p>执行下面的命令让配置立即生效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>现在输入<code>java -version</code>命令，如果显示<code>java version &quot;1.8.0_151&quot;</code>，就是ok了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、环境&quot;&gt;&lt;a href=&quot;#一、环境&quot; class=&quot;headerlink&quot; title=&quot;一、环境&quot;&gt;&lt;/a&gt;一、环境&lt;/h2&gt;&lt;p&gt;VMware12 Pro&lt;/p&gt;
&lt;p&gt;CentOS-6.7-i386-bin-DVD1&lt;/p&gt;
&lt;p&gt;jdk-8u151-linux-i586&lt;/p&gt;
&lt;h2 id=&quot;二、详细安装步骤&quot;&gt;&lt;a href=&quot;#二、详细安装步骤&quot; class=&quot;headerlink&quot; title=&quot;二、详细安装步骤&quot;&gt;&lt;/a&gt;二、详细安装步骤&lt;/h2&gt;&lt;h3 id=&quot;前提：需要卸载已经装过的jdk&quot;&gt;&lt;a href=&quot;#前提：需要卸载已经装过的jdk&quot; class=&quot;headerlink&quot; title=&quot;前提：需要卸载已经装过的jdk&quot;&gt;&lt;/a&gt;前提：需要卸载已经装过的jdk&lt;/h3&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://dijia478.cn/categories/Linux/"/>
    
    
      <category term="JDK安装" scheme="http://dijia478.cn/tags/JDK%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架学习笔记整理-cache篇</title>
    <link href="http://dijia478.cn/blog/2017/08/28/2017-08-28-Spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-cache%E7%AF%87/"/>
    <id>http://dijia478.cn/blog/2017/08/28/2017-08-28-Spring框架学习笔记整理-cache篇/</id>
    <published>2017-08-28T12:57:55.000Z</published>
    <updated>2018-02-09T08:31:14.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于缓存"><a href="#关于缓存" class="headerlink" title="关于缓存"></a>关于缓存</h2><p>缓存是实际工作中非常常用的一种提高性能的方法。而在java中，所谓缓存，就是将程序或系统经常要调用的对象存在内存中，再次调用时可以快速从内存中获取对象，不必再去创建新的重复的实例。这样做可以减少系统开销，提高系统效率。<br><a id="more"></a><br>在增删改查中，数据库查询占据了数据库操作的80%以上，而非常频繁的磁盘I/O读取操作，会导致数据库性能极度低下。而数据库的重要性就不言而喻了：</p><ul><li>数据库通常是企业应用系统最核心的部分</li><li>数据库保存的数据量通常非常庞大</li><li>数据库查询操作通常很频繁，有时还很复杂</li></ul><p>在系统架构的不同层级之间，为了加快访问速度，都可以存在缓存</p><img src="/blog/2017/08/28/2017-08-28-Spring框架学习笔记整理-cache篇/springcache01.png"><h2 id="Spring-cache特性与缺憾"><a href="#Spring-cache特性与缺憾" class="headerlink" title="Spring cache特性与缺憾"></a>Spring cache特性与缺憾</h2><p>现在市场上主流的缓存框架有ehcache、redis、memcached。spring cache可以通过简单的配置就可以搭配使用起来。其中使用注解方式是最简单的。</p><img src="/blog/2017/08/28/2017-08-28-Spring框架学习笔记整理-cache篇/springcache02.png"><h2 id="Cache注解"><a href="#Cache注解" class="headerlink" title="Cache注解"></a>Cache注解</h2><img src="/blog/2017/08/28/2017-08-28-Spring框架学习笔记整理-cache篇/springcache03.png"><p>从以上的注解中可以看出，虽然使用注解的确方便，但是缺少灵活的缓存策略，</p><p>缓存策略：</p><ul><li>TTL（Time To Live ） 存活期，即从缓存中创建时间点开始直到它到期的一个时间段（不管在这个时间段内有没有访问都将过期）</li><li>TTI（Time To Idle） 空闲期，即一个数据多久没被访问将从缓存中移除的时间</li></ul><p>项目中可能有很多缓存的TTL不相同，这时候就需要编码式使用编写缓存。</p><h2 id="条件缓存"><a href="#条件缓存" class="headerlink" title="条件缓存"></a>条件缓存</h2><p>根据运行流程，如下@Cacheable将在执行方法之前( #result还拿不到返回值)判断condition，如果返回true，则查缓存； </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>, condition = <span class="string">"#id lt 10"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">conditionFindById</span><span class="params">(<span class="keyword">final</span> Long id)</span></span></span><br></pre></td></tr></table></figure><p>如下@CachePut将在执行完方法后（#result就能拿到返回值了）判断condition，如果返回true，则放入缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>, condition = <span class="string">"#result.username ne 'liu'"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">conditionSave</span><span class="params">(<span class="keyword">final</span> User user)</span></span></span><br></pre></td></tr></table></figure><p>如下@CachePut将在执行完方法后（#result就能拿到返回值了）判断unless，如果返回false，则放入缓存；（即跟condition相反）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>, unless = <span class="string">"#result.username eq 'liu'"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">conditionSave2</span><span class="params">(<span class="keyword">final</span> User user)</span></span></span><br></pre></td></tr></table></figure><p>如下@CacheEvict， beforeInvocation=false表示在方法执行之后调用（#result能拿到返回值了）；且判断condition，如果返回true，则移除缓存；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>, beforeInvocation = <span class="keyword">false</span>, condition = <span class="string">"#result.username ne 'liu'"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">conditionDelete</span><span class="params">(<span class="keyword">final</span> User user)</span></span></span><br></pre></td></tr></table></figure><ul><li>小试牛刀，综合运用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    users.add(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    users.remove(user);</span><br><span class="line">    users.add(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">delete</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    users.remove(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, allEntries = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    users.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">final</span> Long id)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"cache miss, invoke find by id, id:"</span> + id);</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        <span class="keyword">if</span> (user.getId().equals(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置ehcache与redis"><a href="#配置ehcache与redis" class="headerlink" title="配置ehcache与redis"></a>配置ehcache与redis</h2><ul><li>spring cache集成ehcache，spring-ehcache.xml主要内容：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;ehcache.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring提供的基于的Ehcache实现的缓存管理器 --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 如果有多个ehcacheManager要在bean加上p:shared="true" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ehcacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheManagerFactoryBean"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:xml/ehcache.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheCacheManager"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"ehcacheManager"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAware"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- cache注解，和spring-redis.xml中的只能使用一个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache:annotation-driven</span> <span class="attr">cache-manager</span>=<span class="string">"cacheManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spring cache集成redis，spring-redis.xml主要内容：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意需要添加Spring Data Redis等jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>redis配置<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.maxIdle&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.maxActive&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.maxWait&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.testOnBorrow&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.testOnReturn&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JedisConnectionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.master.ip&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.master.port&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:connectionFactory-ref</span>=<span class="string">"jedisConnectionFactory"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashKeySerializer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashValueSerializer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--spring cache--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.cache.RedisCacheManager"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">c:redisOperations-ref</span>=<span class="string">"redisTemplate"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认缓存10分钟 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultExpiration"</span> <span class="attr">value</span>=<span class="string">"600"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usePrefix"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- cacheName 缓存超时配置，半小时，一小时，一天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"expires"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value-type</span>=<span class="string">"java.lang.Long"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"halfHour"</span> <span class="attr">value</span>=<span class="string">"1800"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"hour"</span> <span class="attr">value</span>=<span class="string">"3600"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"oneDay"</span> <span class="attr">value</span>=<span class="string">"86400"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- shiro cache keys --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"authorizationCache"</span> <span class="attr">value</span>=<span class="string">"1800"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"authenticationCache"</span> <span class="attr">value</span>=<span class="string">"1800"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"activeSessionCache"</span> <span class="attr">value</span>=<span class="string">"1800"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- cache注解，和spring-ehcache.xml中的只能使用一个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache:annotation-driven</span> <span class="attr">cache-manager</span>=<span class="string">"cacheManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>项目中注解缓存只能配置一个，所以可以通过以下引入哪个配置文件来决定使用哪个缓存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring/spring-ehcache.xml"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;import resource="classpath:spring/spring-redis.xml"/&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>当然，可以通过其他配置搭配使用两个缓存机制。比如ecache做一级缓存，redis做二级缓存。</p><img src="/blog/2017/08/28/2017-08-28-Spring框架学习笔记整理-cache篇/springcache04.png"><p>好了所有spring的知识点总结就到这里结束了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于缓存&quot;&gt;&lt;a href=&quot;#关于缓存&quot; class=&quot;headerlink&quot; title=&quot;关于缓存&quot;&gt;&lt;/a&gt;关于缓存&lt;/h2&gt;&lt;p&gt;缓存是实际工作中非常常用的一种提高性能的方法。而在java中，所谓缓存，就是将程序或系统经常要调用的对象存在内存中，再次调用时可以快速从内存中获取对象，不必再去创建新的重复的实例。这样做可以减少系统开销，提高系统效率。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://dijia478.cn/categories/Spring/"/>
    
      <category term="cache" scheme="http://dijia478.cn/categories/Spring/cache/"/>
    
    
      <category term="学习笔记" scheme="http://dijia478.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring-cache" scheme="http://dijia478.cn/tags/Spring-cache/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架学习笔记整理-aop篇</title>
    <link href="http://dijia478.cn/blog/2017/08/07/2017-08-07-Spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-aop%E7%AF%87/"/>
    <id>http://dijia478.cn/blog/2017/08/07/2017-08-07-Spring框架学习笔记整理-aop篇/</id>
    <published>2017-08-07T04:32:02.000Z</published>
    <updated>2018-02-09T08:30:36.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是aop"><a href="#什么是aop" class="headerlink" title="什么是aop"></a>什么是aop</h2><p>AOP（Aspect-OrientedProgramming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。<br><a id="more"></a><br>而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。</p><img src="/blog/2017/08/07/2017-08-07-Spring框架学习笔记整理-aop篇/springaop01.png"><h2 id="aop使用场景"><a href="#aop使用场景" class="headerlink" title="aop使用场景"></a>aop使用场景</h2><p>aop框架种类</p><ul><li>AspectJ</li><li>JBoss AOP</li><li>Spring AOP</li></ul><p>使用aop可以做的事情有很多。</p><ul><li>性能监控，在方法调用前后记录调用时间，方法执行太长或超时报警。</li><li>缓存代理，缓存某方法的返回值，下次执行该方法时，直接从缓存里获取。</li><li>软件破解，使用AOP修改软件的验证类的判断逻辑。</li><li>记录日志，在方法执行前后记录系统日志。</li><li>工作流系统，工作流系统需要将业务代码和流程引擎代码混合在一起执行，那么我们可以使用AOP将其分离，并动态挂接业务。</li><li>权限验证，方法执行前验证是否有权限执行当前方法，没有则抛出没有权限执行异常，由业务代码捕捉。</li></ul><p>观察一下传统编码方式与使用aop的区别：</p><img src="/blog/2017/08/07/2017-08-07-Spring框架学习笔记整理-aop篇/springaop02.png"><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>描述AOP常用的一些术语有通知(Adivce)、切点（Pointcut）、连接点（Join point）、切面（Aspect）、引入（Introduction）、织入（Weaving）、通知（Advice）等。</p><img src="/blog/2017/08/07/2017-08-07-Spring框架学习笔记整理-aop篇/springaop03.png" title="aop术语"><img src="/blog/2017/08/07/2017-08-07-Spring框架学习笔记整理-aop篇/springaop04.png" title="aop通知类型"><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><p>相比xml配置，基于注解的方式更加简洁方便。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut</span>(value=<span class="string">"execution(* cn.dijia478.core.service.*.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">point</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span>(value=<span class="string">"point()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"transaction begin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"point()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"transaction commit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"point()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"transaction begin"</span>);</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">"transaction commit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在applicationContext.xml中配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"transactionDemo"</span> <span class="attr">class</span> = <span class="string">"cn.dijia478.core.transaction.TransactionDemo"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-aop原理"><a href="#Spring-aop原理" class="headerlink" title="Spring aop原理"></a>Spring aop原理</h2><p>通过前面介绍可以知道：AOP 代理其实是由 AOP 框架动态生成的一个对象，该对象可作为目标对象使用。AOP 代理包含了目标对象的全部方法，但 AOP 代理中的方法与目标对象的方法存在差异：AOP 方法在特定切入点添加了增强处理，并回调了目标对象的方法。</p><img src="/blog/2017/08/07/2017-08-07-Spring框架学习笔记整理-aop篇/springaop05.png" title="代理的方法与目标对象的方法"><p>Spring 的 AOP 代理由 Spring 的 IoC 容器负责生成、管理，其依赖关系也由 IoC 容器负责管理。因此，AOP 代理可以直接使用容器中的其他 Bean 实例作为目标，这种关系可由 IoC 容器的依赖注入提供。</p><p>aop开发时，其中需要程序员参与的只有 3 个部分：</p><ul><li>定义普通业务组件。</li><li>定义切入点，一个切入点可能横切多个业务组件。</li><li>定义增强处理，增强处理就是在 AOP 框架为普通业务组件织入的处理动作。</li></ul><p>为了理清关系，先来个类关系图(找不到更清晰的了)。</p><img src="/blog/2017/08/07/2017-08-07-Spring框架学习笔记整理-aop篇/springaop06.png" title="Spring中主要的AOP组件"><h2 id="两种动态代理方式"><a href="#两种动态代理方式" class="headerlink" title="两种动态代理方式"></a>两种动态代理方式</h2><p>Spring默认采取的动态代理机制实现AOP，当动态代理不可用时（代理类无接口）会使用CGlib机制。</p><p>Spring提供了两种方式来生成代理对象: JDKProxy和Cglib，具体使用哪种方式生成由AopProxyFactory根据AdvisedSupport对象的配置来决定。默认的策略是如果目标类是接口，则使用JDK动态代理技术，否则使用Cglib来生成代理。</p><p><strong>JDK动态代理</strong></p><ul><li>JDK动态代理主要涉及到java.lang.reflect包中的两个类：Proxy和InvocationHandler。InvocationHandler是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编制在一起。</li><li>Proxy利用InvocationHandler动态创建一个符合某一接口的实例，生成目标类的代理对象。</li></ul><p><strong>CGLib动态代理</strong></p><ul><li>CGLib全称为Code Generation Library，是一个强大的高性能，高质量的代码生成类库，可以在运行期扩展Java类与实现Java接口，CGLib封装了asm，可以再运行期动态生成新的class。和JDK动态代理相比较：JDK创建代理有一个限制，就是只能为接口创建代理实例，而对于没有通过接口定义业务方法的类，则可以通过CGLib创建动态代理。</li></ul><h2 id="知识拓展"><a href="#知识拓展" class="headerlink" title="知识拓展"></a>知识拓展</h2><p>通过上面的分析，大家是否有种熟悉的感觉，似乎和拦截器、过滤器的功能相似。那么问题来了，aop与拦截器、过滤器是什么关系。</p><p>先来回顾一下拦截器与过滤器。如下图一网友的测试，在web.xml中注册了TestFilter1和TestFilter2。然后在spring的配置文件中配置了BaseInterceptor和TestInterceptor。得到的结果如下图所示。从图中可以看出，拦截器和过滤器都横切了业务方法，看似符合aop的思想。</p><img src="/blog/2017/08/07/2017-08-07-Spring框架学习笔记整理-aop篇/springaop07.png"><p>Filter过滤器：拦截web访问url地址。 Interceptor拦截器：拦截以 .action结尾的url，拦截Action的访问。 Spring AOP拦截器：只能拦截Spring管理Bean的访问（业务层Service）</p><img src="/blog/2017/08/07/2017-08-07-Spring框架学习笔记整理-aop篇/springaop08.png" title="拦截器与过滤器"><p>aop篇就写到这里，下篇博客将会写Spring cache的内容</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是aop&quot;&gt;&lt;a href=&quot;#什么是aop&quot; class=&quot;headerlink&quot; title=&quot;什么是aop&quot;&gt;&lt;/a&gt;什么是aop&lt;/h2&gt;&lt;p&gt;AOP（Aspect-OrientedProgramming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://dijia478.cn/categories/Spring/"/>
    
      <category term="aop" scheme="http://dijia478.cn/categories/Spring/aop/"/>
    
    
      <category term="学习笔记" scheme="http://dijia478.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring-aop" scheme="http://dijia478.cn/tags/Spring-aop/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架学习笔记整理-mvc篇</title>
    <link href="http://dijia478.cn/blog/2017/07/17/2017-07-17-Spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-mvc%E7%AF%87/"/>
    <id>http://dijia478.cn/blog/2017/07/17/2017-07-17-Spring框架学习笔记整理-mvc篇/</id>
    <published>2017-07-17T06:11:23.000Z</published>
    <updated>2018-02-09T08:30:02.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-MVC简介与运行原理"><a href="#Spring-MVC简介与运行原理" class="headerlink" title="Spring MVC简介与运行原理"></a>Spring MVC简介与运行原理</h2><p>Spring的模型-视图-控制器（MVC）框架是围绕一个DispatcherServlet来设计的，这个Servlet会把请求分发给各个处理器，并支持可配置的处理器映射、视图渲染、本地化、时区与主题渲染等，甚至还能支持文件上传。<br><a id="more"></a><br><img src="/blog/2017/07/17/2017-07-17-Spring框架学习笔记整理-mvc篇/springmvc01.png" title="原理图"></p><ul><li>(1) Http请求：客户端请求提交到DispatcherServlet。</li><li>(2) 寻找处理器：由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller。</li><li>(3) 调用处理器：DispatcherServlet将请求提交到Controller。</li><li>(4)(5)调用业务处理和返回结果：Controller调用业务逻辑处理后，返回ModelAndView。</li><li>(6)(7)处理视图映射并返回模型： DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图。</li><li>(8) Http响应：视图负责将结果显示到客户端</li></ul><h2 id="Spring-MVC的主要注解"><a href="#Spring-MVC的主要注解" class="headerlink" title="Spring MVC的主要注解"></a>Spring MVC的主要注解</h2><img src="/blog/2017/07/17/2017-07-17-Spring框架学习笔记整理-mvc篇/springmvc02.png" title="SpringMVC注解"><h2 id="ContextLoaderListener"><a href="#ContextLoaderListener" class="headerlink" title="ContextLoaderListener"></a>ContextLoaderListener</h2><p>在讲ContextLoaderListener之前，首先来了解一下web.xml的作用。</p><ul><li>一个web项目中可以没有web.xml文件，也就是说，web.xml文件并不是web工程必须的。web.xml文件是用来初始化配置信息：比如Welcome页面、servlet、servlet-mapping、filter、listener、启动加载级别等。当你的web工程没用到这些时，你可以不用web.xml文件来配置你的Application。</li><li>当要启动某个web项目时，服务器软件或容器如（tomcat）会第一步加载项目中的web.xml文件，通过其中的各种配置来启动项目，只有其中配置的各项均无误时，项目才能正确启动。web.xml有多项标签，在其加载的过程中顺序依次为：context-param &gt;&gt; listener &gt;&gt; fileter &gt;&gt; servlet。（同类多个节点以出现顺序依次加载）</li></ul><img src="/blog/2017/07/17/2017-07-17-Spring框架学习笔记整理-mvc篇/springmvc03.png"><p>而Spring MVC启动过程大致分为两个过程：</p><ul><li>ContextLoaderListener初始化，实例化IOC容器，并将此容器实例注册到ServletContext中。</li><li>DispatcherServlet初始化。</li></ul><img src="/blog/2017/07/17/2017-07-17-Spring框架学习笔记整理-mvc篇/springmvc04.png"><p>其中ContextLoaderListener监听器它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。在ContextLoaderListener中关联了ContextLoader这个类，所以整个加载配置过程由ContextLoader来完成。</p><ul><li>ContextLoaderListener在web.xml中的配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置contextConfigLocation初始化参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置ContextLoaderListerner --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ServletContextListener 接口有两个方法：<code>contextInitialized</code>和<code>contextDestroyed</code></p><h2 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h2><p>Spring MVC框架，与其他很多web的MVC框架一样：请求驱动；所有设计都围绕着一个中央Servlet来展开，它负责把所有请求分发到控制器；同时提供其他web应用开发所需要的功能。不过Spring的中央处理器，DispatcherServlet，能做的比这更多。</p><p>下图展示了Spring Web MVC的DispatcherServlet处理请求的工作流。熟悉设计模式的朋友会发现，DispatcherServlet应用的其实就是一个“前端控制器”的设计模式（其他很多优秀的web框架也都使用了这个设计模式）。</p><ul><li>流程图</li></ul><img src="/blog/2017/07/17/2017-07-17-Spring框架学习笔记整理-mvc篇/springmvc05.png" title="SpringMVC处理请求的流程"><ul><li>DispatcherServlet在web.xml中的配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中</p><ul><li>load-on-startup：表示启动容器时初始化该Servlet；</li><li>url-pattern：表示哪些请求交给Spring Web MVC处理， <code>/</code> 是用来定义默认servlet映射的。也可以如<code>*.html</code>表示拦截所有以html为扩展名的请求。</li></ul><p>在Spring MVC中，每个DispatcherServlet都持有一个自己的上下文对象WebApplicationContext，它又继承了根（root）WebApplicationContext对象中已经定义的所有bean。这些继承的bean可以在具体的Servlet实例中被重载，在每个Servlet实例中你也可以定义其scope下的新bean。</p><p>WebApplicationContext继承自ApplicationContext，它提供了一些web应用经常需要用到的特性。它与普通的ApplicationContext不同的地方在于，它支持主题的解析，并且知道它关联到的是哪个servlet（它持有一个该ServletContext的引用）</p><img src="/blog/2017/07/17/2017-07-17-Spring框架学习笔记整理-mvc篇/springmvc06.png" title="DispatcherServlet继承结构"><p>Spring MVC同时提供了很多特殊的注解，用于处理请求和渲染视图等。DispatcherServlet初始化的过程中会默认使用这些特殊bean进行配置。如果你想指定使用哪个特定的bean，你可以在web应用上下文WebApplicationContext中简单地配置它们。</p><img src="/blog/2017/07/17/2017-07-17-Spring框架学习笔记整理-mvc篇/springmvc07.png"><p>其中，常用的ViewResolver的配置。以jsp作为视图为例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对模型视图名称的解析,即在模型视图名称添加前后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置上传文件限制MultipartResolver</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 上传限制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 上传文件大小限制为31M，31*1024*1024 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"32505856"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="applicationContext-xml配置文件中的标签"><a href="#applicationContext-xml配置文件中的标签" class="headerlink" title="applicationContext.xml配置文件中的标签"></a>applicationContext.xml配置文件中的标签</h2><img src="/blog/2017/07/17/2017-07-17-Spring框架学习笔记整理-mvc篇/springmvc08.png"><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>前面说到DispatcherServlet中有个特殊的Bean叫MultipartResolver，可用于限制文件的上传大小等。当解析器MultipartResolver完成处理时，请求便会像其他请求一样被正常流程处理。</p><ul><li>表单</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/form"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>控制器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/form"</span>, method = RequestMethod.POST)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">handleFormUpload</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name, </span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(<span class="string">"file"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">          <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">          <span class="comment">// store the bytes somewhere</span></span><br><span class="line">          <span class="keyword">return</span> <span class="string">"redirect:uploadSuccess"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:uploadFailure"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>先来说下常见的异常处理有几种方式，如下图：</p><img src="/blog/2017/07/17/2017-07-17-Spring框架学习笔记整理-mvc篇/springmvc09.png"><p>Spring的处理器异常解析器HandlerExceptionResolver接口的实现负责处理各类控制器执行过程中出现的异常。也是上面提到的，是DispatcherServlet中的特殊bean，可以自定义配置处理。</p><p>某种程度上讲，HandlerExceptionResolver与你在web应用描述符web.xml文件中能定义的异常映射（exception mapping）很相像，不过它比后者提供了更灵活的方式。比如它能提供异常被抛出时正在执行的是哪个处理器这样的信息。</p><ul><li>HandlerExceptionResolver 提供resolveException接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;  </span><br><span class="line">    <span class="function">ModelAndView <span class="title">resolveException</span><span class="params">(  </span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在BaseController中使用 @ExceptionHandler注解处理异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">exceptionHandler</span><span class="params">(Exception ex, HttpServletResponse response, </span></span></span><br><span class="line"><span class="function"><span class="params">             HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String url = <span class="string">""</span>;</span><br><span class="line">String msg = ex.getMessage();</span><br><span class="line">Object resultModel = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (ex.getClass() == HttpRequestMethodNotSupportedException.class) &#123;</span><br><span class="line">url = <span class="string">"admin/common/500"</span>;</span><br><span class="line">System.out.println(<span class="string">"--------没有找到对应方法---------"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex.getClass() == ParameterException.class) &#123;<span class="comment">// 自定义的异常</span></span><br><span class="line">                               </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex.getClass() == UnauthorizedException.class) &#123;</span><br><span class="line">url = <span class="string">"admin/common/unauth"</span>;</span><br><span class="line">System.out.println(<span class="string">"--------没有权限---------"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String header = req.getHeader(<span class="string">"X-Requested-With"</span>);</span><br><span class="line"><span class="keyword">boolean</span> isAjax = <span class="string">"XMLHttpRequest"</span>.equalsIgnoreCase(header);</span><br><span class="line">String method = req.getMethod();</span><br><span class="line"><span class="keyword">boolean</span> isPost = <span class="string">"POST"</span>.equalsIgnoreCase(method);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isAjax || isPost) &#123;</span><br><span class="line"><span class="keyword">return</span> Message.error(msg);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ModelAndView view = <span class="keyword">new</span> ModelAndView(url);</span><br><span class="line">view.addObject(<span class="string">"error"</span>, msg);</span><br><span class="line">view.addObject(<span class="string">"class"</span>, ex.getClass());</span><br><span class="line">view.addObject(<span class="string">"method"</span>, request.getRequestURI());</span><br><span class="line"><span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">logger.error(exception.getMessage(), exception);</span><br><span class="line"><span class="keyword">return</span> resultModel;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">logger.error(msg, ex);</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在web.xml中处理异常</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认的错误处理页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-code</span>&gt;</span>403<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">location</span>&gt;</span>/403.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 仅仅在调试的时候注视掉,在正式部署的时候不能注释 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这样配置也是可以的，表示发生500错误的时候，转到500.jsp页面处理。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这样的配置表示如果jsp页面或者servlet发生java.lang.Exception类型（当然包含子类）的异常就会转到500.jsp页面处理。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Exception<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当error-code和exception-type都配置时，exception-type配置的页面优先级高及出现500错误，发生异常Exception时会跳转到500.jsp--&gt;</span></span><br></pre></td></tr></table></figure><ul><li>来一个问题：HandlerExceptionResolver和web.xml中配置的error-page会有冲突吗？</li></ul><p>解答：如果resolveException返回了ModelAndView，会优先根据返回值中的页面来显示。不过，resolveException可以返回null，此时则展示web.xml中的error-page的500状态码配置的页面。 当web.xml中有相应的error-page配置，则可以在实现resolveException方法时返回null。 API文档中对返回值的解释：<code>return a corresponding ModelAndView to forward to, or null for default processing.</code></p><p>OK，关于Spring MVC就先到这里，下篇博客将会整理Spring aop的内容</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring-MVC简介与运行原理&quot;&gt;&lt;a href=&quot;#Spring-MVC简介与运行原理&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC简介与运行原理&quot;&gt;&lt;/a&gt;Spring MVC简介与运行原理&lt;/h2&gt;&lt;p&gt;Spring的模型-视图-控制器（MVC）框架是围绕一个DispatcherServlet来设计的，这个Servlet会把请求分发给各个处理器，并支持可配置的处理器映射、视图渲染、本地化、时区与主题渲染等，甚至还能支持文件上传。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://dijia478.cn/categories/Spring/"/>
    
      <category term="SpringMVC" scheme="http://dijia478.cn/categories/Spring/SpringMVC/"/>
    
    
      <category term="学习笔记" scheme="http://dijia478.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SpringMVC" scheme="http://dijia478.cn/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架学习笔记整理-ioc篇</title>
    <link href="http://dijia478.cn/blog/2017/05/18/2017-05-18-Spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-ioc%E7%AF%87/"/>
    <id>http://dijia478.cn/blog/2017/05/18/2017-05-18-Spring框架学习笔记整理-ioc篇/</id>
    <published>2017-05-18T11:09:36.000Z</published>
    <updated>2018-02-09T09:11:47.207Z</updated>
    
    <content type="html"><![CDATA[<p>学过java的都知道：所有的对象都必须创建；或者说：使用对象之前必须先创建。而使用IoC之后，你就可以不再手动创建对象，而是从IoC容器中直接获取对象。</p><p>就好像我们无需考虑对象的销毁回收一样，因为java垃圾回收机制帮助我们实现了这个过程；而IoC则是让我们无需考虑对象的创建过程，由IoC容器帮我们实现对象的创建、注入等过程。<br><a id="more"></a><br><img src="/blog/2017/05/18/2017-05-18-Spring框架学习笔记整理-ioc篇/springioc01.png" title="Spring知识细节"></p><h2 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h2><img src="/blog/2017/05/18/2017-05-18-Spring框架学习笔记整理-ioc篇/springioc02.png" title="Spring-IoC简介"><h2 id="Spring-IoC容器"><a href="#Spring-IoC容器" class="headerlink" title="Spring IoC容器"></a>Spring IoC容器</h2><p>在Spring框架中的核心组件只有三个：Core、Context和Bean。它们构建起了整个Spring的骨骼架构，没有它们就不可能有AOP、Web等特性功能</p><img src="/blog/2017/05/18/2017-05-18-Spring框架学习笔记整理-ioc篇/springioc03.png" title="Spring整体结构图"><p>如果说在三个核心中再选出一个核心，那就非Bean莫属了。可以说，Spring就是面向Bean的编程，Bean在Spring中才是真正的主角。</p><p>Spring为何如此流行？你会发现Spring解决了一个非常关键的问题，它可以让你对对象之间的关系转而用配置文件来管理，或者注解，也就是它的依赖注入机制。而这个注入关系在一个叫IoC的容器中管理。IoC容器就是被Bean包裹的对象。Spring正是通过把对象包装在Bean中从而达到管理这些对象及做一些列额外操作的目的。</p><img src="/blog/2017/05/18/2017-05-18-Spring框架学习笔记整理-ioc篇/springioc04.png" title="IoC容器"><img src="/blog/2017/05/18/2017-05-18-Spring框架学习笔记整理-ioc篇/springioc05.png" title="IoC初始化过程"><img src="/blog/2017/05/18/2017-05-18-Spring框架学习笔记整理-ioc篇/springioc06.png" title="IoC容器工作原理"><h2 id="三大核心组件协同工作"><a href="#三大核心组件协同工作" class="headerlink" title="三大核心组件协同工作"></a>三大核心组件协同工作</h2><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><p>Spring的bean实例。身份是演员。</p><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p>Spring的上下文。身份是导演。</p><p>我们知道Bean包装的是Object，而Object必然有数据，如何给这些数据提供生存环境就是Context要解决的问题，对Context来说，他就是要发现每个Bean之间的关系，为他们建立这种关系并且要维护好这种关系。所以Context就是一个Bean关系的集合，这个关系集合又叫IoC容器，一旦建立起这个IoC容器后，Spring就可以为你工作了。</p><h3 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h3><p>Spring的核心工具包。身份是道具。</p><p>建立和维护每个Bean之间的关系所需要的一系列核心工具包。其实就相当于Util包。</p><h2 id="BeanFactory与ApplacationContext的区别"><a href="#BeanFactory与ApplacationContext的区别" class="headerlink" title="BeanFactory与ApplacationContext的区别"></a>BeanFactory与ApplacationContext的区别</h2><p>IoC中最核心的接口是Beanfactory提供IoC的高级服务，而ApplicationContext是建立在BeanFactory基础之上提供抽象的面向应用的服务。</p><img src="/blog/2017/05/18/2017-05-18-Spring框架学习笔记整理-ioc篇/springioc07.png"><h2 id="三种注入方式"><a href="#三种注入方式" class="headerlink" title="三种注入方式"></a>三种注入方式</h2><p>在Spring框架中，依赖注入(DI)的设计模式是用来定义对象彼此间的依赖。使用xml配置bean的情况下，它主要有两种类型：</p><ul><li>Setter方法注入</li><li>构造器注入</li></ul><p>当然，有了注解之后，使用注解的方式更加方便快捷。即自动装配功能实现属性自动注入（@Autowire）。</p><p>写到这里，让我想起了最近在牛客网上看的一道关于spring的选择题了：</p><p>下面有关spring的依赖注入，说法错误的是？<br>A.依赖注入通常有如下两种：设置注入和构造注入<br>B.构造注入可以在构造器中决定依赖关系的注入顺序，优先依赖的优先注入<br>C.当设值注入与构造注入同时存在时，先执行设值注入，再执行构造注入<br>D.设值注入是指IoC容器使用属性的setter方法来注入被依赖的实例。这种注入方式比较简单、直观</p><p>牛客网给出的答案是选C，应该是先执行构造注入，后执行设置注入。<a href="https://www.nowcoder.com/questionTerminal/a1644e2668f94ab78bfefa38808fb006" target="_blank" rel="noopener">查看网友评论及答案</a></p><h2 id="Spring原理解析"><a href="#Spring原理解析" class="headerlink" title="Spring原理解析"></a>Spring原理解析</h2><p>Spring的代码还真是不好读，分得太细了，文字也是难以描述出来，看了别人有关的博客，贴了好多代码，画了好多ER图来描述关键接口或类之间的关系。这么一篇这么长文章下来，大家也未必会认真读代码，看ER图，干脆也不跟风了。就贴了一点在我看来比较关键的代码，嘿嘿。</p><h3 id="context的初始化过程"><a href="#context的初始化过程" class="headerlink" title="context的初始化过程"></a>context的初始化过程</h3><p>当运行<code>ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</code> 时，构造方法<code>ClassPathXmlApplicationContext(String configLocation)</code>调用了<code>this(new String[] {configLocation}, true, null);</code>， 该构造方法具体代码如下。</p><img src="/blog/2017/05/18/2017-05-18-Spring框架学习笔记整理-ioc篇/springioc08.png" title="ClassPathXmlApplicationContext构造方法"><img src="/blog/2017/05/18/2017-05-18-Spring框架学习笔记整理-ioc篇/springioc09.png" title="refresh()方法"><h3 id="从时序图来看启动上述初始化"><a href="#从时序图来看启动上述初始化" class="headerlink" title="从时序图来看启动上述初始化"></a>从时序图来看启动上述初始化</h3><img src="/blog/2017/05/18/2017-05-18-Spring框架学习笔记整理-ioc篇/springioc10.png" title="容器初始化时序图"><p>好了，IoC容器篇就简单总结到这里，下一篇会整理下Spring MVC的相关内容</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学过java的都知道：所有的对象都必须创建；或者说：使用对象之前必须先创建。而使用IoC之后，你就可以不再手动创建对象，而是从IoC容器中直接获取对象。&lt;/p&gt;
&lt;p&gt;就好像我们无需考虑对象的销毁回收一样，因为java垃圾回收机制帮助我们实现了这个过程；而IoC则是让我们无需考虑对象的创建过程，由IoC容器帮我们实现对象的创建、注入等过程。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://dijia478.cn/categories/Spring/"/>
    
      <category term="IoC" scheme="http://dijia478.cn/categories/Spring/IoC/"/>
    
    
      <category term="学习笔记" scheme="http://dijia478.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring-IoC" scheme="http://dijia478.cn/tags/Spring-IoC/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架学习笔记整理-概述</title>
    <link href="http://dijia478.cn/blog/2017/05/04/2017-05-04-Spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-%E6%A6%82%E8%BF%B0/"/>
    <id>http://dijia478.cn/blog/2017/05/04/2017-05-04-Spring框架学习笔记整理-概述/</id>
    <published>2017-05-04T14:43:33.000Z</published>
    <updated>2018-02-09T08:32:08.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Spring"><a href="#关于Spring" class="headerlink" title="关于Spring"></a>关于Spring</h2><p>Spring 是一个开源的Java／Java EE全功能栈的应用程序框架，他解决的是业务逻辑层和其他各层的松耦合问题，因此它将面向接口的编程思想贯穿整个系统应用。它的主要优势之一就是其分层架构，分层架构允许您选择使用哪一个组件，同时为 Java EE 应用程序开发提供集成的框架。<br><a id="more"></a></p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><img src="/blog/2017/05/04/2017-05-04-Spring框架学习笔记整理-概述/spring04.png" title="Spring特征"><h2 id="Sping架构"><a href="#Sping架构" class="headerlink" title="Sping架构"></a>Sping架构</h2><p>Spring框架是分模块存在，除了最核心的Spring Core Container(即Spring容器)是必要模块之外，其他模块都是可选，视需要而定。大约有20多个模块。</p><img src="/blog/2017/05/04/2017-05-04-Spring框架学习笔记整理-概述/spring01.png" title="Spring 3.2.17.RELEASE"><img src="/blog/2017/05/04/2017-05-04-Spring框架学习笔记整理-概述/spring02.png" title="Spring 4.2.7.RELEASE"><p>Spring3与Spring4是有区别的，4.0主要是对Java 8的新函数式语法进行支持，还有加强了对网络各种新技术比如http-streaming, websocket的更好的支持。</p><p>一般来说，Spring主要分为7个模块：</p><img src="/blog/2017/05/04/2017-05-04-Spring框架学习笔记整理-概述/spring03.png" title="Spring的7个模块"><img src="/blog/2017/05/04/2017-05-04-Spring框架学习笔记整理-概述/spring05.png" title="常用模块"><h2 id="Spring的主要jar包"><a href="#Spring的主要jar包" class="headerlink" title="Spring的主要jar包"></a>Spring的主要jar包</h2><img src="/blog/2017/05/04/2017-05-04-Spring框架学习笔记整理-概述/spring06.png"><h2 id="Spring的常用注解"><a href="#Spring的常用注解" class="headerlink" title="Spring的常用注解"></a>Spring的常用注解</h2><p>bean注入与装配的的方式有很多种，可以通过xml，getset方式，构造函数或者注解等。简单易用的方式就是使用Spring的注解了，Spring提供了大量的注解方式，让项目阅读和开发起来更加方便。</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><img src="/blog/2017/05/04/2017-05-04-Spring框架学习笔记整理-概述/spring07.png"><h3 id="装配注解比较"><a href="#装配注解比较" class="headerlink" title="装配注解比较"></a>装配注解比较</h3><img src="/blog/2017/05/04/2017-05-04-Spring框架学习笔记整理-概述/spring08.png"><h2 id="第三方框架集成"><a href="#第三方框架集成" class="headerlink" title="第三方框架集成"></a>第三方框架集成</h2><p>Spring框架的开发不是为了替代现有的优秀第三方框架，而是通过集成的方式把它们都连接起来。下面总结了一些常集成的优秀框架。</p><img src="/blog/2017/05/04/2017-05-04-Spring框架学习笔记整理-概述/spring09.png"><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本篇博客简单总结了下Spring是什么，没涉及到原理的东西。后面还会整理4篇笔记出来。分为ioc篇，mvc篇，aop篇和cache篇。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于Spring&quot;&gt;&lt;a href=&quot;#关于Spring&quot; class=&quot;headerlink&quot; title=&quot;关于Spring&quot;&gt;&lt;/a&gt;关于Spring&lt;/h2&gt;&lt;p&gt;Spring 是一个开源的Java／Java EE全功能栈的应用程序框架，他解决的是业务逻辑层和其他各层的松耦合问题，因此它将面向接口的编程思想贯穿整个系统应用。它的主要优势之一就是其分层架构，分层架构允许您选择使用哪一个组件，同时为 Java EE 应用程序开发提供集成的框架。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://dijia478.cn/categories/Spring/"/>
    
      <category term="概述" scheme="http://dijia478.cn/categories/Spring/%E6%A6%82%E8%BF%B0/"/>
    
    
      <category term="学习笔记" scheme="http://dijia478.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring概述" scheme="http://dijia478.cn/tags/Spring%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis框架学习笔记整理-下篇</title>
    <link href="http://dijia478.cn/blog/2017/04/21/2017-04-21-MyBatis%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-%E4%B8%8B%E7%AF%87/"/>
    <id>http://dijia478.cn/blog/2017/04/21/2017-04-21-MyBatis框架学习笔记整理-下篇/</id>
    <published>2017-04-21T13:27:01.000Z</published>
    <updated>2018-02-09T08:32:29.794Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客写了MyBatis的基本原理和配置文件的基本使用，这一篇写MyBatis的使用，主要包括与Sping集成、动态sql、还有mapper的xml文件一下复杂配置等。值得注意的是，思维导图”resultMap子元素”中讲解的时候可能讲得不是很清楚，应该需要大量的代码来讲解使用方法，思维导图恰恰不适合这种表现方法。所以需要根据给出的链接去读一些好的博客文章，这样才能更好理解。毕竟是技术性的东西，实践出真理。<br><a id="more"></a></p><h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><p>MyBatis 是支持普通 SQL查询，存储过程和高级映射的优秀持久层框架。MyBatis 消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。MyBatis 使用简单的 XML或注解用于配置和原始映射，将接口和 Java 的POJOs（Plain Old Java Objects，普通的 Java对象）映射成数据库中的记录。</p><h2 id="MyBatis的优缺点"><a href="#MyBatis的优缺点" class="headerlink" title="MyBatis的优缺点"></a>MyBatis的优缺点</h2><img src="/blog/2017/04/21/2017-04-21-MyBatis框架学习笔记整理-下篇/mybatis01.png"><h2 id="与Spring整合"><a href="#与Spring整合" class="headerlink" title="与Spring整合"></a>与Spring整合</h2><img src="/blog/2017/04/21/2017-04-21-MyBatis框架学习笔记整理-下篇/mybatis02.png"><h2 id="mapper的xml文件"><a href="#mapper的xml文件" class="headerlink" title="mapper的xml文件"></a>mapper的xml文件</h2><blockquote><p><a href="http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html#insert_update_and_delete" target="_blank" rel="noopener">官方参考文档</a></p></blockquote><img src="/blog/2017/04/21/2017-04-21-MyBatis框架学习笔记整理-下篇/mybatis03.png"><img src="/blog/2017/04/21/2017-04-21-MyBatis框架学习笔记整理-下篇/mybatis04.png"><img src="/blog/2017/04/21/2017-04-21-MyBatis框架学习笔记整理-下篇/mybatis05.png"><img src="/blog/2017/04/21/2017-04-21-MyBatis框架学习笔记整理-下篇/mybatis06.png"><h3 id="属性值可以用于包含的refid属性或者包含的字句里面的属性值"><a href="#属性值可以用于包含的refid属性或者包含的字句里面的属性值" class="headerlink" title="属性值可以用于包含的refid属性或者包含的字句里面的属性值"></a>属性值可以用于包含的refid属性或者包含的字句里面的属性值</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"sometable"</span>&gt;</span></span><br><span class="line">  $&#123;prefix&#125;Table</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"someinclude"</span>&gt;</span></span><br><span class="line">  from</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"$&#123;include_target&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    field1, field2, field3</span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"someinclude"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"Some"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"include_target"</span> <span class="attr">value</span>=<span class="string">"sometable"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="高级结果映射"><a href="#高级结果映射" class="headerlink" title="高级结果映射"></a>高级结果映射</h3><p>MyBatis 创建的一个想法:数据库不用永远是你想要的或需要它们是什么样的。而我们 最喜欢的数据库最好是第三范式或 BCNF 模式,但它们有时不是。如果可能有一个单独的 数据库映射,所有应用程序都可以使用它,这是非常好的,但有时也不是。结果映射就是 MyBatis 提供处理这个问题的答案。</p><p>比如,我们如何映射下面这个语句?</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Very Complex Statement --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogDetails"</span> <span class="attr">resultMap</span>=<span class="string">"detailedBlogResultMap"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">       B.id as blog_id,</span><br><span class="line">       B.title as blog_title,</span><br><span class="line">       B.author_id as blog_author_id,</span><br><span class="line">       A.id as author_id,</span><br><span class="line">       A.username as author_username,</span><br><span class="line">       A.password as author_password,</span><br><span class="line">       A.email as author_email,</span><br><span class="line">       A.bio as author_bio,</span><br><span class="line">       A.favourite_section as author_favourite_section,</span><br><span class="line">       P.id as post_id,</span><br><span class="line">       P.blog_id as post_blog_id,</span><br><span class="line">       P.author_id as post_author_id,</span><br><span class="line">       P.created_on as post_created_on,</span><br><span class="line">       P.section as post_section,</span><br><span class="line">       P.subject as post_subject,</span><br><span class="line">       P.draft as draft,</span><br><span class="line">       P.body as post_body,</span><br><span class="line">       C.id as comment_id,</span><br><span class="line">       C.post_id as comment_post_id,</span><br><span class="line">       C.name as comment_name,</span><br><span class="line">       C.comment as comment_text,</span><br><span class="line">       T.id as tag_id,</span><br><span class="line">       T.name as tag_name</span><br><span class="line">  from Blog B</span><br><span class="line">       left outer join Author A on B.author_id = A.id</span><br><span class="line">       left outer join Post P on B.id = P.blog_id</span><br><span class="line">       left outer join Comment C on P.id = C.post_id</span><br><span class="line">       left outer join Post_Tag PT on PT.post_id = P.id</span><br><span class="line">       left outer join Tag T on PT.tag_id = T.id</span><br><span class="line">  where B.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可能想把它映射到一个智能的对象模型,包含一个作者写的博客,有很多的博文,每 篇博文有零条或多条的评论和标签。 下面是一个完整的复杂结果映射例子 (假设作者, 博客, 博文, 评论和标签都是类型的别名) 我们来看看, 。 但是不用紧张, 我们会一步一步来说明。 当天最初它看起来令人生畏,但实际上非常简单。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Very Complex Result Map --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"detailedBlogResultMap"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">idArg</span> <span class="attr">column</span>=<span class="string">"blog_id"</span> <span class="attr">javaType</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"blog_title"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"author_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"author_username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"author_password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"author_email"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bio"</span> <span class="attr">column</span>=<span class="string">"author_bio"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"favouriteSection"</span> <span class="attr">column</span>=<span class="string">"author_favourite_section"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"posts"</span> <span class="attr">ofType</span>=<span class="string">"Post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"post_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"subject"</span> <span class="attr">column</span>=<span class="string">"post_subject"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"comments"</span> <span class="attr">ofType</span>=<span class="string">"Comment"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"comment_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"tags"</span> <span class="attr">ofType</span>=<span class="string">"Tag"</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tag_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">"int"</span> <span class="attr">column</span>=<span class="string">"draft"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">resultType</span>=<span class="string">"DraftPost"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="resultMap子元素概念视图"><a href="#resultMap子元素概念视图" class="headerlink" title="resultMap子元素概念视图"></a>resultMap子元素概念视图</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Very Complex Result Map --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"detailedBlogResultMap"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">idArg</span> <span class="attr">column</span>=<span class="string">"blog_id"</span> <span class="attr">javaType</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"blog_title"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"author_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"author_username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"author_password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"author_email"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bio"</span> <span class="attr">column</span>=<span class="string">"author_bio"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"favouriteSection"</span> <span class="attr">column</span>=<span class="string">"author_favourite_section"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"posts"</span> <span class="attr">ofType</span>=<span class="string">"Post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"post_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"subject"</span> <span class="attr">column</span>=<span class="string">"post_subject"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"comments"</span> <span class="attr">ofType</span>=<span class="string">"Comment"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"comment_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"tags"</span> <span class="attr">ofType</span>=<span class="string">"Tag"</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tag_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">"int"</span> <span class="attr">column</span>=<span class="string">"draft"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">resultType</span>=<span class="string">"DraftPost"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="resultMap子元素"><a href="#resultMap子元素" class="headerlink" title="resultMap子元素"></a>resultMap子元素</h2><blockquote><p><a href="http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html#Auto-mapping" target="_blank" rel="noopener">官方参考文档</a></p></blockquote><img src="/blog/2017/04/21/2017-04-21-MyBatis框架学习笔记整理-下篇/mybatis07.png"><h3 id="关联的嵌套查询"><a href="#关联的嵌套查询" class="headerlink" title="关联的嵌套查询"></a>关联的嵌套查询</h3><p>我们有两个查询语句:一个来加载博客,另外一个来加载作者,而且博客的结果映射描 述了“selectAuthor”语句应该被用来加载它的 author 属性。</p><p>其他所有的属性将会被自动加载,假设它们的列和属性名相匹配。</p><p>这种方式很简单, 但是对于大型数据集合和列表将不会表现很好。 问题就是我们熟知的 “N+1 查询问题”。概括地讲,N+1 查询问题可以是这样引起的:</p><p>你执行了一个单独的 SQL 语句来获取结果列表(就是“+1”)。<br>对返回的每条记录,你执行了一个查询语句来为每个加载细节(就是“N”)。<br>这个问题会导致成百上千的 SQL 语句被执行。这通常不是期望的。</p><p>MyBatis 能延迟加载这样的查询就是一个好处,因此你可以分散这些语句同时运行的消 耗。然而,如果你加载一个列表,之后迅速迭代来访问嵌套的数据,你会调用所有的延迟加 载,这样的行为可能是很糟糕的。</p><h2 id="元素集合collection"><a href="#元素集合collection" class="headerlink" title="元素集合collection"></a>元素集合collection</h2><img src="/blog/2017/04/21/2017-04-21-MyBatis框架学习笔记整理-下篇/mybatis08.png"><h2 id="鉴别器discriminator"><a href="#鉴别器discriminator" class="headerlink" title="鉴别器discriminator"></a>鉴别器discriminator</h2><img src="/blog/2017/04/21/2017-04-21-MyBatis框架学习笔记整理-下篇/mybatis09.png"><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"vehicleResult"</span> <span class="attr">type</span>=<span class="string">"Vehicle"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"vin"</span> <span class="attr">column</span>=<span class="string">"vin"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"year"</span> <span class="attr">column</span>=<span class="string">"year"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"make"</span> <span class="attr">column</span>=<span class="string">"make"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"model"</span> <span class="attr">column</span>=<span class="string">"model"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"color"</span> <span class="attr">column</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">"int"</span> <span class="attr">column</span>=<span class="string">"vehicle_type"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">resultType</span>=<span class="string">"carResult"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"doorCount"</span> <span class="attr">column</span>=<span class="string">"door_count"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">resultType</span>=<span class="string">"truckResult"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"boxSize"</span> <span class="attr">column</span>=<span class="string">"box_size"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"extendedCab"</span> <span class="attr">column</span>=<span class="string">"extended_cab"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"3"</span> <span class="attr">resultType</span>=<span class="string">"vanResult"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"powerSlidingDoor"</span> <span class="attr">column</span>=<span class="string">"power_sliding_door"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"4"</span> <span class="attr">resultType</span>=<span class="string">"suvResult"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"allWheelDrive"</span> <span class="attr">column</span>=<span class="string">"all_wheel_drive"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h2><img src="/blog/2017/04/21/2017-04-21-MyBatis框架学习笔记整理-下篇/mybatis10.png"><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{}和${}的区别"></a>#{}和${}的区别</h2><img src="/blog/2017/04/21/2017-04-21-MyBatis框架学习笔记整理-下篇/mybatis11.png">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇博客写了MyBatis的基本原理和配置文件的基本使用，这一篇写MyBatis的使用，主要包括与Sping集成、动态sql、还有mapper的xml文件一下复杂配置等。值得注意的是，思维导图”resultMap子元素”中讲解的时候可能讲得不是很清楚，应该需要大量的代码来讲解使用方法，思维导图恰恰不适合这种表现方法。所以需要根据给出的链接去读一些好的博客文章，这样才能更好理解。毕竟是技术性的东西，实践出真理。&lt;br&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://dijia478.cn/categories/MyBatis/"/>
    
    
      <category term="学习笔记" scheme="http://dijia478.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="MyBatis" scheme="http://dijia478.cn/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis框架学习笔记整理-上篇</title>
    <link href="http://dijia478.cn/blog/2017/04/16/2017-04-16-MyBatis%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-%E4%B8%8A%E7%AF%87/"/>
    <id>http://dijia478.cn/blog/2017/04/16/2017-04-16-MyBatis框架学习笔记整理-上篇/</id>
    <published>2017-04-16T02:48:32.000Z</published>
    <updated>2018-02-09T08:32:48.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>与Hibernate相比，我无疑更喜欢MyBatis，就因为我觉得它真的好用，哈哈。它简单上手和掌握；sql语句和代码分开，方便统一管理和优化；当然缺点也有：sql工作量很大，尤其是字段多、关联表多时，更是如此。而且sql依赖于数据库，导致数据库移植性差。</p><p>选用一个框架之前最好先了解它的优缺点，对项目最好用，效率最高的才是一个你最好的选择。本次决定使用XMind思维导图来总结，会更为直观。<strong>如果图片看不清，可以右键在新标签页打开或者保存到本地</strong>。一共分为上下两篇来总结MyBatis的相关知识点。本篇为上篇，主要写一些MyBatis的原理和配置文件的基本实用，后一篇会写MyBatis的使用方法。<br><a id="more"></a></p><h2 id="MyBaits简介"><a href="#MyBaits简介" class="headerlink" title="MyBaits简介"></a>MyBaits简介</h2><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p><blockquote><p><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">官方参考文档</a></p></blockquote><img src="/blog/2017/04/16/2017-04-16-MyBatis框架学习笔记整理-上篇/mybatis01.png"><h2 id="与Hibernate的对比"><a href="#与Hibernate的对比" class="headerlink" title="与Hibernate的对比"></a>与Hibernate的对比</h2><img src="/blog/2017/04/16/2017-04-16-MyBatis框架学习笔记整理-上篇/mybatis02.png"><h3 id="两者的缓存机制异同"><a href="#两者的缓存机制异同" class="headerlink" title="两者的缓存机制异同"></a>两者的缓存机制异同</h3><ul><li>相同点</li></ul><p>Hibernate和MyBatis的二级缓存除了采用系统默认的缓存机制外，都可以通过实现你自己的缓存或为其他第三方缓存方案，创建适配器来完全覆盖缓存行为。</p><ul><li>不同点</li></ul><p>Hibernate的二级缓存配置在SessionFactory生成的配置文件中进行详细配置，然后再在具体的表-对象映射中配置是那种缓存。</p><p>MyBatis的二级缓存配置都是在每个具体的表-对象映射中进行详细配置，这样针对不同的表可以自定义不同的缓存机制。并且MyBatis可以在命名空间中共享相同的缓存配置和实例，通过Cache-ref来实现。</p><ul><li>两者比较</li></ul><p>因为Hibernate对查询对象有着良好的管理机制，用户无需关心SQL。所以在使用二级缓存时如果出现脏数据，系统会报出错误并提示。</p><p>而MyBatis在这一方面，使用二级缓存时需要特别小心。如果不能完全确定数据更新操作的波及范围，避免Cache的盲目使用。否则，脏数据的出现会给系统的正常运行带来很大的隐患。</p><h3 id="Hibernate的内置和外置缓存"><a href="#Hibernate的内置和外置缓存" class="headerlink" title="Hibernate的内置和外置缓存"></a>Hibernate的内置和外置缓存</h3><p>内置缓存中存放的是SessionFactory对象的一些集合属性包含的数据(映射元素据及预定SQL语句等),对于应用程序来说,它是只读的。</p><p>外置缓存中存放的是数据库数据的副本,其作用和一级缓存类似.二级缓存除了以内存作为存储介质外,还可以选用硬盘等外部存储设备。二级缓存称为进程级缓存或SessionFactory级缓存，它可以被所有session共享，它的生命周期伴随着SessionFactory的生命周期存在和消亡。</p><h2 id="MyBatis的几个关键类"><a href="#MyBatis的几个关键类" class="headerlink" title="MyBatis的几个关键类"></a>MyBatis的几个关键类</h2><img src="/blog/2017/04/16/2017-04-16-MyBatis框架学习笔记整理-上篇/mybatis03.png"><h2 id="MyBatis的执行浅析"><a href="#MyBatis的执行浅析" class="headerlink" title="MyBatis的执行浅析"></a>MyBatis的执行浅析</h2><blockquote><p>参考文章： <a href="https://www.jianshu.com/p/ec40a82cae28" target="_blank" rel="noopener">MyBatis原理深入解析</a></p></blockquote><img src="/blog/2017/04/16/2017-04-16-MyBatis框架学习笔记整理-上篇/mybatis04.png"><h2 id="MyBatis框架整体设计"><a href="#MyBatis框架整体设计" class="headerlink" title="MyBatis框架整体设计"></a>MyBatis框架整体设计</h2><img src="/blog/2017/04/16/2017-04-16-MyBatis框架学习笔记整理-上篇/mybatis05.png" title="框架图"><img src="/blog/2017/04/16/2017-04-16-MyBatis框架学习笔记整理-上篇/mybatis06.png" title="部件关系，层次结构图"><h2 id="MyBatis初始化与执行sql过程"><a href="#MyBatis初始化与执行sql过程" class="headerlink" title="MyBatis初始化与执行sql过程"></a>MyBatis初始化与执行sql过程</h2><img src="/blog/2017/04/16/2017-04-16-MyBatis框架学习笔记整理-上篇/mybatis07.png"><h2 id="MyBatis源码的几个主要部件"><a href="#MyBatis源码的几个主要部件" class="headerlink" title="MyBatis源码的几个主要部件"></a>MyBatis源码的几个主要部件</h2><img src="/blog/2017/04/16/2017-04-16-MyBatis框架学习笔记整理-上篇/mybatis08.png"><h2 id="XML-映射配置文件"><a href="#XML-映射配置文件" class="headerlink" title="XML 映射配置文件"></a>XML 映射配置文件</h2><blockquote><p><a href="http://www.mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">官方参考文档</a></p></blockquote><img src="/blog/2017/04/16/2017-04-16-MyBatis框架学习笔记整理-上篇/mybatis09.png"><img src="/blog/2017/04/16/2017-04-16-MyBatis框架学习笔记整理-上篇/mybatis10.png"><img src="/blog/2017/04/16/2017-04-16-MyBatis框架学习笔记整理-上篇/mybatis11.png"><h3 id="自定义类型处理器"><a href="#自定义类型处理器" class="headerlink" title="自定义类型处理器"></a>自定义类型处理器</h3><p>使用这个的类型处理器将会覆盖已经存在的处理 Java 的 String 类型属性和 VARCHAR 参数及结果的类型处理器。 要注意 MyBatis 不会窥探数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明那是 VARCHAR 类型的字段， 以使其能够绑定到正确的类型处理器上。 这是因为：MyBatis 直到语句被执行才清楚数据类型。</p><p>通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：</p><p>在类型处理器的配置元素（typeHandler element）上增加一个 javaType 属性（比如：javaType=”String”）；<br>在类型处理器的类上（TypeHandler class）增加一个 @MappedTypes 注解来指定与其关联的 Java 类型列表。 如果在 javaType 属性中也同时指定，则注解方式将被忽略。<br>可以通过两种方式来指定被关联的 JDBC 类型：</p><ul><li>在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType=”VARCHAR”）；</li><li>在类型处理器的类上（TypeHandler class）增加一个 @MappedJdbcTypes 注解来指定与其关联的 JDBC 类型列表。 如果在 jdbcType 属性中也同时指定，则注解方式将被忽略。</li></ul><p>当决定在ResultMap中使用某一TypeHandler时，此时java类型是已知的（从结果类型中获得），但是JDBC类型是未知的。 因此Mybatis使用javaType=[TheJavaType], jdbcType=null的组合来选择一个TypeHandler。 这意味着使用@MappedJdbcTypes注解可以限制TypeHandler的范围，同时除非显示的设置，否则TypeHandler在ResultMap中将是无效的。 如果希望在ResultMap中使用TypeHandler，那么设置@MappedJdbcTypes注解的includeNullJdbcType=true即可。 然而从Mybatis 3.4.0开始，如果只有一个注册的TypeHandler来处理Java类型，那么它将是ResultMap使用Java类型时的默认值（即使没有includeNullJdbcType=true）。</p><p>最后，可以让 MyBatis 为你查找类型处理器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.mybatis.example"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意在使用自动检索（autodiscovery）功能的时候，只能通过注解方式来指定 JDBC 的类型。</p><p>你能创建一个泛型类型处理器，它可以处理多于一个类。为达到此目的， 需要增加一个接收该类作为参数的构造器，这样在构造一个类型处理器的时候 MyBatis 就会传入一个具体的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GenericTypeHandler.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTypeHandler</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">MyObject</span>&gt; <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;E&gt; type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenericTypeHandler</span><span class="params">(Class&lt;E&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Type argument cannot be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="处理枚举类型"><a href="#处理枚举类型" class="headerlink" title="处理枚举类型"></a>处理枚举类型</h3><p>若想映射枚举类型 Enum，则需要从 EnumTypeHandler 或者 EnumOrdinalTypeHandler 中选一个来使用。</p><p>比如说我们想存储取近似值时用到的舍入模式。默认情况下，MyBatis 会利用 EnumTypeHandler 来把 Enum 值转换成对应的名字。</p><p>注意 EnumTypeHandler 在某种意义上来说是比较特别的，其他的处理器只针对某个特定的类，而它不同，它会处理任意继承了 Enum 的类。<br>不过，我们可能不想存储名字，相反我们的 DBA 会坚持使用整形值代码。那也一样轻而易举： 在配置文件中把 EnumOrdinalTypeHandler 加到 typeHandlers 中即可， 这样每个 RoundingMode 将通过他们的序数值来映射成对应的整形。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"org.apache.ibatis.type.EnumOrdinalTypeHandler"</span> <span class="attr">javaType</span>=<span class="string">"java.math.RoundingMode"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是怎样能将同样的 Enum 既映射成字符串又映射成整形呢？</p><p>自动映射器（auto-mapper）会自动地选用 EnumOrdinalTypeHandler 来处理， 所以如果我们想用普通的 EnumTypeHandler，就非要为那些 SQL 语句显式地设置要用到的类型处理器不可。</p><h3 id="databaseIdProvider"><a href="#databaseIdProvider" class="headerlink" title="databaseIdProvider"></a>databaseIdProvider</h3><p>MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。 MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库 databaseId 属性的所有语句。 如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。 为支持多厂商特性只要像下面这样在 mybatis-config.xml 文件中加入 databaseIdProvider 即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 DB_VENDOR 会通过 DatabaseMetaData#getDatabaseProductName() 返回的字符串进行设置。 由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以最好通过设置属性别名来使其变短，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"DB2"</span> <span class="attr">value</span>=<span class="string">"db2"</span>/&gt;</span>        </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"oracle"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在有 properties 时，DB_VENDOR databaseIdProvider 的将被设置为第一个能匹配数据库产品名称的属性键对应的值，如果没有匹配的属性将会设置为 “null”。 在这个例子中，如果 getDatabaseProductName() 返回“Oracle (DataDirect)”，databaseId 将被设置为“oracle”。</p><p>你可以通过实现接口 org.apache.ibatis.mapping.DatabaseIdProvider 并在 mybatis-config.xml 中注册来构建自己的 DatabaseIdProvider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DatabaseIdProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties p)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getDatabaseId</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dataSource"><a href="#dataSource" class="headerlink" title="dataSource"></a>dataSource</h3><p>数据源（dataSource）</p><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p><p>许多 MyBatis 的应用程序将会按示例中的例子来配置数据源。然而它并不是必须的。要知道为了方便使用延迟加载，数据源才是必须的。<br>有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：</p><p>UNPOOLED– 这个数据源的实现只是每次被请求时打开和关闭连接。虽然一点慢，它对在及时可用连接方面没有性能要求的简单应用程序是一个很好的选择。 不同的数据库在这方面表现也是不一样的，所以对某些数据库来说使用连接池并不重要，这个配置也是理想的。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：</p><ul><li>driver – 这是 JDBC 驱动的 Java 类的完全限定名（并不是JDBC驱动中可能包含的数据源类）。</li><li>url – 这是数据库的 JDBC URL 地址。</li><li>username – 登录数据库的用户名。</li><li>password – 登录数据库的密码。</li><li>defaultTransactionIsolationLevel – 默认的连接事务隔离级别。</li></ul><p>作为可选项，你也可以传递属性给数据库驱动。要这样做，属性的前缀为“driver.”，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.encoding=UTF8</span><br></pre></td></tr></table></figure><p>这将通过DriverManager.getConnection(url,driverProperties)方法传递值为 UTF8 的 encoding 属性给数据库驱动。</p><p>POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这是一种使得并发 Web 应用快速响应请求的流行处理方式。</p><p>除了上述提到 UNPOOLED 下的属性外，会有更多属性用来配置 POOLED 的数据源：</p><blockquote><p>poolMaximumActiveConnections – 在任意时间可以存在的活动（也就是正在使用）连接数量，默认值：10<br>poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。<br>poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）<br>poolTimeToWait – 这是一个底层设置，如果获取连接花费的相当长的时间，它会给连接池打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静的失败），默认值：20000 毫秒（即 20 秒）。<br>poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否处在正常工作秩序中并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动失败时带有一个恰当的错误消息。<br>poolPingEnabled – 是否启用侦测查询。若开启，也必须使用一个可执行的 SQL 语句设置 poolPingQuery 属性（最好是一个非常快的 SQL），默认值：false。<br>poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的使用频度。这可以被设置成匹配具体的数据库连接超时时间，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。<br>JNDI– 这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。这种数据源配置只需要两个属性：</p><p>initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么 data_source 属性将会直接从 InitialContext 中寻找。<br>data_source – 这是引用数据源实例位置的上下文的路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。<br>和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给初始上下文。比如：</p><p>env.encoding=UTF8<br>这就会在初始上下文（InitialContext）实例化时往它的构造方法传递值为 UTF8 的 encoding 属性。</p></blockquote><p>通过需要实现接口 org.apache.ibatis.datasource.DataSourceFactory ， 也可使用任何第三方数据源，：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataSourceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties props)</span></span>;</span><br><span class="line">    <span class="function">DataSource <span class="title">getDataSource</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory 可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0DataSourceFactory</span> <span class="keyword">extends</span> <span class="title">UnpooledDataSourceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">C3P0DataSourceFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了令其工作，为每个需要 MyBatis 调用的 setter 方法中增加一个属性。下面是一个可以连接至 PostgreSQL 数据库的例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"org.myproject.C3P0DataSourceFactory"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"org.postgresql.Driver"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:postgresql:mydb"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"postgres"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;与Hibernate相比，我无疑更喜欢MyBatis，就因为我觉得它真的好用，哈哈。它简单上手和掌握；sql语句和代码分开，方便统一管理和优化；当然缺点也有：sql工作量很大，尤其是字段多、关联表多时，更是如此。而且sql依赖于数据库，导致数据库移植性差。&lt;/p&gt;
&lt;p&gt;选用一个框架之前最好先了解它的优缺点，对项目最好用，效率最高的才是一个你最好的选择。本次决定使用XMind思维导图来总结，会更为直观。&lt;strong&gt;如果图片看不清，可以右键在新标签页打开或者保存到本地&lt;/strong&gt;。一共分为上下两篇来总结MyBatis的相关知识点。本篇为上篇，主要写一些MyBatis的原理和配置文件的基本实用，后一篇会写MyBatis的使用方法。&lt;br&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://dijia478.cn/categories/MyBatis/"/>
    
    
      <category term="学习笔记" scheme="http://dijia478.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="MyBatis" scheme="http://dijia478.cn/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Redis在Linux上的部署和Jedis简单使用</title>
    <link href="http://dijia478.cn/blog/2017/03/18/2017-03-18-Redis%E5%9C%A8Linux%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8CJedis%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://dijia478.cn/blog/2017/03/18/2017-03-18-Redis在Linux上的部署和Jedis简单使用/</id>
    <published>2017-03-18T12:51:26.000Z</published>
    <updated>2018-04-18T16:24:31.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、redis的安装"><a href="#一、redis的安装" class="headerlink" title="一、redis的安装"></a>一、redis的安装</h2><p>这里演示的版本是Redis4.0，Linux系统是CentOS6.7，Jdk1.7，Jedis2.8</p><p>这是官方文档介绍的安装方式</p><p>下载，解压，编译:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-4.0.0.tar.gz</span><br><span class="line">$ tar xzf redis-4.0.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-4.0.0</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><a id="more"></a><p>二进制文件是编译完成后在src目录下，通过下面的命令启动Redis服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-server</span><br></pre></td></tr></table></figure><p>你可以使用内置的客户端命令redis-cli进行使用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-cli</span><br><span class="line">redis&gt; <span class="built_in">set</span> foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line"><span class="string">"bar"</span></span><br></pre></td></tr></table></figure><p>本人不建议直接使用源码文件中的服务，make编译完成后，可以安装到指定目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make PREFIX=/usr/<span class="built_in">local</span>/redis install</span><br></pre></td></tr></table></figure><p>现在去刚刚tar包解压出来的源码目录中，拷贝一个redis.conf配置文件，放到/usr/local/redis/bin/目录下，以后在这个目录下使用就好了。</p><img src="/blog/2017/03/18/2017-03-18-Redis在Linux上的部署和Jedis简单使用/redis05.png"><p>启动服务端（暂时不使用自己刚才复制过来的redis.conf配置文件，配置文件是可以指定的）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server</span><br></pre></td></tr></table></figure><p>复制一个会话窗口，启动客户端（暂时不设置ip，端口号和密码）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli</span><br></pre></td></tr></table></figure><p>测试下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line"><span class="comment"># 客户端启动成功</span></span><br></pre></td></tr></table></figure><h2 id="二、Java程序中jedis操作redis"><a href="#二、Java程序中jedis操作redis" class="headerlink" title="二、Java程序中jedis操作redis"></a>二、Java程序中jedis操作redis</h2><p>上面的方式只是一种小练习，我们现在通过Java程序用jedis来操作Linux服务器上的redis。</p><p>用maven来引入jedis：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">　　 <span class="comment">// 服务器ip，redis默认端口号</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.133.128"</span>, <span class="number">6379</span>);</span><br><span class="line">    jedis.set(<span class="string">"key01"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    jedis.set(<span class="string">"key02"</span>, <span class="string">"lisi"</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">"key01"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意上面的代码是有问题的！</strong></p><h2 id="三、redis配置文件"><a href="#三、redis配置文件" class="headerlink" title="三、redis配置文件"></a>三、redis配置文件</h2><p>上面的代码运行后，会报错</p><p><code>redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused: connect</code></p><p>连接超被拒绝了，这是因为，redis的访问ip默认是127.0.0.1</p><p>你需要在自己拷贝的redis.conf配置文件中修改：</p><img src="/blog/2017/03/18/2017-03-18-Redis在Linux上的部署和Jedis简单使用/redis01.png"><p>把绑定的主机ip添加进去，之后启动redis服务的时候，需要手动加载配置文件</p><p>我的配置文件放在了和server服务的同一个目录里，所以启动服务时输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server redis.conf</span><br></pre></td></tr></table></figure><p>注意啊：如果不输入后面的配置文件目录，那么该配置文件不起作用，会提示说启动默认的配置文件。</p><p>之后再次运行Java代码</p><p>又报错！！</p><p><code>redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command &#39;CONFIG SET protected-mode no&#39; from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to &#39;no&#39;, and then restarting the server. 3) If you started the server manually just for testing, restart it with the &#39;--protected-mode no&#39; option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.</code></p><p>这错报的好长。。</p><p>好心的博主帮你谷歌翻译了一下。</p><p>简单来说呢？就是给你提供了几个解决方案</p><p>1）只需禁用保护模式，即可通过从同一主机连接到Redis，从回送接口发送命令“CONFIG SET protected-mode no”正在运行，但是如果您这样做，请勿使用互联网公开访问互联网。使用CONFIG REWRITE使此更改永久。</p><p>2）或者，您可以通过编辑Redis配置文件并将protected mode选项设置为“no”来禁用保护模式，然后重新启动服务器。</p><p>3）如果您只是为了测试而手动启动服务器，请使用“ –protected-mode no”选项重新启动服务器。</p><p>4）设置绑定地址或认证密码。</p><p>这是redis4.0版本的新特性，redis3不会报错。</p><p>在这里我选择设置redis密码，同样打开redis.conf配置文件，设置密码为123456，保存退出</p><img src="/blog/2017/03/18/2017-03-18-Redis在Linux上的部署和Jedis简单使用/redis02.png"><p>然后启动服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server redis.conf</span><br></pre></td></tr></table></figure><p>以后如果你要想在Linux里用命令打开redis客户端，就需要输入一些参数才行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -h 192.168.133.128 -p 6379 -a 123456</span><br></pre></td></tr></table></figure><p>很显然，-h是redis服务绑定的主机ip，-p是redis服务的端口号，-a是redis服务的密码，都可以在redis.conf里更改的</p><p>然后就好了</p><img src="/blog/2017/03/18/2017-03-18-Redis在Linux上的部署和Jedis简单使用/redis03.png"><p>这个时候，Java代码中的问题还没解决完，运行代码还会报错的，没有访问权限</p><p><code>redis.clients.jedis.exceptions.JedisDataException: NOAUTH Authentication required.</code></p><p>你还需要在Java代码中增加一条密码设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 服务器ip，redis默认端口号</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.133.128"</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="comment">// redis访问密码</span></span><br><span class="line">    jedis.auth(<span class="string">"123456"</span>);</span><br><span class="line">    jedis.set(<span class="string">"key01"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    jedis.set(<span class="string">"key02"</span>, <span class="string">"lisi"</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">"key01"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，运行正常</p><img src="/blog/2017/03/18/2017-03-18-Redis在Linux上的部署和Jedis简单使用/redis04.png"><h2 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h2><p>分享一个redis详细学习教程的网址：</p><p><a href="http://www.runoob.com/redis/redis-intro.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-intro.html</a></p><p>redis.conf 配置项说明如下：</p><p>1.Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程，可以后台启动，用ps -ef | grep redis查看redis进程</p><p><strong>daemonize no</strong></p><p>2.当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</p><p><strong>pidfile /var/run/redis.pid</strong></p><p>3.指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</p><p><strong>port 6379</strong></p><p>4.绑定的主机地址</p><p><strong>bind 127.0.0.1</strong></p><p>5.当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</p><p><strong>timeout 300</strong></p><p>6.指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</p><p><strong>loglevel verbose</strong></p><p>7.日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</p><p><strong>logfile stdout</strong></p><p>8.设置数据库的数量，默认数据库为0，可以使用SELECT \<dbid>命令在连接上指定数据库id</dbid></p><p><strong>databases 16</strong></p><p>9.指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</p><p><strong>save \<seconds> \<changes></changes></seconds></strong></p><p>Redis默认配置文件中提供了三个条件：</p><p><strong>save 900 1</strong></p><p><strong>save 300 10</strong></p><p><strong>save 60 10000</strong></p><p>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</p><p>10.指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</p><p><strong>rdbcompression yes</strong></p><p>11.指定本地数据库文件名，默认值为dump.rdb</p><p><strong>dbfilename dump.rdb</strong></p><p>12.指定本地数据库存放目录</p><p><strong>dir ./</strong></p><p>13.设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</p><p><strong>slaveof \<masterip> \<masterport></masterport></masterip></strong></p><p>14.当master服务设置了密码保护时，slav服务连接master的密码</p><p><strong>masterauth <master-password></master-password></strong></p><p>15.设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH \<password>命令提供密码，默认关闭</password></p><p><strong>requirepass foobared</strong></p><p>16.设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p><p><strong>maxclients 128</strong></p><p>17.指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</p><p><strong>maxmemory \<bytes></bytes></strong></p><p>18.指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</p><p><strong>appendonly no</strong></p><p>19.指定更新日志文件名，默认为appendonly.aof</p><p><strong>appendfilename appendonly.aof</strong></p><p>20.指定更新日志条件，共有3个可选值： </p><p><strong>no</strong>：表示等操作系统进行数据缓存同步到磁盘（快）<br><strong>always</strong>：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<br><strong>everysec</strong>：表示每秒同步一次（折衷，默认值）</p><p><strong>appendfsync everysec</strong></p><p>21.指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</p><p> <strong>vm-enabled no</strong></p><p>22.虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</p><p> <strong>vm-swap-file /tmp/redis.swap</strong></p><p>23.将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</p><p> <strong>vm-max-memory 0</strong></p><p>24.Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</p><p> <strong>vm-page-size 32</strong></p><p>25.设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，在磁盘上每8个pages将消耗1byte的内存。</p><p> <strong>vm-pages 134217728</strong></p><p>26.设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</p><p> <strong>vm-max-threads 4</strong></p><p>27.设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</p><p><strong>glueoutputbuf yes</strong></p><p>28.指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</p><p><strong>hash-max-zipmap-entries 64</strong></p><p><strong>hash-max-zipmap-value 512</strong></p><p>29.指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</p><p><strong>activerehashing yes</strong></p><p>30.指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</p><p><strong>include /path/to/local.conf</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、redis的安装&quot;&gt;&lt;a href=&quot;#一、redis的安装&quot; class=&quot;headerlink&quot; title=&quot;一、redis的安装&quot;&gt;&lt;/a&gt;一、redis的安装&lt;/h2&gt;&lt;p&gt;这里演示的版本是Redis4.0，Linux系统是CentOS6.7，Jdk1.7，Jedis2.8&lt;/p&gt;
&lt;p&gt;这是官方文档介绍的安装方式&lt;/p&gt;
&lt;p&gt;下载，解压，编译:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget http://download.redis.io/releases/redis-4.0.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ tar xzf redis-4.0.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; redis-4.0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ make&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://dijia478.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://dijia478.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习笔记</title>
    <link href="http://dijia478.cn/blog/2017/01/10/2017-01-10-Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://dijia478.cn/blog/2017/01/10/2017-01-10-Nginx学习笔记/</id>
    <published>2017-01-10T03:08:49.000Z</published>
    <updated>2018-02-15T02:22:12.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nginx是一款轻量级的Web服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，访问静态资源速度快，在互联网项目中广泛应用。</p><img src="/blog/2017/01/10/2017-01-10-Nginx学习笔记/nginx01.png" title="架构图"><p>上图基本上说明了当下流行的技术架构，其中Nginx有点入口网关的味道。<br><a id="more"></a></p><h2 id="反向代理服务器"><a href="#反向代理服务器" class="headerlink" title="反向代理服务器"></a>反向代理服务器</h2><p>经常听人说到一些术语，如反向代理，那么什么是反向代理，什么又是正向代理呢？</p><img src="/blog/2017/01/10/2017-01-10-Nginx学习笔记/nginx02.png" title="正向代理示意图"><p>由于防火墙的原因，我们并不能直接访问谷歌，那么我们可以借助VPN来实现，这就是一个简单的正向代理的例子。这里你能够发现，正向代理“代理”的是客户端，而且客户端是知道目标的，而目标是不知道客户端是通过VPN访问的。</p><img src="/blog/2017/01/10/2017-01-10-Nginx学习笔记/nginx03.png" title="反向代理示意图"><p>当我们在外网访问百度的时候，其实会进行一个转发，代理到内网去，这就是所谓的反向代理，即反向代理“代理”的是服务器端，而且这一个过程对于客户端而言是透明的。</p><h2 id="Nginx的Master-Worker模式"><a href="#Nginx的Master-Worker模式" class="headerlink" title="Nginx的Master-Worker模式"></a>Nginx的Master-Worker模式</h2><img src="/blog/2017/01/10/2017-01-10-Nginx学习笔记/nginx04.png" title="nginx进程"><p>启动Nginx后，其实就是在80端口启动了Socket服务进行监听，如图所示，Nginx涉及Master进程和Worker进程。</p><img src="/blog/2017/01/10/2017-01-10-Nginx学习笔记/nginx05.png" title="Master-Worker模式"><img src="/blog/2017/01/10/2017-01-10-Nginx学习笔记/nginx06.png" title="nginx.conf"><h3 id="Master进程的作用是？"><a href="#Master进程的作用是？" class="headerlink" title="Master进程的作用是？"></a>Master进程的作用是？</h3><p>读取并验证配置文件nginx.conf；管理worker进程；</p><h3 id="Worker进程的作用是？"><a href="#Worker进程的作用是？" class="headerlink" title="Worker进程的作用是？"></a>Worker进程的作用是？</h3><p>每一个Worker进程都维护一个线程（避免线程切换），处理连接和请求；注意Worker进程的个数由配置文件决定，一般和CPU个数相关（有利于进程切换），配置几个就有几个Worker进程。</p><h3 id="Nginx如何做到热部署？"><a href="#Nginx如何做到热部署？" class="headerlink" title="Nginx如何做到热部署？"></a>Nginx如何做到热部署？</h3><p>所谓热部署，就是配置文件nginx.conf修改后，不需要stop Nginx，不需要中断请求，就能让配置文件生效！（nginx -s reload 重新加载/nginx -t检查配置/nginx -s stop强行停止）<br>通过上文我们已经知道worker进程负责处理具体的请求，那么如果想达到热部署的效果，可以想象：</p><ul><li>方案一：<br><strong>修改配置文件nginx.conf后，主进程master负责推送给woker进程更新配置信息，woker进程收到信息后，更新进程内部的线程信息。（有点valatile的味道）</strong></li><li>方案二：<br><strong>修改配置文件nginx.conf后，重新生成新的worker进程，当然会以新的配置进行处理请求，而且新的请求必须都交给新的worker进程，至于老的worker进程，等把那些以前的请求处理完毕后，kill掉即可。</strong></li></ul><p>Nginx采用的就是方案二来达到热部署的！</p><h3 id="Nginx如何做到高并发下的高效处理？"><a href="#Nginx如何做到高并发下的高效处理？" class="headerlink" title="Nginx如何做到高并发下的高效处理？"></a>Nginx如何做到高并发下的高效处理？</h3><p>上文已经提及Nginx的worker进程个数与CPU绑定、worker进程内部包含一个线程高效回环处理请求，这的确有助于效率，但这是不够的。作为专业的程序员，我们可以开一下脑洞：BIO/NIO/AIO、异步/同步、阻塞/非阻塞…</p><p>要同时处理那么多的请求，要知道，有的请求需要发生IO，可能需要很长时间，如果等着它，就会拖慢worker的处理速度。</p><p><strong>Nginx采用了Linux的epoll模型，epoll模型基于事件驱动机制，它可以监控多个事件是否准备完毕，如果OK，那么放入epoll队列中，这个过程是异步的。worker只需要从epoll队列循环处理即可</strong></p><h3 id="Nginx挂了怎么办？"><a href="#Nginx挂了怎么办？" class="headerlink" title="Nginx挂了怎么办？"></a>Nginx挂了怎么办？</h3><p>Nginx既然作为入口网关，很重要，如果出现单点问题，显然是不可接受的。</p><p>答案是：<strong>Keepalived+Nginx实现高可用。</strong></p><p>Keepalived是一个高可用解决方案，主要是用来防止服务器单点发生故障，可以通过和Nginx配合来实现Web服务的高可用。（其实，Keepalived不仅仅可以和Nginx配合，还可以和很多其他服务配合）</p><p>Keepalived+Nginx实现高可用的思路：<br>第一：请求不要直接打到Nginx上，应该先通过Keepalived（这就是所谓虚拟IP，VIP）<br>第二：Keepalived应该能监控Nginx的生命状态（提供一个用户自定义的脚本，定期检查Nginx进程状态，进行权重变化,，从而实现Nginx故障切换）</p><img src="/blog/2017/01/10/2017-01-10-Nginx学习笔记/nginx07.png" title="Keepalived+Nginx"><h2 id="我们的主战场：nginx-conf"><a href="#我们的主战场：nginx-conf" class="headerlink" title="我们的主战场：nginx.conf"></a>我们的主战场：nginx.conf</h2><p>很多时候，在开发、测试环境下，我们都得自己去配置Nginx，就是去配置nginx.conf。</p><p>nginx.conf是典型的分段配置文件，下面我们来分析下。</p><h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><img src="/blog/2017/01/10/2017-01-10-Nginx学习笔记/nginx08.png" title="http的server段"><p>其实这是把Nginx作为web server来处理静态资源。</p><p>第一：location可以进行正则匹配，应该注意正则的几种形式以及优先级。从高到低分别为：确切的名字、最长的以*起始的通配符名字、最长的以*结束的通配符名字、第一个匹配的正则表达式名字</p><p>第二：Nginx能够提高速度的其中一个特性就是：动静分离，就是把静态资源放到Nginx上，由Nginx管理，动态请求转发给后端。</p><p><strong>第三：我们可以在Nginx下把静态资源、日志文件归属到不同域名下（也即是目录），这样方便管理维护。</strong></p><p><strong>第四：Nginx可以进行IP访问控制，有些电商平台，就可以在Nginx这一层，做一下处理，内置一个黑名单模块，那么就不必等请求通过Nginx达到后端在进行拦截，而是直接在Nginx这一层就处理掉。</strong></p><h3 id="反向代理【proxy-pass】"><a href="#反向代理【proxy-pass】" class="headerlink" title="反向代理【proxy_pass】"></a>反向代理【proxy_pass】</h3><p>所谓反向代理，很简单，其实就是在location这一段配置中的root替换成proxy_pass即可。root说明是静态资源，可以由Nginx进行返回；而proxy_pass说明是动态请求，需要进行转发，比如代理到Tomcat上。</p><p>反向代理，上面已经说了，过程是透明的，比如说request -&gt; Nginx -&gt; Tomcat，那么对于Tomcat而言，请求的IP地址就是Nginx的地址，而非真实的request地址，这一点需要注意。不过好在Nginx不仅仅可以反向代理请求，还可以由用户自定义设置HTTP HEADER。</p><h3 id="负载均衡【upstream】"><a href="#负载均衡【upstream】" class="headerlink" title="负载均衡【upstream】"></a>负载均衡【upstream】</h3><p>上面的反向代理中，我们通过proxy_pass来指定Tomcat的地址，很显然我们只能指定一台Tomcat地址，那么我们如果想指定多台来达到负载均衡呢？</p><p>第一，通过upstream来定义一组Tomcat，并指定负载策略（IPHASH、加权论调、最少连接），健康检查策略（Nginx可以监控这一组Tomcat的状态）等。<br>第二，将proxy_pass替换成upstream指定的值即可。</p><h3 id="负载均衡可能带来的问题？"><a href="#负载均衡可能带来的问题？" class="headerlink" title="负载均衡可能带来的问题？"></a>负载均衡可能带来的问题？</h3><p>负载均衡所带来的明显的问题是，一个请求，可以到A server，也可以到B server，这完全不受我们的控制，当然这也不是什么问题，只是我们得注意的是：用户状态的保存问题，如Session会话信息，不能在保存到服务器上。一般是通过redis进行session共享。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存，是Nginx提供的，可以加快访问速度的机制，说白了，在配置上就是一个开启，同时指定目录，让缓存可以存储到磁盘上。具体配置，大家可以参考Nginx官方文档，这里就不在展开了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Nginx是一款轻量级的Web服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，访问静态资源速度快，在互联网项目中广泛应用。&lt;/p&gt;
&lt;img src=&quot;/blog/2017/01/10/2017-01-10-Nginx学习笔记/nginx01.png&quot; title=&quot;架构图&quot;&gt;
&lt;p&gt;上图基本上说明了当下流行的技术架构，其中Nginx有点入口网关的味道。&lt;br&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://dijia478.cn/categories/Nginx/"/>
    
    
      <category term="学习笔记" scheme="http://dijia478.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Nginx" scheme="http://dijia478.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Java研发知识点总结</title>
    <link href="http://dijia478.cn/blog/2016/12/24/2016-12-24-Java%E7%A0%94%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://dijia478.cn/blog/2016/12/24/2016-12-24-Java研发知识点总结/</id>
    <published>2016-12-24T09:46:20.000Z</published>
    <updated>2018-01-15T07:24:37.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Java基础（语言、集合框架、OOP、设计模式等）"><a href="#一、Java基础（语言、集合框架、OOP、设计模式等）" class="headerlink" title="一、Java基础（语言、集合框架、OOP、设计模式等）"></a>一、Java基础（语言、集合框架、OOP、设计模式等）</h2><h3 id="1-HashMap和Hashtable的区别"><a href="#1-HashMap和Hashtable的区别" class="headerlink" title="1. HashMap和Hashtable的区别"></a>1. HashMap和Hashtable的区别</h3><ul><li>Hashtable是基于陈旧的Dictionary的Map接口的实现，而HashMap是基于哈希表的Map接口的实现</li><li>从方法上看，HashMap去掉了Hashtable的contains方法</li><li>HashTable是同步的(线程安全)，而HashMap线程不安全，效率上HashMap更快</li><li>HashMap允许空键值，而Hashtable不允许</li><li>HashMap的iterator迭代器执行快速失败机制，也就是说在迭代过程中修改集合结构，除非调用迭代器自身的remove方法，否则以其他任何方式的修改都将抛出并发修改异常。而Hashtable返回的Enumeration不是快速失败的。</li></ul><p>注：<code>Fast-fail</code>机制:在使用迭代器的过程中有其它线程修改了集合对象结构或元素数量,都将抛出ConcurrentModifiedException，但是抛出这个异常是不保证的，我们不能编写依赖于此异常的程序。<br><a id="more"></a></p><h3 id="2-java的线程安全"><a href="#2-java的线程安全" class="headerlink" title="2. java的线程安全"></a>2. java的线程安全</h3><p>Vector、Stack、HashTable、ConcurrentHashMap、Properties</p><h3 id="3-java集合框架-常用"><a href="#3-java集合框架-常用" class="headerlink" title="3. java集合框架(常用)"></a>3. java集合框架(常用)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Collection - List - ArrayList</span><br><span class="line">Collection - List - LinkedList</span><br><span class="line">Collection - List - Vector</span><br><span class="line">Collection - List - Vector - Stack</span><br><span class="line">Collection - Set - HashSet</span><br><span class="line">Collection - Set - TreeSet</span><br><span class="line">Collection - List - LinkedHashSet</span><br><span class="line">Map - HashMap</span><br><span class="line">Map - TreeMap</span><br><span class="line">Map - HashTable</span><br><span class="line">Map - LinkedHashMap</span><br><span class="line">Map - ConcurrentHashMap</span><br></pre></td></tr></table></figure><p><strong>3.1 List集合和Set集合</strong></p><p>List中元素存取是有序的、可重复的；Set集合中元素是无序的，不可重复的。<br>CopyOnWriteArrayList:COW的策略，即写时复制的策略。适用于读多写少的并发场景<br>Set集合元素存取无序，且元素不可重复。<br>HashSet不保证迭代顺序，线程不安全；LinkedHashSet是Set接口的哈希表和链接列表的实现，保证迭代顺序，线程不安全。<br>TreeSet：可以对Set集合中的元素排序，元素以二叉树形式存放，线程不安全。</p><p><strong>3.2 ArrayList、LinkedList、Vector的区别</strong></p><p>首先它们均是List接口的实现。</p><p>ArrayList、LinkedList的区别：<br>1.随机存取：ArrayList是基于可变大小的数组实现，LinkedList是链接列表的实现。这也就决定了对于随机访问的get和set的操作，ArrayList要优于LinkedList，因为LinkedList要移动指针。<br>2.插入和删除：LinkedList要好一些，因为ArrayList要移动数据，更新索引。<br>3.内存消耗：LinkedList需要更多的内存，因为需要维护指向后继结点的指针。</p><p>Vector从JDK 1.0起就存在，在1.2时改为实现List接口，功能与ArrayList类似，但是Vector具备线程安全。</p><p><strong>3.3 Map集合</strong></p><p>Hashtable:基于Dictionary类，线程安全，速度快。底层是哈希表数据结构。是同步的。<br>不允许null作为键，null作为值。<br>Properties:Hashtable的子类。用于配置文件的定义和操作，使用频率非常高，同时键和值都是字符串。<br>HashMap：线程不安全，底层是数组加链表实现的哈希表。允许null作为键，null作为值。HashMap去掉了contains方法。<br>注意：HashMap不保证元素的迭代顺序。如果需要元素存取有序，请使用LinkedHashMap<br>TreeMap：可以用来对Map集合中的键进行排序。<br>ConcurrentHashMap:是JUC包下的一个并发集合。</p><p><strong>3.4 为什么使用ConcurrentHashMap而不是HashMap或Hashtable？</strong></p><p>HashMap的缺点：主要是多线程同时put时，如果同时触发了rehash操作，会导致HashMap中的链表中出现循环节点，进而使得后面get的时候，会死循环，CPU达到100%，所以在并发情况下不能使用HashMap。让HashMap同步：Map m = Collections.synchronizeMap(hashMap);而Hashtable虽然是同步的，使用synchronized来保证线程安全，但在线程竞争激烈的情况下HashTable的效率非常低下。因为当一个线程访问HashTable的同步方法时，其他线程访问HashTable的同步方法时，可能会进入阻塞或轮询状态。如线程1使用put进行添加元素，线程2不但不能使用put方法添加元素，并且也不能使用get方法来获取元素，所以竞争越激烈效率越低。 </p><p>ConcurrentHashMap的原理：</p><p>HashTable容器在竞争激烈的并发环境下表现出效率低下的原因在于所有访问HashTable的线程都必须竞争同一把锁，那假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p><p>ConcurrentHashMap的结构：</p><p>ConcurrentHashMap是由Segment数组结构和HashEntry数组结构组成。Segment是一种可重入互斥锁ReentrantLock，在ConcurrentHashMap里扮演锁的角色，HashEntry则用于存储键值对数据。一个ConcurrentHashMap里包含一个Segment数组，Segment的结构和HashMap类似，是一种数组和链表结构， 一个Segment里包含一个HashEntry数组，每个HashEntry是一个链表结构的元素，当对某个HashEntry数组的数据进行修改时，必须首先获得它对应的Segment锁。</p><p>ConcurrentHashMap的构造、get、put操作：</p><p>构造函数：传入参数分别为 1、初始容量，默认16 2、装载因子 装载因子用于rehash的判定，就是当ConcurrentHashMap中的元素大于装载因子乘以最大容量时进行扩容，默认0.75 3、并发级别 这个值用来确定Segment的个数，Segment的个数是大于等于concurrencyLevel的第一个2的n次方的数。比如，如果concurrencyLevel为12，13，14，15，16这些数，则Segment的数目为16(2的4次方)。默认值为static final int DEFAULT_CONCURRENCY_LEVEL = 16;。理想情况下ConcurrentHashMap的真正的并发访问量能够达到concurrencyLevel，因为有concurrencyLevel个Segment，假如有concurrencyLevel个线程需要访问Map，并且需要访问的数据都恰好分别落在不同的Segment中，则这些线程能够无竞争地自由访问（因为他们不需要竞争同一把锁），达到同时访问的效果。这也是为什么这个参数起名为“并发级别”的原因。默认16.</p><p>初始化的一些动作：</p><p>初始化segments数组（根据并发级别得到数组大小ssize），默认16<br>初始化segmentShift和segmentMask（这两个全局变量在定位segment时的哈希算法里需要使用），默认情况下segmentShift为28，segmentMask为15<br>初始化每个Segment，这一步会确定Segment里HashEntry数组的长度.</p><p>put操作：</p><p>1、判断value是否为null，如果为null，直接抛出异常。<br>2、key通过一次hash运算得到一个hash值。将得到hash值向右按位移动segmentShift位，然后再与segmentMask做&amp;运算得到segment的索引j。即segmentFor方法<br>3、使用Unsafe的方式从Segment数组中获取该索引对应的Segment对象。向这个Segment对象中put值，这个put操作也基本是一样的步骤（通过&amp;运算获取HashEntry的索引，然后set）。</p><p>get操作：</p><p>1、和put操作一样，先通过key进行hash确定应该去哪个Segment中取数据。<br>2、使用Unsafe获取对应的Segment，然后再进行一次&amp;运算得到HashEntry链表的位置，然后从链表头开始遍历整个链表（因为Hash可能会有碰撞，所以用一个链表保存），如果找到对应的key，则返回对应的value值，如果链表遍历完都没有找到对应的key，则说明Map中不包含该key，返回null。</p><p>定位Segment的hash算法：(hash &gt;&gt;&gt; segmentShift) &amp; segmentMask<br>定位HashEntry所使用的hash算法：int index = hash &amp; (tab.length - 1);</p><p>注：</p><p>1.tab为HashEntry数组<br>2.ConcurrentHashMap既不允许null key也不允许null value</p><p><strong>3.5 Collection 和 Collections的区别</strong></p><p>Collection是集合类的上级接口，子接口主要有Set 和List、Queue<br>Collections是针对集合类的一个辅助类，提供了操作集合的工具方法：一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。</p><p><strong>3.6 Map、Set、List、Queue、Stack的特点与用法</strong></p><p>Set集合类似于一个罐子，”丢进”Set集合里的多个对象之间没有明显的顺序。 List集合代表元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。 Stack是Vector提供的一个子类，用于模拟”栈”这种数据结构(LIFO后进先出) Queue用于模拟”队列”这种数据结构(先进先出 FIFO)。 Map用于保存具有”映射关系”的数据，因此Map集合里保存着两组值。</p><p><strong>3.7 HashMap的工作原理</strong></p><p>HashMap维护了一个Entry数组，Entry内部类有key,value，hash和next四个字段，其中next也是一个Entry类型。可以将Entry数组理解为一个个的散列桶。每一个桶实际上是一个单链表。当执行put操作时，会根据key的hashcode定位到相应的桶。遍历单链表检查该key是否已经存在，如果存在，覆盖该value，反之，新建一个新的Entry，并放在单链表的头部。当通过传递key调用get方法时，它再次使用key.hashCode()来找到相应的散列桶，然后使用key.equals()方法找出单链表中正确的Entry，然后返回它的值。</p><p><strong>3.8 Map的实现类的介绍</strong></p><p>HashMap基于散列表来的实现，即使用hashCode()进行快速查询元素的位置，显著提高性能。插入和查询“键值对”的开销是固定的。可以通过设置容量和装载因子，以调整容器的性能。</p><p>LinkedHashMap, 类似于HashMap,但是迭代遍历它时，保证迭代的顺序是其插入的次序，因为它使用链表维护内部次序。此外可以在构造器中设定LinkedHashMap，使之采用LRU算法。使没有被访问过的元素或较少访问的元素出现在前面，访问过的或访问多的出现在后面。这对于需要定期清理元素以节省空间的程序员来说，此功能使得程序员很容易得以实现。</p><p>TreeMap, 是基于红黑树的实现。同时TreeMap实现了SortedMap接口，该接口可以确保键处于排序状态。所以查看“键”和“键值对”时，所有得到的结果都是经过排序的，次序由自然排序或提供的Comparator决定。SortedMap接口拥有其他额外的功能，如：返回当前Map使用的Comparator比较强，firstKey()，lastKey(),headMap(toKey),tailMap(fromKey)以及可以返回一个子树的subMap()方法等。</p><p>WeakHashMap，表示弱键映射，WeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key/value 将会被回收。</p><p>ConcurrentHashMap， 在HashMap基础上分段锁机制实现的线程安全的HashMap。</p><p>IdentityHashMap 使用==代替equals() 对“键”进行比较的散列映射。专为解决特殊问题而设计。</p><p>HashTable：基于Dictionary类的Map接口的实现，它是线程安全的。</p><p><strong>3.9 LinkedList 和 PriorityQueue 的区别</strong></p><p>它们均是Queue接口的实现。拥有FIFO的特点，它们的区别在于排序行为。LinkedList 支持双向列表操作，<br>PriorityQueue 按优先级组织的队列，元素的出队次序由元素的自然排序或者由Comparator比较器指定。</p><p><strong>3.10 线程安全的集合类。</strong></p><p>Vector、Hashtable、Properties和Stack、ConcurrentHashMap</p><p><strong>3.11 BlockingQueue</strong></p><p>Java.util.concurrent.BlockingQueue是一个队列，在进行获取元素时，它会等待队列变为非空；当在添加一个元素时，它会等待队列中的可用空间。BlockingQueue接口是Java集合框架的一部分，主要用于实现生产者-消费者模式。我们不需要担心等待生产者有可用的空间，或消费者有可用的对象，因为它都在BlockingQueue的实现类中被处理了。Java提供了集中BlockingQueue的实现，比如ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue,、SynchronousQueue等。</p><p>**3.12 如何对一组对象进行排序</p><p>如果需要对一个对象数组进行排序，我们可以使用Arrays.sort()方法。如果我们需要排序一个对象列表，我们可以使用Collections.sort()方法。排序时是默认根据元素的自然排序（使用Comparable）或使用Comparator外部比较器。Collections内部使用数组排序方法，所有它们两者都有相同的性能，只是Collections需要花时间将列表转换为数组。</p><h3 id="4-ArrayList"><a href="#4-ArrayList" class="headerlink" title="4. ArrayList"></a>4. ArrayList</h3><ul><li>无参构造 容量为10</li><li>ArrayList(Collections&lt;?extends E&gt; c)构造包含指定collection的元素的列表</li><li>ArrayList(int initialCapacity) 指定初始容量</li></ul><h3 id="5-final关键字"><a href="#5-final关键字" class="headerlink" title="5. final关键字"></a>5. final关键字</h3><p><code>final</code>修饰的变量是常量，必须进行初始化，可以显示初始化，也可以通过构造进行初始化，如果不初始化编译会报错。</p><h3 id="6-接口与抽象类"><a href="#6-接口与抽象类" class="headerlink" title="6. 接口与抽象类"></a>6. 接口与抽象类</h3><p>6.1 一个子类只能继承一个抽象类,但能实现多个接口<br>6.2 抽象类可以有构造方法,接口没有构造方法<br>6.3 抽象类可以有普通成员变量,接口没有普通成员变量<br>6.4 抽象类和接口都可有静态成员变量,抽象类中静态成员变量访问类型任意，接口只能public static final(默认)<br>6.5 抽象类可以没有抽象方法,抽象类可以有普通方法,接口中都是抽象方法<br>6.6 抽象类可以有静态方法，接口不能有静态方法<br>6.7 抽象类中的方法可以是public、protected;接口方法只有public abstract</p><h3 id="7-抽象类和最终类"><a href="#7-抽象类和最终类" class="headerlink" title="7. 抽象类和最终类"></a>7. 抽象类和最终类</h3><p>抽象类可以没有抽象方法, 最终类可以没有最终方法</p><p>最终类不能被继承, 最终方法不能被重写(可以重载)</p><h3 id="8-异常"><a href="#8-异常" class="headerlink" title="8.异常"></a>8.异常</h3><p>相关的关键字 throw、throws、try…catch、finally</p><ul><li>throws 用在方法签名上, 以便抛出的异常可以被调用者处理</li><li>throw 方法内部通过throw抛出异常</li><li>try 用于检测包住的语句块, 若有异常, catch子句捕获并执行catch块</li></ul><h3 id="9-关于finally"><a href="#9-关于finally" class="headerlink" title="9. 关于finally"></a>9. 关于finally</h3><ul><li>finally不管有没有异常都要处理</li><li>当try和catch中有return时，finally仍然会执行，finally比return先执行</li><li>不管有木有异常抛出, finally在return返回前执行</li><li>finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值），所以函数返回值是在finally执行前确定的</li></ul><p>注意：finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值</p><p>finally不执行的几种情况：程序提前终止如调用了System.exit, 病毒，断电</p><h3 id="10-受检查异常和运行时异常"><a href="#10-受检查异常和运行时异常" class="headerlink" title="10. 受检查异常和运行时异常"></a>10. 受检查异常和运行时异常</h3><img src="/blog/2016/12/24/2016-12-24-Java研发知识点总结/zongjie01.png"><p>10.1 粉红色的是受检查的异常(checked exceptions),其必须被try…catch语句块所捕获, 或者在方法签名里通过throws子句声明。受检查的异常必须在编译时被捕捉处理,命名为Checked Exception是因为Java编译器要进行检查, Java虚拟机也要进行检查, 以确保这个规则得到遵守。 </p><p>常见的checked exception：ClassNotFoundException IOException FileNotFoundException EOFException</p><p>10.2 绿色的异常是运行时异常(runtime exceptions), 需要程序员自己分析代码决定是否捕获和处理,比如空指针,被0除… </p><p>常见的runtime exception：NullPointerException ArithmeticException ClassCastException IllegalArgumentException IllegalStateException IndexOutOfBoundsException NoSuchElementException </p><p>10.3 而声明为Error的，则属于严重错误，如系统崩溃、虚拟机错误、动态链接失败等，这些错误无法恢复或者不可能捕捉，将导致应用程序中断，Error不需要捕获。 </p><h3 id="11-this-amp-super"><a href="#11-this-amp-super" class="headerlink" title="11. this &amp; super"></a>11. this &amp; super</h3><p><strong>11.1 super出现在父类的子类中。有三种存在方式</strong></p><ol><li>super.xxx(xxx为变量名或对象名)意思是获取父类中xxx的变量或引用</li><li>super.xxx(); (xxx为方法名)意思是直接访问并调用父类中的方法</li><li>super() 调用父类构造</li></ol><p>注：super只能指代其直接父类</p><p><strong>11.2 this() &amp; super()在构造方法中的区别</strong></p><ol><li>调用super()必须写在子类构造方法的第一行, 否则编译不通过</li><li>super从子类调用父类构造, this在同一类中调用其他构造</li><li>均需要放在第一行</li><li>尽管可以用this调用一个构造器, 却不能调用2个</li><li>this和super不能出现在同一个构造器中, 否则编译不通过</li><li>this()、super()都指的对象,不可以在static环境中使用</li><li>本质this指向本对象的指针。super是一个关键字</li></ol><h3 id="12-修饰符一览"><a href="#12-修饰符一览" class="headerlink" title="12. 修饰符一览"></a>12. 修饰符一览</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修饰符 类内部  同一个包子类 任何地方</span><br><span class="line">private yes</span><br><span class="line">default         yesyes</span><br><span class="line">protectedyesyesyes</span><br><span class="line">publicyesyesyesyes</span><br></pre></td></tr></table></figure><h3 id="13-构造内部类和静态内部类对象"><a href="#13-构造内部类和静态内部类对象" class="headerlink" title="13. 构造内部类和静态内部类对象"></a>13. 构造内部类和静态内部类对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Enclosingone</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Insideone</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Insideone</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 构造内部类对象需要外部类的引用</span></span><br><span class="line">Enclosingone.Insideone obj1 = <span class="keyword">new</span> Enclosingone().new Insideone();</span><br><span class="line"><span class="comment">// 构造静态内部类的对象</span></span><br><span class="line">Enclosingone.Insideone obj2 = <span class="keyword">new</span> Enclosingone.Insideone();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类不需要有指向外部类的引用。但非静态内部类需要持有对外部类的引用。非静态内部类能够访问外部类的静态和非静态成员。静态内部类不能访问外部类的非静态成员，只能访问外部类的静态成员。</p><h3 id="14-序列化"><a href="#14-序列化" class="headerlink" title="14. 序列化"></a>14. 序列化</h3><p>声明为static和transient类型的数据不能被序列化， 反序列化需要一个无参构造函数</p><h3 id="15-正则表达式"><a href="#15-正则表达式" class="headerlink" title="15.正则表达式"></a>15.正则表达式</h3><p><strong>次数符号</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 0或多次</span><br><span class="line">+ 1或多次</span><br><span class="line">？0或1次</span><br><span class="line">&#123;n&#125; 恰n次</span><br><span class="line">&#123;n,m&#125; 从n到m次</span><br></pre></td></tr></table></figure></p><p><strong>其他符号</strong></p><p>符号    等价形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\d[0-9]</span><br><span class="line">\D      [^0-9]  </span><br><span class="line">\w [a-zA-Z_0-9]</span><br><span class="line">\W [^a-zA-Z_0-9]</span><br><span class="line">\s [\t\n\r\f]</span><br><span class="line">\S [^\t\n\r\f]</span><br><span class="line">. 任何字符</span><br></pre></td></tr></table></figure></p><p><strong>边界匹配器</strong></p><p>行开头    ^<br>行结尾  $<br>单词边界 \b</p><p><strong>贪婪模式</strong>:最大长度匹配 </p><p><strong>非贪婪模式</strong>:匹配到结果就好,最短匹配</p><p><strong>环视</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">字符 描述 匹配对象</span><br><span class="line">.单个任意字符</span><br><span class="line">[...] 字符组 列出的任意字符</span><br><span class="line">[^...] 未列出的任意字符</span><br><span class="line">^ caret 行的起始位置</span><br><span class="line">$     dollar 行的结束位置</span><br><span class="line">\&lt;   单词的起始位置</span><br><span class="line">\&gt; 单词的结束位置</span><br><span class="line">\b   单词边界</span><br><span class="line">\B 非单词边界</span><br><span class="line">(?=Expression)顺序肯定环视成功,如果右边能够匹配</span><br><span class="line">(?!Expression)顺序否定环视成功,如果右边不能够匹配</span><br><span class="line">(?&lt;=Expression)逆序肯定环视成功,如果左边能够匹配</span><br><span class="line">(?&lt;!Expression) 逆序否定环视成功,如果左边不能够匹配</span><br></pre></td></tr></table></figure><p>举例:北京市(海淀区)(朝阳区)(西城区)</p><p>Regex: .*(?=\()</p><p><strong>模式和匹配器的典型调用次序</strong></p><ol><li>把正则表达式编译到模式中<br>Pattern p = Pattern.compile(“a*b”);</li><li>创建给定输入与此模式的匹配器<br>Matcher m = p.matcher(“aaab”);</li><li>尝试将整个区域与此模式匹配<br>boolean b = m.matches();</li></ol><h3 id="16-面向对象的五大基本原则-solid"><a href="#16-面向对象的五大基本原则-solid" class="headerlink" title="16. 面向对象的五大基本原则(solid)"></a>16. 面向对象的五大基本原则(solid)</h3><ol><li><p>S单一职责<code>SRP</code>:Single-Responsibility Principle<br>一个类,最好只做一件事,只有一个引起它的变化。单一职责原则可以看做是低耦合,高内聚在面向对象原则的引申,将职责定义为引起变化的原因,以提高内聚性减少引起变化的原因。</p></li><li><p>O开放封闭原则<code>OCP</code>:Open-Closed Principle<br>软件实体应该是可扩展的,而不是可修改的。对扩展开放,对修改封闭</p></li><li><p>L里氏替换原则<code>LSP</code>:Liskov-Substitution Principle<br>子类必须能够替换其基类。这一思想表现为对继承机制的约束规范,只有子类能够替换其基类时,才能够保证系统在运行期内识别子类,这是保证继承复用的基础。</p></li><li><p>I接口隔离原则<code>ISP</code>:Interface-Segregation Principle<br>使用多个小的接口,而不是一个大的总接口</p></li><li><p>D依赖倒置原则<code>DIP</code>:Dependency-Inversion Principle<br>依赖于抽象。具体而言就是高层模块不依赖于底层模块,二者共同依赖于抽象。抽象不依赖于具体,具体依赖于抽象。</p></li></ol><h3 id="17-面向对象设计其他原则"><a href="#17-面向对象设计其他原则" class="headerlink" title="17. 面向对象设计其他原则"></a>17. 面向对象设计其他原则</h3><ol><li>封装变化</li><li>少用继承 多用组合</li><li>针对接口编程 不针对实现编程</li><li>为交互对象之间的松耦合设计而努力</li><li>类应该对扩展开发 对修改封闭（开闭OCP原则）</li><li>依赖抽象，不要依赖于具体类（依赖倒置DIP原则）</li><li><p>密友原则：只和朋友交谈（最少知识原则，迪米特法则）</p><p>说明：一个对象应当对其他对象有尽可能少的了解，将方法调用保持在界限内，只调用属于以下范围的方法：<br>该对象本身（本地方法）对象的组件 被当作方法参数传进来的对象 此方法创建或实例化的任何对象</p></li><li><p>别找我（调用我） 我会找你（调用你）（好莱坞原则）</p></li><li>一个类只有一个引起它变化的原因（单一职责SRP原则）</li></ol><h3 id="18-null可以被强制转型为任意类型的对象"><a href="#18-null可以被强制转型为任意类型的对象" class="headerlink" title="18. null可以被强制转型为任意类型的对象"></a>18. null可以被强制转型为任意类型的对象</h3><h3 id="19-代码执行次序"><a href="#19-代码执行次序" class="headerlink" title="19.代码执行次序"></a>19.代码执行次序</h3><ol><li>多个静态成员变量, 静态代码块按顺序执行</li><li>单个类中: 静态代码 -&gt; main方法 -&gt; 构造代码块 -&gt; 构造方法</li><li>构造块在每一次创建对象时执行</li><li>静态代码只执行一次</li><li>涉及父类和子类的初始化过程<br>a.初始化父类中的静态成员变量和静态代码块<br>b.初始化子类中的静态成员变量和静态代码块<br>c.初始化父类的普通成员变量和构造代码块(按次序)，再执行父类的构造方法(注意父类构造方法中的子类方法覆盖)<br>d.初始化子类的普通成员变量和构造代码块(按次序)，再执行子类的构造方法</li></ol><h3 id="20-数组复制方法"><a href="#20-数组复制方法" class="headerlink" title="20. 数组复制方法"></a>20. 数组复制方法</h3><ol><li>for逐一复制</li><li>System.arraycopy() -&gt; 效率最高native方法</li><li>Arrays.copyOf() -&gt; 本质调用arraycopy</li><li>clone方法 -&gt; 返回Object[],需要强制类型转换</li></ol><h3 id="21-多态"><a href="#21-多态" class="headerlink" title="21. 多态"></a>21. 多态</h3><ol><li>Java通过方法重写和方法重载实现多态 </li><li>方法重写是指子类重写了父类的同名方法 </li><li>方法重载是指在同一个类中，方法的名字相同，但是参数列表不同 </li></ol><h3 id="22-Java文件"><a href="#22-Java文件" class="headerlink" title="22. Java文件"></a>22. Java文件</h3><p>.java文件可以包含多个类，唯一的限制就是：一个文件中只能有一个public类， 并且此public类必须与<br>文件名相同。而且这些类和写在多个文件中没有区别。</p><h3 id="23-Java移位运算符"><a href="#23-Java移位运算符" class="headerlink" title="23. Java移位运算符"></a>23. Java移位运算符</h3><p>java中有三种移位运算符</p><ol><li><code>&lt;&lt;</code> :左移运算符,x &lt;&lt; 1,相当于x乘以2(不溢出的情况下),低位补0</li><li><code>&gt;&gt;</code> :带符号右移,x &gt;&gt; 1,相当于x除以2,正数高位补0,负数高位补1</li><li><code>&gt;&gt;&gt;</code> :无符号右移,忽略符号位,空位都以0补齐</li></ol><h3 id="24-形参-amp-实参"><a href="#24-形参-amp-实参" class="headerlink" title="24. 形参&amp;实参"></a>24. 形参&amp;实参</h3><ol><li>形式参数可被视为local variable.形参和局部变量一样都不能离开方法。只有在方法中使用，不会在方法外可见。</li><li>形式参数只能用final修饰符，其它任何修饰符都会引起编译器错误。但是用这个修饰符也有一定的限制，就是在方法中不能对参数做任何修改。不过一般情况下，一个方法的形参不用final修饰。只有在特殊情况下，那就是：方法内部类。一个方法内的内部类如果使用了这个方法的参数或者局部变量的话，这个参数或局部变量应该是final。</li><li>形参的值在调用时根据调用者更改，实参则用自身的值更改形参的值（指针、引用皆在此列），也就是说真正被传递的是实参。</li></ol><h3 id="25-IO流一览"><a href="#25-IO流一览" class="headerlink" title="25. IO流一览"></a>25. IO流一览</h3><img src="/blog/2016/12/24/2016-12-24-Java研发知识点总结/zongjie02.png"><h3 id="26-局部变量为什么要初始化"><a href="#26-局部变量为什么要初始化" class="headerlink" title="26. 局部变量为什么要初始化"></a>26. 局部变量为什么要初始化</h3><p>局部变量是指类方法中的变量，必须初始化。局部变量运行时被分配在栈中，量大，生命周期短，如果虚拟机给每个局部变量都初始化一下，是一笔很大的开销，但变量不初始化为默认值就使用是不安全的。出于速度和安全性两个方面的综合考虑，解决方案就是虚拟机不初始化，但要求编写者一定要在使用前给变量赋值。</p><h3 id="27-Java语言的鲁棒性"><a href="#27-Java语言的鲁棒性" class="headerlink" title="27. Java语言的鲁棒性"></a>27. Java语言的鲁棒性</h3><p>Java在编译和运行程序时，都要对可能出现的问题进行检查，以消除错误的产生。它提供自动垃圾收集来进行内存管理，防止程序员在管理内存时容易产生的错误。通过集成的面向对象的例外处理机制，在编译时，Java揭示出可能出现但未被处理的异常，帮助程序员正确地进行选择以防止系统的崩溃。另外，Java在编译时还可捕获类型声明中的许多常见错误，防止动态运行时不匹配问题的出现。</p><h3 id="28-Java语言特性"><a href="#28-Java语言特性" class="headerlink" title="28. Java语言特性"></a>28. Java语言特性</h3><ol><li>Java致力于检查程序在编译和运行时的错误</li><li>Java虚拟机实现了跨平台接口</li><li>类型检查帮助检查出许多开发早期出现的错误</li><li>Java自己操纵内存减少了内存出错的可能性</li><li>Java还实现了真数组，避免了覆盖数据的可能</li></ol><h3 id="29-包装类的equals-方法不处理数据转型，必须类型和值都一样才相等。"><a href="#29-包装类的equals-方法不处理数据转型，必须类型和值都一样才相等。" class="headerlink" title="29. 包装类的equals()方法不处理数据转型，必须类型和值都一样才相等。"></a>29. 包装类的equals()方法不处理数据转型，必须类型和值都一样才相等。</h3><h3 id="30-子类可以继承父类的静态方法！但是不能覆盖。因为静态方法是在编译时确定了，不能多态，也就是不能运行时绑定。"><a href="#30-子类可以继承父类的静态方法！但是不能覆盖。因为静态方法是在编译时确定了，不能多态，也就是不能运行时绑定。" class="headerlink" title="30. 子类可以继承父类的静态方法！但是不能覆盖。因为静态方法是在编译时确定了，不能多态，也就是不能运行时绑定。"></a>30. 子类可以继承父类的静态方法！但是不能覆盖。因为静态方法是在编译时确定了，不能多态，也就是不能运行时绑定。</h3><h3 id="31-Java语法糖"><a href="#31-Java语法糖" class="headerlink" title="31. Java语法糖"></a>31. Java语法糖</h3><ol><li>Java7的switch用字符串 - hashcode方法 switch用于enum枚举</li><li>伪泛型 - List<e>原始类型</e></li><li>自动装箱拆箱 - Integer.valueOf和Integer.intValue</li><li>foreach遍历 - Iterator迭代器实现</li><li>条件编译</li><li>enum枚举类、内部类</li><li>可变参数 - 数组</li><li>断言语言</li><li>try语句中定义和关闭资源</li></ol><h3 id="32-Java-中应该使用什么数据类型来代表价格？"><a href="#32-Java-中应该使用什么数据类型来代表价格？" class="headerlink" title="32. Java 中应该使用什么数据类型来代表价格？"></a>32. Java 中应该使用什么数据类型来代表价格？</h3><p>如果不是特别关心内存和性能的话，使用BigDecimal，否则使用预定义精度的 double 类型。</p><h3 id="33-怎么将-byte-转换为-String？"><a href="#33-怎么将-byte-转换为-String？" class="headerlink" title="33. 怎么将 byte 转换为 String？"></a>33. 怎么将 byte 转换为 String？</h3><p>可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。</p><h3 id="34-Java-中怎样将-bytes-转换为-long-类型？"><a href="#34-Java-中怎样将-bytes-转换为-long-类型？" class="headerlink" title="34. Java 中怎样将 bytes 转换为 long 类型？"></a>34. Java 中怎样将 bytes 转换为 long 类型？</h3><p>String接收bytes的构造器转成String，再Long.parseLong</p><h3 id="35-我们能将-int-强制转换为-byte-类型的变量吗？如果该值大于-byte-类型的范围，将会出现什么现象？"><a href="#35-我们能将-int-强制转换为-byte-类型的变量吗？如果该值大于-byte-类型的范围，将会出现什么现象？" class="headerlink" title="35. 我们能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象？"></a>35. 我们能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象？</h3><p>是的，我们可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，所以，如果强制转化是，int 类型的高 24 位将会被丢弃，byte 类型的范围是从 -128 到 127。</p><h3 id="36-存在两个类，B-继承-A，C-继承-B，我们能将-B-转换为-C-么？如-C-C-B；"><a href="#36-存在两个类，B-继承-A，C-继承-B，我们能将-B-转换为-C-么？如-C-C-B；" class="headerlink" title="36. 存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么？如 C = (C) B；"></a>36. 存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么？如 C = (C) B；</h3><p>可以，向下转型。但是不建议使用，容易出现类型转型异常.</p><h3 id="37-哪个类包含-clone-方法？是-Cloneable-还是-Object？"><a href="#37-哪个类包含-clone-方法？是-Cloneable-还是-Object？" class="headerlink" title="37. 哪个类包含 clone 方法？是 Cloneable 还是 Object？"></a>37. 哪个类包含 clone 方法？是 Cloneable 还是 Object？</h3><p>java.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在 object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由 c 或 c++ 或 其他本地语言实现的。</p><h3 id="38-Java-中-操作符是线程安全的吗？"><a href="#38-Java-中-操作符是线程安全的吗？" class="headerlink" title="38. Java 中 ++ 操作符是线程安全的吗？"></a>38. Java 中 ++ 操作符是线程安全的吗？</h3><p>不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差。还会存在竞态条件（读取-修改-写入）。</p><h3 id="39-a-a-b-与-a-b-的区别"><a href="#39-a-a-b-与-a-b-的区别" class="headerlink" title="39. a = a + b 与 a += b 的区别"></a>39. a = a + b 与 a += b 的区别</h3><p>+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两这个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = <span class="number">127</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">127</span>;</span><br><span class="line">b = a + b; <span class="comment">// error : cannot convert from int to byte</span></span><br><span class="line">b += a; <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>（因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错）</p><h3 id="40-我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗？"><a href="#40-我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗？" class="headerlink" title="40. 我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗？"></a>40. 我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗？</h3><p>不行，你不能在没有强制类型转换的前提下将一个 double 值赋值给 long 类型的变量，因为 double 类型的范围比 long 类型更广，所以必须要进行强制转换。</p><h3 id="41-3-0-1-0-3-将会返回什么？true-还是-false？"><a href="#41-3-0-1-0-3-将会返回什么？true-还是-false？" class="headerlink" title="41. 3*0.1 == 0.3 将会返回什么？true 还是 false？"></a>41. 3*0.1 == 0.3 将会返回什么？true 还是 false？</h3><p>false，因为有些浮点数不能完全精确的表示出来。</p><h3 id="42-int-和-Integer-哪个会占用更多的内存？"><a href="#42-int-和-Integer-哪个会占用更多的内存？" class="headerlink" title="42. int 和 Integer 哪个会占用更多的内存？"></a>42. int 和 Integer 哪个会占用更多的内存？</h3><p>Integer 对象会占用更多的内存。Integer 是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。</p><h3 id="43-为什么-Java-中的-String-是不可变的（Immutable）？"><a href="#43-为什么-Java-中的-String-是不可变的（Immutable）？" class="headerlink" title="43. 为什么 Java 中的 String 是不可变的（Immutable）？"></a>43. 为什么 Java 中的 String 是不可变的（Immutable）？</h3><p>Java 中的 String 不可变是因为 Java 的设计者认为字符串使用非常频繁，将字符串设置为不可变可以允许多个客户端之间共享相同的字符串。而且是为了安全和效率的考虑。</p><h3 id="44-我们能在-Switch-中使用-String-吗？"><a href="#44-我们能在-Switch-中使用-String-吗？" class="headerlink" title="44. 我们能在 Switch 中使用 String 吗？"></a>44. 我们能在 Switch 中使用 String 吗？</h3><p>从 Java 7 开始，我们可以在 switch case 中使用字符串，但这仅仅是一个语法糖。内部实现在 switch 中使用字符串的 hash code。</p><h3 id="45-Java-中的构造器链是什么？"><a href="#45-Java-中的构造器链是什么？" class="headerlink" title="45. Java 中的构造器链是什么？"></a>45. Java 中的构造器链是什么？</h3><p>当你从一个构造器中调用另一个构造器，就是Java 中的构造器链。这种情况只在重载了类的构造器的时候才会出现。</p><h3 id="46-枚举类"><a href="#46-枚举类" class="headerlink" title="46. 枚举类"></a>46. 枚举类</h3><p>JDK1.5出现 每个枚举值都需要调用一次构造函数</p><h3 id="47-什么是不可变对象（immutable-object）？"><a href="#47-什么是不可变对象（immutable-object）？" class="headerlink" title="47. 什么是不可变对象（immutable object）？"></a>47. 什么是不可变对象（immutable object）？</h3><p>不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类。</p><h3 id="48-Java-中怎么创建一个不可变对象？"><a href="#48-Java-中怎么创建一个不可变对象？" class="headerlink" title="48. Java 中怎么创建一个不可变对象？"></a>48. Java 中怎么创建一个不可变对象？</h3><p>如何在Java中写出Immutable的类？</p><p>要写出这样的类，需要遵循以下几个原则：</p><p>1）immutable对象的状态在创建之后就不能发生改变，任何对它的改变都应该产生一个新的对象。</p><p>2）Immutable类的所有的属性都应该是final的。</p><p>3）对象必须被正确的创建，比如：对象引用在对象创建过程中不能泄露(leak)。</p><p>4）对象应该是final的，以此来限制子类继承父类，以避免子类改变了父类的immutable特性。</p><p>5）如果类中包含mutable类对象，那么返回给客户端的时候，返回该对象的一个拷贝，而不是该对象本身（该条可以归为第一条中的一个特例）</p><h3 id="49-我们能创建一个包含可变对象的不可变对象吗？"><a href="#49-我们能创建一个包含可变对象的不可变对象吗？" class="headerlink" title="49. 我们能创建一个包含可变对象的不可变对象吗？"></a>49. 我们能创建一个包含可变对象的不可变对象吗？</h3><p>是的，我们是可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用。</p><h3 id="50-List和Set"><a href="#50-List和Set" class="headerlink" title="50. List和Set"></a>50. List和Set</h3><p>List 是一个有序集合，允许元素重复。它的某些实现可以提供基于下标值的常量访问时间，但是这不是 List 接口保证的。Set 是一个无序集合。</p><h3 id="51-poll-方法和-remove-方法的区别？"><a href="#51-poll-方法和-remove-方法的区别？" class="headerlink" title="51. poll() 方法和 remove() 方法的区别？"></a>51. poll() 方法和 remove() 方法的区别？</h3><p>poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p><h3 id="52-Java-中-LinkedHashMap-和-PriorityQueue-的区别是什么？"><a href="#52-Java-中-LinkedHashMap-和-PriorityQueue-的区别是什么？" class="headerlink" title="52. Java 中 LinkedHashMap 和 PriorityQueue 的区别是什么？"></a>52. Java 中 LinkedHashMap 和 PriorityQueue 的区别是什么？</h3><p>PriorityQueue 保证最高或者最低优先级的的元素总是在队列头部，但是 LinkedHashMap 维持的顺序是元素插入的顺序。当遍历一个 PriorityQueue 时，没有任何顺序保证，但是 LinkedHashMap 课保证遍历顺序是元素插入的顺序。</p><h3 id="53-ArrayList-与-LinkedList-的区别？"><a href="#53-ArrayList-与-LinkedList-的区别？" class="headerlink" title="53. ArrayList 与 LinkedList 的区别？"></a>53. ArrayList 与 LinkedList 的区别？</h3><p>最明显的区别是 ArrrayList 底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构书链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p><h3 id="54-用哪两种方式来实现集合的排序？"><a href="#54-用哪两种方式来实现集合的排序？" class="headerlink" title="54. 用哪两种方式来实现集合的排序？"></a>54. 用哪两种方式来实现集合的排序？</h3><p>你可以使用有序集合，如 TreeSet 或 TreeMap，你也可以使用有顺序的的集合，如 list，然后通过 Collections.sort() 来排序。</p><h3 id="55-Java-中怎么打印数组？"><a href="#55-Java-中怎么打印数组？" class="headerlink" title="55. Java 中怎么打印数组？"></a>55. Java 中怎么打印数组？</h3><p>你可以使用 Arrays.toString() 和 Arrays.deepToString() 方法来打印数组。由于数组没有实现 toString() 方法，所以如果将数组传递给 System.out.println() 方法，将无法打印出数组的内容，但是 Arrays.toString() 可以打印每个元素。</p><h3 id="56-Java-中的-LinkedList-是单向链表还是双向链表？"><a href="#56-Java-中的-LinkedList-是单向链表还是双向链表？" class="headerlink" title="56. Java 中的 LinkedList 是单向链表还是双向链表？"></a>56. Java 中的 LinkedList 是单向链表还是双向链表？</h3><p>是双向链表，你可以检查 JDK 的源码。在 Eclipse，你可以使用快捷键 Ctrl + T，直接在编辑器中打开该类。</p><h3 id="57-Java-中的-TreeMap-是采用什么树实现的？"><a href="#57-Java-中的-TreeMap-是采用什么树实现的？" class="headerlink" title="57. Java 中的 TreeMap 是采用什么树实现的？"></a>57. Java 中的 TreeMap 是采用什么树实现的？</h3><p>Java 中的 TreeMap 是使用红黑树实现的。</p><h3 id="58-Java-中的-HashSet，内部是如何工作的？"><a href="#58-Java-中的-HashSet，内部是如何工作的？" class="headerlink" title="58. Java 中的 HashSet，内部是如何工作的？"></a>58. Java 中的 HashSet，内部是如何工作的？</h3><p>HashSet 的内部采用 HashMap来实现。由于 Map 需要 key 和 value，所以所有 key 的都有一个默认 value。类似于 HashMap，HashSet 不允许重复的 key，只允许有一个null key，意思就是 HashSet 中只允许存储一个 null 对象。</p><h3 id="59-写一段代码在遍历-ArrayList-时移除一个元素？"><a href="#59-写一段代码在遍历-ArrayList-时移除一个元素？" class="headerlink" title="59. 写一段代码在遍历 ArrayList 时移除一个元素？"></a>59. 写一段代码在遍历 ArrayList 时移除一个元素？</h3><p>该问题的关键在于面试者使用的是 ArrayList 的 remove() 还是 Iterator 的 remove()方法。这有一段示例代码，是使用正确的方式来实现在遍历的过程中移除元素，而不会出现 ConcurrentModificationException 异常的示例代码。</p><h3 id="60-我们能自己写一个容器类，然后使用-for-each-循环吗？"><a href="#60-我们能自己写一个容器类，然后使用-for-each-循环吗？" class="headerlink" title="60. 我们能自己写一个容器类，然后使用 for-each 循环吗？"></a>60. 我们能自己写一个容器类，然后使用 for-each 循环吗？</h3><p>可以，你可以写一个自己的容器类。如果你想使用 Java 中增强的循环来遍历，你只需要实现 Iterable 接口。如果你实现 Collection 接口，默认就具有该属性。</p><h3 id="61-ArrayList-和-HashMap-的默认大小是多数？"><a href="#61-ArrayList-和-HashMap-的默认大小是多数？" class="headerlink" title="61. ArrayList 和 HashMap 的默认大小是多数？"></a>61. ArrayList 和 HashMap 的默认大小是多数？</h3><p>在 Java 7 中，ArrayList 的默认大小是 10 个元素，HashMap 的默认大小是16个元素（必须是2的幂）。这就是 Java 7 中 ArrayList 和 HashMap 类的代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from ArrayList.java JDK 1.7</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//from HashMap.java JDK 7</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure><h3 id="62-有没有可能两个不相等的对象有有相同的-hashcode？"><a href="#62-有没有可能两个不相等的对象有有相同的-hashcode？" class="headerlink" title="62. 有没有可能两个不相等的对象有有相同的 hashcode？"></a>62. 有没有可能两个不相等的对象有有相同的 hashcode？</h3><p>有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。相等 hashcode 值的规定只是说如果两个对象相等，必须有相同的hashcode 值，但是没有关于不相等对象的任何规定。</p><h3 id="63-两个相同的对象会有不同的的-hash-code-吗？"><a href="#63-两个相同的对象会有不同的的-hash-code-吗？" class="headerlink" title="63. 两个相同的对象会有不同的的 hash code 吗？"></a>63. 两个相同的对象会有不同的的 hash code 吗？</h3><p>不能，根据 hash code 的规定，这是不可能的。</p><h3 id="64-我们可以在-hashcode-中使用随机数字吗？"><a href="#64-我们可以在-hashcode-中使用随机数字吗？" class="headerlink" title="64. 我们可以在 hashcode() 中使用随机数字吗？"></a>64. 我们可以在 hashcode() 中使用随机数字吗？</h3><p>不行，因为对象的 hashcode 值必须是相同的。</p><h3 id="65-Java-中，Comparator-与-Comparable-有什么不同？"><a href="#65-Java-中，Comparator-与-Comparable-有什么不同？" class="headerlink" title="65. Java 中，Comparator 与 Comparable 有什么不同？"></a>65. Java 中，Comparator 与 Comparable 有什么不同？</h3><p>Comparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。</p><h3 id="66-为什么在重写-equals-方法的时候需要重写-hashCode-方法？"><a href="#66-为什么在重写-equals-方法的时候需要重写-hashCode-方法？" class="headerlink" title="66. 为什么在重写 equals 方法的时候需要重写 hashCode 方法？"></a>66. 为什么在重写 equals 方法的时候需要重写 hashCode 方法？</h3><p>因为有强制的规范指定需要同时重写 hashcode 与 equal 是方法，许多容器类，如 HashMap、HashSet 都依赖于 hashcode 与 equals 的规定。</p><h3 id="67-“a-b”和”a-equals-b-”有什么区别？"><a href="#67-“a-b”和”a-equals-b-”有什么区别？" class="headerlink" title="67. “a==b”和”a.equals(b)”有什么区别？"></a>67. “a==b”和”a.equals(b)”有什么区别？</h3><p>如果 a 和 b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。</p><h3 id="68-a-hashCode-有什么用？与-a-equals-b-有什么关系？"><a href="#68-a-hashCode-有什么用？与-a-equals-b-有什么关系？" class="headerlink" title="68. a.hashCode() 有什么用？与 a.equals(b) 有什么关系？"></a>68. a.hashCode() 有什么用？与 a.equals(b) 有什么关系？</h3><p>简介：hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equal() 方法来判断相等的对象，必须具有相同的 hash code。</p><p>1、hashcode的作用</p><p>List和Set，如何保证Set不重复呢？通过迭代使用equals方法来判断，数据量小还可以接受，数据量大怎么解决？引入hashcode，实际上hashcode扮演的角色就是寻址，大大减少查询匹配次数。</p><p>2、hashcode重要吗</p><p>对于数组、List集合就是一个累赘。而对于hashmap, hashset, hashtable就异常重要了。</p><p>3、equals方法遵循的原则</p><ul><li>对称性 若x.equals(y)true，则y.equals(x)true</li><li>自反性 x.equals(x)必须true</li><li>传递性 若x.equals(y)true,y.equals(z)true,则x.equals(z)必为true</li><li>一致性 只要x,y内容不变，无论调用多少次结果不变</li><li>其他 x.equals(null) 永远false，x.equals(和x数据类型不同)始终false</li></ul><h3 id="69-final、finalize-和-finally-的不同之处？"><a href="#69-final、finalize-和-finally-的不同之处？" class="headerlink" title="69. final、finalize 和 finally 的不同之处？"></a>69. final、finalize 和 finally 的不同之处？</h3><p>final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的，但是什么时候调用 finalize 没有保证。finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。</p><h3 id="70-Java-中的编译期常量是什么？使用它又什么风险？"><a href="#70-Java-中的编译期常量是什么？使用它又什么风险？" class="headerlink" title="70. Java 中的编译期常量是什么？使用它又什么风险？"></a>70. Java 中的编译期常量是什么？使用它又什么风险？</h3><p>变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。</p><h3 id="71-说出几点-Java-中使用-Collections-的最佳实践"><a href="#71-说出几点-Java-中使用-Collections-的最佳实践" class="headerlink" title="71. 说出几点 Java 中使用 Collections 的最佳实践"></a>71. 说出几点 Java 中使用 Collections 的最佳实践</h3><p>这是我在使用 Java 中 Collectionc 类的一些最佳实践：<br>a）使用正确的集合类，例如，如果不需要同步列表，使用 ArrayList 而不是 Vector。<br>b）优先使用并发集合，而不是对集合进行同步。并发集合提供更好的可扩展性。<br>c）使用接口代表和访问集合，如使用List存储 ArrayList，使用 Map 存储 HashMap 等等。<br>d）使用迭代器来循环集合。<br>e）使用集合的时候使用泛型。</p><h3 id="72-静态内部类与顶级类有什么区别？"><a href="#72-静态内部类与顶级类有什么区别？" class="headerlink" title="72. 静态内部类与顶级类有什么区别？"></a>72. 静态内部类与顶级类有什么区别？</h3><p>一个公共的顶级类的源文件名称与类名相同，而嵌套静态类没有这个要求。一个嵌套类位于顶级类内部，需要使用顶级类的名称来引用嵌套静态类，如 HashMap.Entry 是一个嵌套静态类，HashMap 是一个顶级类，Entry是一个嵌套静态类。</p><h3 id="73-Java-中，Serializable-与-Externalizable-的区别？"><a href="#73-Java-中，Serializable-与-Externalizable-的区别？" class="headerlink" title="73. Java 中，Serializable 与 Externalizable 的区别？"></a>73. Java 中，Serializable 与 Externalizable 的区别？</h3><p>Serializable 接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是 JVM 内嵌的默认序列化方式，成本高、脆弱而且不安全。Externalizable 允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。</p><h3 id="74-说出-JDK-1-7-中的三个新特性？"><a href="#74-说出-JDK-1-7-中的三个新特性？" class="headerlink" title="74. 说出 JDK 1.7 中的三个新特性？"></a>74. 说出 JDK 1.7 中的三个新特性？</h3><p>虽然 JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如 try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。Fork-Join 池某种程度上实现 Java 版的 Map-reduce。允许 Switch 中有 String 变量和文本。菱形操作符(&lt;&gt;)用于泛型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码。另一个值得一提的特性是改善异常处理，如允许在同一个 catch 块中捕获多个异常。</p><h3 id="75-说出-5-个-JDK-1-8-引入的新特性？"><a href="#75-说出-5-个-JDK-1-8-引入的新特性？" class="headerlink" title="75. 说出 5 个 JDK 1.8 引入的新特性？"></a>75. 说出 5 个 JDK 1.8 引入的新特性？</h3><p>Java 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性：<br>Lambda 表达式，允许像对象一样传递匿名函数<br>Stream API，充分利用现代多核 CPU，可以写出很简洁的代码<br>Date 与 Time API，最终，有一个稳定、简单的日期和时间库可供你使用<br>扩展方法，现在，接口中可以有静态、默认方法。<br>重复注解，现在你可以将相同的注解在同一类型上使用多次。</p><p>下述包含 Java 面试过程中关于 SOLID 的设计原则，OOP 基础，如类，对象，接口，继承，多态，封装，抽象以及更高级的一些概念，如组合、聚合及关联。也包含了 GOF 设计模式的问题。</p><h3 id="76-接口是什么？为什么要使用接口而不是直接使用具体类？"><a href="#76-接口是什么？为什么要使用接口而不是直接使用具体类？" class="headerlink" title="76. 接口是什么？为什么要使用接口而不是直接使用具体类？"></a>76. 接口是什么？为什么要使用接口而不是直接使用具体类？</h3><p>接口用于定义 API。它定义了类必须得遵循的规则。同时，它提供了一种抽象，因为客户端只使用接口，这样可以有多重实现，如 List 接口，你可以使用可随机访问的 ArrayList，也可以使用方便插入和删除的 LinkedList。接口中不允许普通方法，以此来保证抽象，但是 Java 8 中你可以在接口声明静态方法和默认普通方法。</p><h3 id="77-Java-中，抽象类与接口之间有什么不同？"><a href="#77-Java-中，抽象类与接口之间有什么不同？" class="headerlink" title="77. Java 中，抽象类与接口之间有什么不同？"></a>77. Java 中，抽象类与接口之间有什么不同？</h3><p>Java 中，抽象类和接口有很多不同之处，但是最重要的一个是 Java 中限制一个类只能继承一个类，但是可以实现多个接口。抽象类可以很好的定义一个家族类的默认行为，而接口能更好的定义类型，有助于后面实现多态机制<br>参见第六条。</p><h3 id="78-除了单例模式，你在生产环境中还用过什么设计模式"><a href="#78-除了单例模式，你在生产环境中还用过什么设计模式" class="headerlink" title="78. 除了单例模式，你在生产环境中还用过什么设计模式?"></a>78. 除了单例模式，你在生产环境中还用过什么设计模式?</h3><p>这需要根据你的经验来回答。一般情况下，你可以说依赖注入，工厂模式，装饰模式或者观察者模式，随意选择你使用过的一种即可。不过你要准备回答接下的基于你选择的模式的问题。</p><h3 id="79-你能解释一下里氏替换原则吗"><a href="#79-你能解释一下里氏替换原则吗" class="headerlink" title="79. 你能解释一下里氏替换原则吗?"></a>79. 你能解释一下里氏替换原则吗?</h3><p>严格定义：如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象用o1替换o2时，程序P的行为没有变化，那么类型S是类型T的子类型。</p><p>通俗表述：所有引用基类（父类）的地方必须能透明地使用其子类的对象。也就是说子类可以扩展父类的功能，但不能改变父类原有的功能。它包含以下4层含义：</p><ol><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</li><li>子类中可以增加自己特有的方法。</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</li><li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</li></ol><h3 id="80-什么情况下会违反迪米特法则？为什么会有这个问题？"><a href="#80-什么情况下会违反迪米特法则？为什么会有这个问题？" class="headerlink" title="80.什么情况下会违反迪米特法则？为什么会有这个问题？"></a>80.什么情况下会违反迪米特法则？为什么会有这个问题？</h3><p>迪米特法则建议“只和朋友说话，不要陌生人说话”，以此来减少类之间的耦合。</p><h3 id="81-适配器模式是什么？什么时候使用？"><a href="#81-适配器模式是什么？什么时候使用？" class="headerlink" title="81. 适配器模式是什么？什么时候使用？"></a>81. 适配器模式是什么？什么时候使用？</h3><p>适配器模式提供对接口的转换。如果你的客户端使用某些接口，但是你有另外一些接口，你就可以写一个适配去来连接这些接口。</p><h3 id="82-构造器注入和-setter-依赖注入，那种方式更好？"><a href="#82-构造器注入和-setter-依赖注入，那种方式更好？" class="headerlink" title="82. 构造器注入和 setter 依赖注入，那种方式更好？**"></a>82. 构造器注入和 setter 依赖注入，那种方式更好？**</h3><p>每种方式都有它的缺点和优点。构造器注入保证所有的注入都被初始化，但是 setter 注入提供更好的灵活性来设置可选依赖。如果使用 XML 来描述依赖，Setter 注入的可读写会更强。经验法则是强制依赖使用构造器注入，可选依赖使用 setter 注入。</p><h3 id="83-依赖注入和工厂模式之间有什么不同？"><a href="#83-依赖注入和工厂模式之间有什么不同？" class="headerlink" title="83. 依赖注入和工厂模式之间有什么不同？"></a>83. 依赖注入和工厂模式之间有什么不同？</h3><p>虽然两种模式都是将对象的创建从应用的逻辑中分离，但是依赖注入比工程模式更清晰。通过依赖注入，你的类就是 POJO，它只知道依赖而不关心它们怎么获取。使用工厂模式，你的类需要通过工厂来获取依赖。因此，使用 DI 会比使用工厂模式更容易测试。</p><h3 id="84-适配器模式和装饰器模式有什么区别？"><a href="#84-适配器模式和装饰器模式有什么区别？" class="headerlink" title="84. 适配器模式和装饰器模式有什么区别？"></a>84. 适配器模式和装饰器模式有什么区别？</h3><p>虽然适配器模式和装饰器模式的结构类似，但是每种模式的出现意图不同。适配器模式被用于桥接两个接口，而装饰模式的目的是在不修改类的情况下给类增加新的功能。</p><h3 id="85-适配器模式和代理模式之前有什么不同？"><a href="#85-适配器模式和代理模式之前有什么不同？" class="headerlink" title="85. 适配器模式和代理模式之前有什么不同？"></a>85. 适配器模式和代理模式之前有什么不同？</h3><p>这个问题与前面的类似，适配器模式和代理模式的区别在于他们的意图不同。由于适配器模式和代理模式都是封装真正执行动作的类，因此结构是一致的，但是适配器模式用于接口之间的转换，而代理模式则是增加一个额外的中间层，以便支持分配、控制或智能访问。</p><h3 id="86-什么是模板方法模式？"><a href="#86-什么是模板方法模式？" class="headerlink" title="86. 什么是模板方法模式？"></a>86. 什么是模板方法模式？</h3><p>模板方法提供算法的框架，你可以自己去配置或定义步骤。例如，你可以将排序算法看做是一个模板。它定义了排序的步骤，但是具体的比较，可以使用 Comparable 或者其语言中类似东西，具体策略由你去配置。列出算法概要的方法就是众所周知的模板方法。</p><h3 id="87-什么时候使用访问者模式？"><a href="#87-什么时候使用访问者模式？" class="headerlink" title="87. 什么时候使用访问者模式？"></a>87. 什么时候使用访问者模式？</h3><p>访问者模式用于解决在类的继承层次上增加操作，但是不直接与之关联。这种模式采用双派发的形式来增加中间层。</p><h3 id="88-什么时候使用组合模式？"><a href="#88-什么时候使用组合模式？" class="headerlink" title="88. 什么时候使用组合模式？"></a>88. 什么时候使用组合模式？</h3><p>组合模式使用树结构来展示部分与整体继承关系。它允许客户端采用统一的形式来对待单个对象和对象容器。当你想要展示对象这种部分与整体的继承关系时采用组合模式。</p><h3 id="89-继承和组合之间有什么不同？"><a href="#89-继承和组合之间有什么不同？" class="headerlink" title="89. 继承和组合之间有什么不同？"></a>89. 继承和组合之间有什么不同？</h3><p>虽然两种都可以实现代码复用，但是组合比继承共灵活，因为组合允许你在运行时选择不同的实现。用组合实现的代码也比继承测试起来更加简单。</p><h3 id="90-描述-Java-中的重载和重写？"><a href="#90-描述-Java-中的重载和重写？" class="headerlink" title="90. 描述 Java 中的重载和重写？"></a>90. 描述 Java 中的重载和重写？</h3><p>重载和重写都允许你用相同的名称来实现不同的功能，但是重载是编译时活动，而重写是运行时活动。你可以在同一个类中重载方法，但是只能在子类中重写方法。重写必须要有继承。</p><h3 id="91-OOP-中的-组合、聚合和关联有什么区别？"><a href="#91-OOP-中的-组合、聚合和关联有什么区别？" class="headerlink" title="91. OOP 中的 组合、聚合和关联有什么区别？"></a>91. OOP 中的 组合、聚合和关联有什么区别？</h3><p>如果两个对象彼此有关系，就说他们是彼此相关联的。组合和聚合是面向对象中的两种形式的关联。组合是一种比聚合更强力的关联。组合中，一个对象是另一个的拥有者，而聚合则是指一个对象使用另一个对象。如果对象 A 是由对象 B 组合的，则 A 不存在的话，B一定不存在，但是如果 A 对象聚合了一个对象 B，则即使 A 不存在了，B 也可以单独存在。</p><h3 id="92-给我一个符合开闭原则的设计模式的例子？"><a href="#92-给我一个符合开闭原则的设计模式的例子？" class="headerlink" title="92. 给我一个符合开闭原则的设计模式的例子？"></a>92. 给我一个符合开闭原则的设计模式的例子？</h3><p>开闭原则要求你的代码对扩展开放，对修改关闭。这个意思就是说，如果你想增加一个新的功能，你可以很容易的在不改变已测试过的代码的前提下增加新的代码。有好几个设计模式是基于开闭原则的，如策略模式，如果你需要一个新的策略，只需要实现接口，增加配置，不需要改变核心逻辑。一个正在工作的例子是 Collections.sort() 方法，这就是基于策略模式，遵循开闭原则的，你不需为新的对象修改 sort() 方法，你需要做的仅仅是实现你自己的 Comparator 接口。</p><h3 id="93-什么时候使用享元模式（蝇量模式）？"><a href="#93-什么时候使用享元模式（蝇量模式）？" class="headerlink" title="93. 什么时候使用享元模式（蝇量模式）？"></a>93. 什么时候使用享元模式（蝇量模式）？</h3><p>享元模式通过共享对象来避免创建太多的对象。为了使用享元模式，你需要确保你的对象是不可变的，这样你才能安全的共享。JDK 中 String 池、Integer 池以及 Long 池都是很好的使用了享元模式的例子。</p><h3 id="94-Java-中如何格式化一个日期？如格式化为-ddMMyyyy-的形式？"><a href="#94-Java-中如何格式化一个日期？如格式化为-ddMMyyyy-的形式？" class="headerlink" title="94. Java 中如何格式化一个日期？如格式化为 ddMMyyyy 的形式？"></a>94. Java 中如何格式化一个日期？如格式化为 ddMMyyyy 的形式？</h3><p>Java 中，可以使用 SimpleDateFormat 类或者 joda-time 库来格式日期。DateFormat 类允许你使用多种流行的格式来格式化日期。</p><h3 id="95-Java-中，怎么在格式化的日期中显示时区？"><a href="#95-Java-中，怎么在格式化的日期中显示时区？" class="headerlink" title="95. Java 中，怎么在格式化的日期中显示时区？"></a>95. Java 中，怎么在格式化的日期中显示时区？</h3><p>pattern中加z <code>yyyy-MM-dd HH:mm:ss.SSS Z</code></p><h3 id="96-Java-中-java-util-Date-与-java-sql-Date-有什么区别？"><a href="#96-Java-中-java-util-Date-与-java-sql-Date-有什么区别？" class="headerlink" title="96. Java 中 java.util.Date 与 java.sql.Date 有什么区别？"></a>96. Java 中 java.util.Date 与 java.sql.Date 有什么区别？</h3><p>java.sql.Date是针对SQL语句使用的，它只包含日期而没有时间部分,它们都有getTime方法返回毫秒数，自然就可以直接构建。java.util.Date 是 java.sql.Date 的父类，前者是常用的表示时间的类，我们通常格式化或者得到当前时间都是用他，后者之后在读写数据库的时候用他，因为PreparedStament的setDate()的第2参数和ResultSet的getDate()方法的第2个参数都是java.sql.Date。</p><h3 id="97-Java-中，如何计算两个日期之间的差距？"><a href="#97-Java-中，如何计算两个日期之间的差距？" class="headerlink" title="97. Java 中，如何计算两个日期之间的差距？"></a>97. Java 中，如何计算两个日期之间的差距？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dateDiff</span><span class="params">(Date d1, Date d2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">long</span> n1 = d1.getTime();</span><br><span class="line"><span class="keyword">long</span> n2 = d2.getTime();</span><br><span class="line"><span class="keyword">long</span> diff = Math.abs(n1 - n2);</span><br><span class="line"></span><br><span class="line">diff /= <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span>;</span><br><span class="line"><span class="keyword">return</span> diff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="98-Java-中，如何将字符串-YYYYMMDD-转换为日期？"><a href="#98-Java-中，如何将字符串-YYYYMMDD-转换为日期？" class="headerlink" title="98. Java 中，如何将字符串 YYYYMMDD 转换为日期？"></a>98. Java 中，如何将字符串 YYYYMMDD 转换为日期？</h3><p>SimpleDateFormat的parse方法</p><h3 id="99-说出几条-Java-中方法重载的最佳实践？"><a href="#99-说出几条-Java-中方法重载的最佳实践？" class="headerlink" title="99. 说出几条 Java 中方法重载的最佳实践？"></a>99. 说出几条 Java 中方法重载的最佳实践？</h3><p>下面有几条可以遵循的方法重载的最佳实践来避免造成自动装箱的混乱。<br>a）不要重载这样的方法：一个方法接收 int 参数，而另个方法接收 Integer 参数。<br>b）不要重载参数数量一致，而只是参数顺序不同的方法。<br>c）如果重载的方法参数个数多于 5 个，采用可变参数。</p><h3 id="100-说出-5-条-IO-的最佳实践"><a href="#100-说出-5-条-IO-的最佳实践" class="headerlink" title="100. 说出 5 条 IO 的最佳实践"></a>100. 说出 5 条 IO 的最佳实践</h3><p>IO 对 Java 应用的性能非常重要。理想情况下，你应该在你应用的关键路径上避免 IO 操作。下面是一些你应该遵循的 Java IO 最佳实践：</p><p>a）使用有缓冲区的 IO 类，而不要单独读取字节或字符<br>b）使用 NIO 和 NIO2<br>c）在 finally 块中关闭流，或者使用 try-with-resource（Java7） 语句<br>d）使用内存映射文件获取更快的 IO</p><h3 id="101-Object有哪些公用方法？"><a href="#101-Object有哪些公用方法？" class="headerlink" title="101. Object有哪些公用方法？"></a>101. Object有哪些公用方法？</h3><p>clone equals hashcode wait notify notifyall finalize toString getClass<br>除了clone和finalize其他均为公共方法。</p><p>11个方法，wait被重载了两次</p><h3 id="102-equals与-的区别"><a href="#102-equals与-的区别" class="headerlink" title="102. equals与==的区别"></a>102. equals与==的区别</h3><p>区别1. ==是一个运算符 equals是Object类的方法</p><p>区别2. 比较时的区别</p><p>a. 用于基本类型的变量比较时：==用于比较值是否相等，equals不能直接用于基本数据类型的比较，需要转换为其对应的包装类型。<br>b. 用于引用类型的比较时。==和equals都是比较栈内存中的地址是否相等 。相等为true 否则为false。但是通常会重写equals方法去实现对象内容的比较。</p><h3 id="103-String、StringBuffer与StringBuilder的区别"><a href="#103-String、StringBuffer与StringBuilder的区别" class="headerlink" title="103. String、StringBuffer与StringBuilder的区别"></a>103. String、StringBuffer与StringBuilder的区别</h3><p>第一点：可变和适用范围。String对象是不可变的，而StringBuffer和StringBuilder是可变字符序列。每次对String的操作相当于生成一个新的String对象，而对StringBuffer和StringBuilder的操作是对对象本身的操作，而不会生成新的对象，所以对于频繁改变内容的字符串避免使用String，因为频繁的生成对象将会对系统性能产生影响。</p><p>第二点：线程安全。String由于有final修饰，是immutable的，安全性是简单而纯粹的。StringBuilder和StringBuffer的区别在于StringBuilder不保证同步，也就是说如果需要线程安全需要使用StringBuffer，不需要同步的StringBuilder效率更高。</p><h3 id="104-switch能否用String做参数"><a href="#104-switch能否用String做参数" class="headerlink" title="104. switch能否用String做参数"></a>104. switch能否用String做参数</h3><p>Java1.7开始支持，但实际这是一颗Java语法糖。除此之外，byte，short，long，枚举，boolean均可用于switch，只有浮点型不可以。</p><h3 id="105-封装、继承、多态"><a href="#105-封装、继承、多态" class="headerlink" title="105. 封装、继承、多态"></a>105. 封装、继承、多态</h3><p><strong>封装</strong>：</p><p>1.概念：就是把对象的属性和操作（或服务）结合为一个独立的整体，并尽可能隐藏对象的内部实现细节。</p><p>2.好处：</p><p>(1)隐藏内部实现细节。</p><p><strong>继承</strong>：</p><p>1.概念：继承是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能扩展新的能力</p><p>2.好处：提高代码的复用，缩短开发周期。</p><p><strong>多态</strong>：</p><p>1.概念：多态（Polymorphism）按字面的意思就是“多种状态，即同一个实体同时具有多种形式。一般表现形式是程序在运行的过程中，同一种类型在不同的条件下表现不同的结果。多态也称为动态绑定，一般是在运行时刻才能确定方法的具体执行对象。</p><p>2.好处：<br>1）将接口和实现分开，改善代码的组织结构和可读性，还能创建可拓展的程序。<br>2）消除类型之间的耦合关系。允许将多个类型视为同一个类型。<br>3）一个多态方法的调用允许有多种表现形式</p><h3 id="106-Comparable和Comparator接口区别"><a href="#106-Comparable和Comparator接口区别" class="headerlink" title="106. Comparable和Comparator接口区别"></a>106. Comparable和Comparator接口区别</h3><p>Comparator位于包java.util下，而Comparable位于包java.lang下</p><p>如果我们需要使用Arrays或Collections的排序方法对对象进行排序时，我们需要在自定义类中实现Comparable接口并重写compareTo方法，compareTo方法接收一个参数，如果this对象比传递的参数小，相等或大时分别返回负整数、0、正整数。Comparable被用来提供对象的自然排序。String、Integer实现了该接口。</p><p>Comparator比较器的compare方法接收2个参数，根据参数的比较大小分别返回负整数、0和正整数。<br>Comparator 是一个外部的比较器，当这个对象自然排序不能满足你的要求时，你可以写一个比较器来完成两个对象之间大小的比较。用 Comparator 是策略模式（strategy design pattern），就是不改变对象自身，而用一个策略对象（strategy object）来改变它的行为。</p><h3 id="107-与Java集合框架相关的有哪些最好的实践"><a href="#107-与Java集合框架相关的有哪些最好的实践" class="headerlink" title="107. 与Java集合框架相关的有哪些最好的实践"></a>107. 与Java集合框架相关的有哪些最好的实践</h3><p>（1）根据需要选择正确的集合类型。比如，如果指定了大小，我们会选用Array而非ArrayList。如果我们想根据插入顺序遍历一个Map，我们需要使用TreeMap。如果我们不想重复，我们应该使用Set。</p><p>（2）一些集合类允许指定初始容量，所以如果我们能够估计到存储元素的数量，我们可以使用它，就避免了重新哈希或大小调整。</p><p>（3）基于接口编程，而非基于实现编程，它允许我们后来轻易地改变实现。</p><p>（4）总是使用类型安全的泛型，避免在运行时出现ClassCastException。</p><p>（5）使用JDK提供的不可变类作为Map的key，可以避免自己实现hashCode()和equals()。</p><h3 id="108-IO和NIO简述"><a href="#108-IO和NIO简述" class="headerlink" title="108. IO和NIO简述"></a>108. IO和NIO简述</h3><p><strong>1、简述</strong></p><p>在以前的Java IO中，都是阻塞式IO，NIO引入了非阻塞式IO。<br>第一种方式：我从硬盘读取数据，然后程序一直等，数据读完后，继续操作。这种方式是最简单的，叫阻塞IO。<br>第二种方式：我从硬盘读取数据，然后程序继续向下执行，等数据读取完后，通知当前程序（对硬件来说叫中断，对程序来说叫回调），然后此程序可以立即处理数据，也可以执行完当前操作在读取数据。</p><p><strong>2.流与块的比较</strong></p><p>原来的 I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。面向流 的 I/O 系统一次一个字节地处理数据。一个输入流产生一个字节的数据，一个输出流消费一个字节的数据。这样做是相对简单的。不利的一面是，面向流的 I/O 通常相当慢。<br>一个 面向块 的 I/O 系统以块的形式处理数据。每一个操作都在一步中产生或者消费一个数据块。按块处理数据比按(流式的)字节处理数据要快得多。但是面向块的 I/O 缺少一些面向流的 I/O 所具有的优雅性和简单性。</p><p><strong>3.通道与流</strong></p><p>Channel是一个对象，可以通过它读取和写入数据。通道与流功能类似，不同之处在于通道是双向的。而流只是在一个方向上移动(一个流必须是 InputStream 或者 OutputStream 的子类)， 而通道可以用于读、写或者同时用于读写。</p><p><strong>4.缓冲区Buffer</strong></p><p>在 NIO 库中，所有数据都是用缓冲区处理的。在 NIO 库中，所有数据都是用缓冲区处理的。</p><p>Position: 表示下一次访问的缓冲区位置<br>Limit: 表示当前缓冲区存放的数据容量。<br>Capacity:表示缓冲区最大容量</p><p>flip()方法:读写模式切换</p><p>clear方法:它将 limit 设置为与 capacity 相同。它设置 position 为 0。</p><hr><h2 id="二、Java高级（JavaEE、框架、服务器、工具等）"><a href="#二、Java高级（JavaEE、框架、服务器、工具等）" class="headerlink" title="二、Java高级（JavaEE、框架、服务器、工具等）"></a>二、Java高级（JavaEE、框架、服务器、工具等）</h2><h3 id="1-Servlet"><a href="#1-Servlet" class="headerlink" title="1. Servlet"></a>1. Servlet</h3><p>1.1 Servlet继承实现结构</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Servlet(接口)--&gt;init|service|destroy方法</span><br><span class="line">GenericServlet(抽象类)--&gt;与协议无关的Servlet</span><br><span class="line">HttpServlet(抽象类)--&gt;实现了http协议</span><br><span class="line">自定义Servlet--&gt;重写doGet/doPost</span><br></pre></td></tr></table></figure><p>1.2 编写Servlet的步骤</p><ol><li>继承HttpServlet</li><li>重写doGet/doPost方法</li><li>在web.xml中注册servlet</li></ol><p>1.3 Servlet生命周期</p><ol><li><code>init</code>:仅执行一次,负责装载servlet时初始化servlet对象</li><li><code>service</code>:核心方法,一般get/post两种方式</li><li><code>destroy</code>:停止并卸载servlet,释放资源</li></ol><p>1.4 过程</p><ol><li>客户端request请求 -&gt; 服务器检查Servlet实例是否存在 -&gt; 若存在调用相应service方法</li><li>客户端request请求 -&gt; 服务器检查Servlet实例是否存在 -&gt; 若不存在装载Servlet类并创建实例 -&gt; 调用init初始化 -&gt; 调用service</li><li>加载和实例化、初始化、处理请求、服务结束</li></ol><p>1.5 doPost方法要抛出的异常:ServletExcception、IOException</p><p>1.6 Servlet容器装载Servlet</p><ol><li>web.xml中配置load-on-startup启动时装载</li><li>客户首次向Servlet发送请求</li><li>Servlet类文件被更新后, 重新装载Servlet</li></ol><p>1.7 HttpServlet容器响应web客户请求流程</p><ol><li>Web客户向servlet容器发出http请求</li><li>servlet容器解析Web客户的http请求</li><li>servlet容器创建一个HttpRequest对象, 封装http请求信息</li><li>servlet容器创建一个HttpResponse对象</li><li>servlet容器调用HttpServlet的service方法, 把HttpRequest和HttpResponse对象作为service方法的参数传给HttpServlet对象</li><li>HttpServlet调用httprequest的有关方法, 获取http请求信息</li><li>httpservlet调用httpresponse的有关方法, 生成响应数据</li><li>Servlet容器把HttpServlet的响应结果传给web客户</li></ol><p>1.8 HttpServletRequest完成的一些功能</p><ol><li>request.getCookie()</li><li>request.getHeader(String s)</li><li>request.getContextPath()</li><li>request.getSession()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession(<span class="keyword">boolean</span> create)</span><br><span class="line"><span class="comment">// 返回当前请求的会话</span></span><br></pre></td></tr></table></figure><p>1.9 HttpServletResponse完成一些的功能</p><ol><li>设http响应头</li><li>设置Cookie</li><li>输出返回数据</li></ol><p>1.10 Servlet与JSP九大内置对象的关系</p><p>JSP对象                 怎样获得<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. out-&gt;response.getWriter</span><br><span class="line">2. request -&gt;Service方法中的req参数</span><br><span class="line">3. response -&gt;Service方法中的resp参数</span><br><span class="line">4. session -&gt;request.getSession</span><br><span class="line">5. application -&gt;getServletContext</span><br><span class="line">6. exception -&gt;Throwable</span><br><span class="line">7. page  -&gt;this</span><br><span class="line">8. pageContext  -&gt;PageContext</span><br><span class="line">9. Config -&gt;getServletConfig</span><br></pre></td></tr></table></figure></p><p>exception是JSP九大内置对象之一，其实例代表其他页面的异常和错误。只有当页面是错误处理页面时，即isErroePage为 true时，该对象才可以使用。</p><h3 id="2-JSP"><a href="#2-JSP" class="headerlink" title="2. JSP"></a>2. JSP</h3><p>JSP的前身就是Servlet</p><h3 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3. Tomcat"></a>3. Tomcat</h3><p>3.1 Tomcat容器的等级</p><p>Tomcat - <strong>Container</strong> - <strong>Engine</strong> - <strong>Host</strong> - <strong>Servlet</strong> - 多个Context(一个Context对应一个web工程)-Wrapper</p><h3 id="4-struts"><a href="#4-struts" class="headerlink" title="4. struts"></a>4. struts</h3><ol><li>struts可进行文件上传</li><li>struts基于MVC模式</li><li>struts让流程结构更清晰</li><li>struts有许多action类, 会增加类文件数目</li></ol><h3 id="5-Hibernate的7大鼓励措施"><a href="#5-Hibernate的7大鼓励措施" class="headerlink" title="5. Hibernate的7大鼓励措施"></a>5. Hibernate的7大鼓励措施</h3><ol><li>尽量使用many-to-one, 避免使用单项one-to-many</li><li>灵活使用单项one-to-many</li><li>不用一对一, 使用多对一代替一对一</li><li>配置对象缓存, 不使用集合对象</li><li>一对多使用bag, 多对一使用set</li><li>继承使用显示多态</li><li>消除大表, 使用二级缓存</li></ol><h3 id="6-Hibernate延迟加载"><a href="#6-Hibernate延迟加载" class="headerlink" title="6. Hibernate延迟加载"></a>6. Hibernate延迟加载</h3><ol><li>Hibernate2延迟加载实现：a)实体对象 b)集合（Collection） </li><li>Hibernate3 提供了属性的延迟加载功能<br>当Hibernate在查询数据的时候，数据并没有存在与内存中，当程序真正对数据的操作时，对象才存在与内存中，就实现了延迟加载，他节省了服务器的内存开销，从而提高了服务器的性能。 </li><li>hibernate使用Java反射机制，而不是字节码增强程序来实现透明性。 </li><li>hibernate的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。</li></ol><h3 id="7-Java-中，DOM-和-SAX-解析器有什么不同？"><a href="#7-Java-中，DOM-和-SAX-解析器有什么不同？" class="headerlink" title="7. Java 中，DOM 和 SAX 解析器有什么不同？"></a>7. Java 中，DOM 和 SAX 解析器有什么不同？</h3><p>DOM 解析器将整个 XML 文档加载到内存来创建一棵 DOM 模型树，这样可以更快的查找节点和修改 XML 结构，而 SAX 解析器是一个基于事件的解析器，不会将整个 XML 文档加载到内存。由于这个原因，DOM 比 SAX 更快，也要求更多的内存，但不适合于解析大的 XML 文件。</p><h3 id="8-Java-中，Maven-和-ANT-有什么区别？"><a href="#8-Java-中，Maven-和-ANT-有什么区别？" class="headerlink" title="8. Java 中，Maven 和 ANT 有什么区别？"></a>8. Java 中，Maven 和 ANT 有什么区别？</h3><p>虽然两者都是构建工具，都用于创建 Java 应用，但是 Maven 做的事情更多，在基于“约定优于配置”的概念下，提供标准的Java 项目结构，同时能为应用自动管理依赖（应用中所依赖的 JAR 文件）。</p><h3 id="9-解析XML不同方式对比"><a href="#9-解析XML不同方式对比" class="headerlink" title="9. 解析XML不同方式对比"></a>9. 解析XML不同方式对比</h3><p>DOM、SAX、JDOM、DOM4J</p><ul><li>[x] DOM DOM树驻留内存</li></ul><p>可以进行修改和写入,耗费内存。</p><p>步骤：创建DocumentBuilderFactory对象 -&gt; 创建DocumentBuilder对象 -&gt; Document document = db.parse(“xml”)</p><ul><li>[x] SAX 事件驱动模式</li></ul><p>获取一个SAXParserFactory工厂的实例 -&gt; 根据该实例获取SAXParser -&gt; 创建Handler对象 -&gt; 调用SAXParser的parse方法解析</p><p>用于读取节点数据 不易编码 事件有顺序 很难同时访问xml的多处数据</p><ul><li>[x] JDOM</li></ul><p>创建一个SAXBuilder的对象 -&gt; 创建一个输入流，加载xml文件 -&gt;通过saxBuilder的build方法将输入流加载至saxBuilder并接收Document对象</p><p>使用具体类而不使用接口</p><ul><li>[x] DOM4J</li></ul><p>通过SAXReader的read方法加载xml文件并获取document对象</p><p>使用接口和抽象类，灵活性好，功能强大</p><h3 id="10-Nginx相关"><a href="#10-Nginx相关" class="headerlink" title="10. Nginx相关"></a>10. Nginx相关</h3><h3 id="11-XML与JSON对比和区别"><a href="#11-XML与JSON对比和区别" class="headerlink" title="11. XML与JSON对比和区别"></a>11. XML与JSON对比和区别</h3><p>XML</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1）应用广泛，可扩展性强，被广泛应用各种场合</span><br><span class="line">2）读取、解析没有JSON快</span><br><span class="line">3）可读性强，可描述复杂结构</span><br></pre></td></tr></table></figure><p>JSON</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1）结构简单，都是键值对</span><br><span class="line">2）读取、解析速度快，很多语言支持</span><br><span class="line">3）传输数据量小，传输速率大大提高</span><br><span class="line">4）描述复杂结构能力较弱</span><br><span class="line"></span><br><span class="line">JavaScript、PHP等原生支持，简化了读取解析。成为当前互联网时代普遍应用的数据结构。</span><br></pre></td></tr></table></figure><hr><h2 id="三、多线程和并发"><a href="#三、多线程和并发" class="headerlink" title="三、多线程和并发"></a>三、多线程和并发</h2><h3 id="0-Java-中的-volatile-变量是什么"><a href="#0-Java-中的-volatile-变量是什么" class="headerlink" title="0. Java 中的 volatile 变量是什么"></a>0. Java 中的 volatile 变量是什么</h3><p>Java 语言提供了一种稍弱的同步机制,即<code>volatile</code>变量。但是volatile并不容易完全被正确、完整的理解。<br>一般来说，volatile具备2条语义，或者说2个特性。第一是保证volatile修饰的变量对所有线程的可见性，这里的可见性是指当一条线程修改了该变量，新值对于其它线程来说是立即可以得知的。而普通变量做不到这一点。</p><p>第二条语义是禁止指令重排序优化，这条语义在JDK1.5才被修复。</p><p>关于第一点：根据JMM，所有的变量存储在主内存，而每个线程还有自己的工作内存，线程的工作内存保存该线程使用到的变量的主内存副本拷贝，线程对变量的操作在工作内存中进行，不能直接读写主内存的变量。在volatile可见性这一点上，普通变量做不到的原因正因如此。比如，线程A修改了一个普通变量的值，然后向主内存进行回写，线程B在线程A回写完成后再从主内存读取，新变量才能对线程B可见。其实，按照虚拟机规范，volatile变量依然有工作内存的拷贝，要借助主内存来实现可见性。但由于volatile的特殊规则保证了新值能立即同步回主内存，以及每次使用从主内存刷新，以此保证了多线程操作volatile变量的可见性。</p><p>关于第二点：先说指令重排序，指令重排序是指CPU采用了允许将多条指令不按规定顺序分开发送给相应的处理单元处理，但并不是说任意重排，CPU需要正确处理指令依赖情况确保最终的正确结果，指令重排序是机器级的优化操作。那么为什么volatile要禁止指令重排序呢，又是如何去做的。举例，DCL（双重检查加锁）的单例模式。volatile修饰后，代码中将会插入许多内存屏障指令保证处理器不发生乱序执行。同时由于Happens-before规则的保证，在刚才的例子中写操作会发生在后续的读操作之前。</p><p>除了以上2点，volatile还保证对于64位long和double的读取是原子性的。因为在JMM中允许虚拟机对未被volatile修饰的64位的long和double读写操作分为2次32位的操作来执行，这也就是所谓的long和double的非原子性协定。</p><p>基于以上几点，我们知道volatile虽然有这些语义和特性在并发的情况下仍然不能保证线程安全。大部分情况下仍然需要加锁。</p><p>除非是以下2种情况，1.运算结果不依赖变量的当前值，或者能够确保只有单一线程修改变量的值；2.变量不需要与其他的状态变量共同参与不变约束。</p><h3 id="1-volatile简述"><a href="#1-volatile简述" class="headerlink" title="1. volatile简述"></a>1. volatile简述</h3><p>Java 语言提供了一种稍弱的同步机制,即<code>volatile</code>变量.用来确保将变量的更新操作通知到其他线程,保证了新值能立即同步到主内存,以及每次使用前立即从主内存刷新。 当把变量声明为volatile类型后,编译器与运行时都会注意到这个变量是共享的。<code>volatile</code>修饰变量,每次被线程访问时强迫其从主内存重读该值,修改后再写回。保证读取的可见性,对其他线程立即可见。<code>volatile</code>的另一个语义是禁止指令重排序优化。但是<code>volatile</code>并不保证原子性,也就不能保证线程安全。</p><h3 id="2-Java-中能创建-volatile-数组吗？"><a href="#2-Java-中能创建-volatile-数组吗？" class="headerlink" title="2. Java 中能创建 volatile 数组吗？"></a>2. Java 中能创建 volatile 数组吗？</h3><p>能，Java 中可以创建 volatile 类型数组，不过只是一个指向数组的引用，而不是整个数组。我的意思是，如果改变引用指向的数组，将会受到 volatile 的保护，但是如果多个线程同时改变数组的元素，volatile 就不能起到之前的保护作用了。</p><h3 id="3-volatile-能使得一个非原子操作变成原子操作吗？"><a href="#3-volatile-能使得一个非原子操作变成原子操作吗？" class="headerlink" title="3. volatile 能使得一个非原子操作变成原子操作吗？"></a>3. volatile 能使得一个非原子操作变成原子操作吗？</h3><p>一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java 中读取 long 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 long 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 volatile 型的 long 或 double 变量的读写是原子。</p><h3 id="4-volatile-禁止指令重排序的底层原理"><a href="#4-volatile-禁止指令重排序的底层原理" class="headerlink" title="4. volatile 禁止指令重排序的底层原理"></a>4. volatile 禁止指令重排序的底层原理</h3><p>指令重排序，是指CPU允许多条指令不按程序规定的顺序分开发送给相应电路单元处理。但并不是说任意重排，CPU需要能正确处理指令依赖情况以正确的执行结果。<code>volatile</code>禁止指令重排序是通过内存屏障实现的，指令重排序不能把后面的指令重排序到内存屏障之前。由内存屏障保证一致性。注：该条语义在JDK1.5才得以修复，这点也是JDK1.5之前无法通过双重检查加锁来实现单例模式的原因。</p><h3 id="5-volatile-类型变量提供什么保证？"><a href="#5-volatile-类型变量提供什么保证？" class="headerlink" title="5. volatile 类型变量提供什么保证？"></a>5. volatile 类型变量提供什么保证？</h3><p>volatile 变量提供有序性和可见性保证，例如，JVM 或者 JIT为了获得更好的性能会对语句重排序，但是 volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，volatile 还能提供原子性，如读 64 位数据类型，像 long 和 double 都不是原子的，但 volatile 类型的 double 和 long 就是原子的。</p><p>volatile的使用场景：</p><ol><li><p>运算结果不依赖变量的当前值，或者能够确保只有单一的线程修改该值</p></li><li><p>变量不需要与其他状态变量共同参与不变约束</p></li></ol><h3 id="6-volatile的性能"><a href="#6-volatile的性能" class="headerlink" title="6. volatile的性能"></a>6. volatile的性能</h3><p>volatile变量的读操作性能消耗和普通变量差不多，但是写操作可能相对慢一些，因为它需要在本地代码中插入许多内存屏障指令以确保处理器不发生乱序执行。大多数情况下，volatile总开销比锁低，但我们要注意volatile的语义能否满足使用场景。</p><h3 id="7-10-个线程和-2-个线程的同步代码，哪个更容易写？"><a href="#7-10-个线程和-2-个线程的同步代码，哪个更容易写？" class="headerlink" title="7. 10 个线程和 2 个线程的同步代码，哪个更容易写？"></a>7. 10 个线程和 2 个线程的同步代码，哪个更容易写？</h3><p>从写代码的角度来说，两者的复杂度是相同的，因为同步代码与线程数量是相互独立的。但是同步策略的选择依赖于线程的数量，因为越多的线程意味着更大的竞争，所以你需要利用同步技术，如锁分离，这要求更复杂的代码和专业知识。</p><h3 id="8-你是如何调用-wait（）方法的？使用-if-块还是循环？为什么？"><a href="#8-你是如何调用-wait（）方法的？使用-if-块还是循环？为什么？" class="headerlink" title="8. 你是如何调用 wait（）方法的？使用 if 块还是循环？为什么？"></a>8. 你是如何调用 wait（）方法的？使用 if 块还是循环？为什么？</h3><p>wait() 方法应该在循环调用，因为当线程获取到 CPU 开始执行的时候，其他条件可能还没有满足，所以在处理前，循环检测条件是否满足会更好。下面是一段标准的使用 wait 和 notify 方法的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The standard idiom for using the wait method</span></span><br><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line"><span class="keyword">while</span> (condition does not hold)</span><br><span class="line">obj.wait(); <span class="comment">// (Releases lock, and reacquires on wakeup)</span></span><br><span class="line">... <span class="comment">// Perform action appropriate to condition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参见 Effective Java 第 69 条，获取更多关于为什么应该在循环中来调用 wait 方法的内容。</p><h3 id="9-什么是多线程环境下的伪共享（false-sharing）？"><a href="#9-什么是多线程环境下的伪共享（false-sharing）？" class="headerlink" title="9. 什么是多线程环境下的伪共享（false sharing）？"></a>9. 什么是多线程环境下的伪共享（false sharing）？</h3><p>伪共享是多线程系统（每个处理器有自己的局部缓存）中一个众所周知的性能问题。伪共享发生在不同处理器的上的线程对变量的修改依赖于相同的缓存行，如下图所示：</p><img src="/blog/2016/12/24/2016-12-24-Java研发知识点总结/zongjie03.png"><p>伪共享问题很难被发现，因为线程可能访问完全不同的全局变量，内存中却碰巧在很相近的位置上。如其他诸多的并发问题，避免伪共享的最基本方式是仔细审查代码，根据缓存行来调整你的数据结构。</p><h3 id="10-线程的run方法和start方法"><a href="#10-线程的run方法和start方法" class="headerlink" title="10. 线程的run方法和start方法"></a>10. 线程的run方法和start方法</h3><ul><li><code>run方法</code></li></ul><p>只是thread类的一个普通方法,若直接调用程序中依然只有主线程这一个线程,还要顺序执行,依然要等待run方法体执行完毕才可执行下面的代码。</p><ul><li><code>start方法</code></li></ul><p>用start方法来启动线程,是真正实现了多线程。调用thread类的start方法来启动一个线程,此时线程处于就绪状态,一旦得到cpu时间片,就开始执行run方法。</p><h3 id="11-ReadWriteLock-读写锁"><a href="#11-ReadWriteLock-读写锁" class="headerlink" title="11. ReadWriteLock(读写锁)"></a>11. ReadWriteLock(读写锁)</h3><p>写写互斥 读写互斥 读读并发, 在读多写少的情况下可以提高效率 </p><h3 id="12-resume-继续挂起的线程-和suspend-挂起线程-一起用"><a href="#12-resume-继续挂起的线程-和suspend-挂起线程-一起用" class="headerlink" title="12. resume(继续挂起的线程)和suspend(挂起线程)一起用"></a>12. resume(继续挂起的线程)和suspend(挂起线程)一起用</h3><h3 id="13-wait与notify、notifyall一起用"><a href="#13-wait与notify、notifyall一起用" class="headerlink" title="13. wait与notify、notifyall一起用"></a>13. wait与notify、notifyall一起用</h3><h3 id="14-sleep与wait的异同点"><a href="#14-sleep与wait的异同点" class="headerlink" title="14. sleep与wait的异同点"></a>14. sleep与wait的异同点</h3><ul><li>sleep是Thread类的静态方法, wait来自object类</li><li>sleep方法短暂停顿不释放锁, wait方法条件等待要释放锁，因为只有这样，其他等待的线程才能在满足条件时获取到该锁。</li><li>wait, notify, notifyall必须在同步代码块中使用, sleep可以在任何地方使用</li><li>都可以抛出InterruptedException</li></ul><h3 id="15-让一个线程停止执行"><a href="#15-让一个线程停止执行" class="headerlink" title="15. 让一个线程停止执行"></a>15. 让一个线程停止执行</h3><p>异常 - 停止执行<br>休眠 - 停止执行<br>阻塞 - 停止执行</p><h3 id="16-ThreadLocal简介"><a href="#16-ThreadLocal简介" class="headerlink" title="16. ThreadLocal简介"></a>16. ThreadLocal简介</h3><p><strong>16.1 ThreadLocal解决了变量并发访问的冲突问题</strong></p><p>当使用ThreadLocal维护变量时,ThreadLocal为每个使用该变量的线程提供独立的变量副本,每个线程都可以独立地改变自己的副本,而不会影响其它线程所对应的副本,是线程隔离的。线程隔离的秘密在于ThreadLocalMap类(ThreadLocal的静态内部类)</p><p><strong>16.2 与synchronized同步机制的比较</strong></p><p>首先,它们都是为了解决多线程中相同变量访问冲突问题。不过,在同步机制中,要通过对象的锁机制保证同一时间只有一个线程访问该变量。该变量是线程共享的, 使用同步机制要求程序缜密地分析什么时候对该变量读写, 什么时候需要锁定某个对象, 什么时候释放对象锁等复杂的问题,程序设计编写难度较大, 是一种“以时间换空间”的方式。<br>而ThreadLocal采用了以“以空间换时间”的方式。</p><h3 id="17-线程局部变量原理"><a href="#17-线程局部变量原理" class="headerlink" title="17. 线程局部变量原理"></a>17. 线程局部变量原理</h3><p>当使用ThreadLocal维护变量时,ThreadLocal为每个使用该变量的线程提供独立的变量副本,每个线程都可以独立地改变自己的副本,而不会影响其它线程所对应的副本,是线程隔离的。线程隔离的秘密在于ThreadLocalMap类(ThreadLocal的静态内部类)</p><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java 提供 ThreadLocal 类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p><p>ThreadLocal的方法：void set(T value)、T get()以及T initialValue()。</p><p>ThreadLocal是如何为每个线程创建变量的副本的：</p><p>首先，在每个线程Thread内部有一个ThreadLocal.ThreadLocalMap类型的成员变量threadLocals，这个threadLocals就是用来存储实际的变量副本的，键值为当前ThreadLocal变量，value为变量副本（即T类型的变量）。初始时，在Thread里面，threadLocals为空，当通过ThreadLocal变量调用get()方法或者set()方法，就会对Thread类中的threadLocals进行初始化，并且以当前ThreadLocal变量为键值，以ThreadLocal要保存的副本变量为value，存到threadLocals。然后在当前线程里面，如果要使用副本变量，就可以通过get方法在threadLocals里面查找。</p><p>总结：</p><ol><li><p>实际的通过ThreadLocal创建的副本是存储在每个线程自己的threadLocals中的</p></li><li><p>为何threadLocals的类型ThreadLocalMap的键值为ThreadLocal对象，因为每个线程中可有多个threadLocal变量，就像上面代码中的longLocal和stringLocal；</p></li><li><p>在进行get之前，必须先set，否则会报空指针异常；如果想在get之前不需要调用set就能正常访问的话，必须重写initialValue()方法</p></li></ol><h3 id="18-JDK提供的用于并发编程的同步器"><a href="#18-JDK提供的用于并发编程的同步器" class="headerlink" title="18. JDK提供的用于并发编程的同步器"></a>18. JDK提供的用于并发编程的同步器</h3><ol><li><code>Semaphore</code> Java并发库的Semaphore可以很轻松完成信号量控制，Semaphore可以控制某个资源可被同时访问的个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。</li><li><code>CyclicBarrier</code> 主要的方法就是一个：await()。await()方法每被调用一次，计数便会减少1，并阻塞住当前线程。当计数减至0时，阻塞解除，所有在此CyclicBarrier上面阻塞的线程开始运行。</li><li><code>CountDownLatch</code> 直译过来就是倒计数(CountDown)门闩(Latch)。倒计数不用说，门闩的意思顾名思义就是阻止前进。在这里就是指 CountDownLatch.await() 方法在倒计数为0之前会阻塞当前线程。</li></ol><h3 id="19-什么是-Busy-spin？我们为什么要使用它？"><a href="#19-什么是-Busy-spin？我们为什么要使用它？" class="headerlink" title="19. 什么是 Busy spin？我们为什么要使用它？"></a>19. 什么是 Busy spin？我们为什么要使用它？</h3><p>Busy spin 是一种在不释放 CPU 的基础上等待事件的技术。它经常用于避免丢失 CPU 缓存中的数据（如果线程先暂停，之后在其他CPU上运行就会丢失）。所以，如果你的工作要求低延迟，并且你的线程目前没有任何顺序，这样你就可以通过循环检测队列中的新消息来代替调用 sleep() 或 wait() 方法。它唯一的好处就是你只需等待很短的时间，如几微秒或几纳秒。LMAX 分布式框架是一个高性能线程间通信的库，该库有一个 BusySpinWaitStrategy 类就是基于这个概念实现的，使用 busy spin 循环 EventProcessors 等待屏障。</p><h3 id="20-Java-中怎么获取一份线程-dump-文件？"><a href="#20-Java-中怎么获取一份线程-dump-文件？" class="headerlink" title="20. Java 中怎么获取一份线程 dump 文件？"></a>20. Java 中怎么获取一份线程 dump 文件？</h3><p>在 Linux 下，你可以通过命令 kill -3 PID （Java 进程的进程 ID）来获取 Java 应用的 dump 文件。在 Windows 下，你可以按下 Ctrl + Break 来获取。这样 JVM 就会将线程的 dump 文件打印到标准输出或错误文件中，它可能打印在控制台或者日志文件中，具体位置依赖应用的配置。</p><h3 id="21-Swing-是线程安全的？"><a href="#21-Swing-是线程安全的？" class="headerlink" title="21. Swing 是线程安全的？"></a>21. Swing 是线程安全的？</h3><p>不是，Swing 不是线程安全的。你不能通过任何线程来更新 Swing 组件，如 JTable、JList 或 JPanel，事实上，它们只能通过 GUI 或 AWT 线程来更新。这就是为什么 Swing 提供 invokeAndWait() 和 invokeLater() 方法来获取其他线程的 GUI 更新请求。这些方法将更新请求放入 AWT 的线程队列中，可以一直等待，也可以通过异步更新直接返回结果。</p><h3 id="22-用-wait-notify-写一段代码来解决生产者-消费者问题？"><a href="#22-用-wait-notify-写一段代码来解决生产者-消费者问题？" class="headerlink" title="22. 用 wait-notify 写一段代码来解决生产者-消费者问题？"></a>22. 用 wait-notify 写一段代码来解决生产者-消费者问题？</h3><p>记住在同步块中调用 wait() 和 notify()方法，如果阻塞，通过循环来测试等待条件。</p><h3 id="23-用-Java-写一个线程安全的单例模式（Singleton）？"><a href="#23-用-Java-写一个线程安全的单例模式（Singleton）？" class="headerlink" title="23. 用 Java 写一个线程安全的单例模式（Singleton）？"></a>23. 用 Java 写一个线程安全的单例模式（Singleton）？</h3><p>当我们说线程安全时，意思是即使初始化是在多线程环境中，仍然能保证单个实例。Java 中，使用枚举作为单例类是最简单的方式来创建线程安全单例模式的方式。</p><h3 id="24-Java-中，编写多线程程序的时候你会遵循哪些最佳实践？"><a href="#24-Java-中，编写多线程程序的时候你会遵循哪些最佳实践？" class="headerlink" title="24. Java 中，编写多线程程序的时候你会遵循哪些最佳实践？"></a>24. Java 中，编写多线程程序的时候你会遵循哪些最佳实践？</h3><p>这是我在写Java 并发程序的时候遵循的一些最佳实践：</p><p>a）给线程命名，这样可以帮助调试。</p><p>b）最小化同步的范围，而不是将整个方法同步，只对关键部分做同步。</p><p>c）如果可以，更偏向于使用 volatile 而不是 synchronized。</p><p>d）使用更高层次的并发工具，而不是使用 wait() 和 notify() 来实现线程间通信，如 BlockingQueue，CountDownLatch 及 Semeaphore。</p><p>e）优先使用并发集合，而不是对集合进行同步。并发集合提供更好的可扩展性。</p><h3 id="25-说出至少-5-点在-Java-中使用线程的最佳实践。"><a href="#25-说出至少-5-点在-Java-中使用线程的最佳实践。" class="headerlink" title="25. 说出至少 5 点在 Java 中使用线程的最佳实践。"></a>25. 说出至少 5 点在 Java 中使用线程的最佳实践。</h3><p>这个问题与之前的问题类似，你可以使用上面的答案。对线程来说，你应该：</p><p>a）对线程命名</p><p>b）将线程和任务分离，使用线程池执行器来执行 Runnable 或 Callable。</p><p>c）使用线程池</p><h3 id="26-在多线程环境下，SimpleDateFormat-是线程安全的吗？"><a href="#26-在多线程环境下，SimpleDateFormat-是线程安全的吗？" class="headerlink" title="26. 在多线程环境下，SimpleDateFormat 是线程安全的吗？"></a>26. 在多线程环境下，SimpleDateFormat 是线程安全的吗？</h3><p>不是，非常不幸，DateFormat 的所有实现，包括 SimpleDateFormat 都不是线程安全的，因此你不应该在多线程序中使用，除非是在对外线程安全的环境中使用，如将 SimpleDateFormat 限制在 ThreadLocal 中。如果你不这么做，在解析或者格式化日期的时候，可能会获取到一个不正确的结果。因此，从日期、时间处理的所有实践来说，我强力推荐 joda-time 库。</p><h3 id="27-Happens-Before规则"><a href="#27-Happens-Before规则" class="headerlink" title="27. Happens-Before规则"></a>27. Happens-Before规则</h3><ul><li>程序次序规则</li></ul><p>按控制流顺序先后发生</p><ul><li>管程锁定规则</li></ul><p>一个unlock操作先行发生于后面对同一个锁的lock操作</p><ul><li>volatile变量规则</li></ul><p>对一个volatile变量的写操作先行发生于后面对这个变量的读操作</p><ul><li>线程启动规则</li></ul><p>start方法先行发生于线程的每一个动作</p><ul><li>线程中断规则</li></ul><p>对线程的interrupt方法调用先行发生于被中断线程的代码检测到中断时间的发生</p><ul><li>线程终止规则</li></ul><p>线程内的所有操作都先行发生于对此线程的终止检测</p><ul><li>对象终结规则</li></ul><p>一个对象的初始化完成先行发生于它的finalize方法的开始</p><ul><li>传递性 </li></ul><p>如果A先行发生于操作B，B先行发生于操作C，则A先行发生于操作C</p><h3 id="28-什么是线程"><a href="#28-什么是线程" class="headerlink" title="28. 什么是线程"></a>28. 什么是线程</h3><p>线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。程序员可以通过它进行多处理器编程，可以使用多线程对运算密集型任务提速。比如，如果一个线程完成一个任务要100 毫秒，那么用十个线程完成改任务只需 10 毫秒。Java在语言层面对多线程提供了很好的支持。</p><h3 id="29-线程和进程有什么区别"><a href="#29-线程和进程有什么区别" class="headerlink" title="29. 线程和进程有什么区别"></a>29. 线程和进程有什么区别</h3><p>从概念上：</p><p>进程：一个程序对一个数据集的动态执行过程，是分配资源的基本单位。<br>线程：存在于进程内，是进程内的基本调度单位。共享进程的资源。</p><p>从执行过程中来看：</p><p>进程：拥有独立的内存单元，而多个线程共享内存，从而提高了应用程序的运行效率。<br>线程：每一个独立的线程，都有一个程序运行的入口、顺序执行序列、和程序的出口。但是线程不能够独立的执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p><p>从逻辑角度来看：（重要区别）</p><p>多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但是，操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理及资源分配。</p><p>简言之，一个程序至少有一个进程,一个进程至少有一个线程。进程是资源分配的基本单位，线程共享进程的资源。</p><h3 id="30-用-Runnable-还是-Thread"><a href="#30-用-Runnable-还是-Thread" class="headerlink" title="30. 用 Runnable 还是 Thread"></a>30. 用 Runnable 还是 Thread</h3><p>Java 不支持类的多重继承，但允许你调用多个接口。所以如果你要继承其他类，当然是实现Runnable接口好了。</p><h3 id="31-Java-中-Runnable-和-Callable-有什么不同"><a href="#31-Java-中-Runnable-和-Callable-有什么不同" class="headerlink" title="31. Java 中 Runnable 和 Callable 有什么不同"></a>31. Java 中 Runnable 和 Callable 有什么不同</h3><p>Runnable和 Callable 都代表那些要在不同的线程中执行的任务。Runnable 从 JDK1.0 开始就有了，Callable 是在 JDK1.5 增加的。它们的主要区别是 Callable 的 call () 方法可以返回值和抛出异常，而 Runnable 的 run ()方法没有这些功能。</p><h3 id="32-Java-中-CyclicBarrier-和-CountDownLatch-有什么不同"><a href="#32-Java-中-CyclicBarrier-和-CountDownLatch-有什么不同" class="headerlink" title="32. Java 中 CyclicBarrier 和 CountDownLatch 有什么不同"></a>32. Java 中 CyclicBarrier 和 CountDownLatch 有什么不同</h3><p>它们都是JUC下的类，CyclicBarrier 和 CountDownLatch 都可以用来让一组线程等待其它线程。区别在于CountdownLatch计数无法被重置。如果需要重置计数，请考虑使用 CyclicBarrier。 </p><h3 id="33-Java-内存模型是什么"><a href="#33-Java-内存模型是什么" class="headerlink" title="33. Java 内存模型是什么"></a>33. Java 内存模型是什么</h3><p>Java 内存模型规定和指引Java 程序在不同的内存架构、CPU 和操作系统间有确定性地行为。它在多线程的情况下尤其重要。Java内存模型对一个线程所做的变动能被其它线程可见提供了保证，它们之间是先行发生关系。这个关系定义了一些规则让程序员在并发编程时思路更清晰。</p><p>线程内的代码能够按先后顺序执行，这被称为程序次序规则。</p><p>对于同一个锁，一个解锁操作一定要发生在时间上后发生的另一个锁定操作之前，也叫做管程锁定规则。</p><p>前一个对volatile的写操作在后一个volatile的读操作之前，也叫volatile变量规则。</p><p>一个线程内的任何操作必需在这个线程的 start ()调用之后，也叫作线程启动规则。</p><p>一个线程的所有操作都会在线程终止之前，线程终止规则。</p><p>一个对象的终结操作必需在这个对象构造完成之后，也叫对象终结规则。</p><p>a先行于b，b先行于c，传递性</p><h3 id="34-什么是线程安全？Vector-是一个线程安全类吗"><a href="#34-什么是线程安全？Vector-是一个线程安全类吗" class="headerlink" title="34. 什么是线程安全？Vector 是一个线程安全类吗"></a>34. 什么是线程安全？Vector 是一个线程安全类吗</h3><p>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。一个线程安全的计数器类的同一个实例对象在被多个线程使用的情况下也不会出现计算失误。很显然你可以将集合类分成两组，线程安全和非线程安全的。Vector 是用同步方法来实现线程安全的，而和它相似的 ArrayList 不是线程安全的。</p><h3 id="35-Java-中什么是竞态条件？-举个例子说明。"><a href="#35-Java-中什么是竞态条件？-举个例子说明。" class="headerlink" title="35. Java 中什么是竞态条件？ 举个例子说明。"></a>35. Java 中什么是竞态条件？ 举个例子说明。</h3><p>竞态条件会导致程序在并发情况下出现一些 bugs。多线程对一些资源的竞争的时候就会产生竞态条件，如果首先要执行的程序竞争失败排到后面执行了，那么整个程序就会出现一些不确定的 bugs。这种 bugs 很难发现而且会重复出现，因为线程间的随机竞争。几类竞态条件check-and-act、读取-修改-写入、put-if-absent。</p><h3 id="36-Java-中如何停止一个线程"><a href="#36-Java-中如何停止一个线程" class="headerlink" title="36. Java 中如何停止一个线程"></a>36. Java 中如何停止一个线程</h3><p>当 run () 或者 call () 方法执行完的时候线程会自动结束，如果要手动结束一个线程，你可以用 volatile 布尔变量来退出 run ()方法的循环或者是取消任务来中断线程。其他情形：异常 - 停止执行 休眠 - 停止执行 阻塞 - 停止执行</p><h3 id="37-一个线程运行时发生异常会怎样"><a href="#37-一个线程运行时发生异常会怎样" class="headerlink" title="37. 一个线程运行时发生异常会怎样"></a>37. 一个线程运行时发生异常会怎样</h3><p>简单的说，如果异常没有被捕获该线程将会停止执行。Thread.UncaughtExceptionHandler 是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口。当一个未捕获异常将造成线程中断的时候 JVM 会使用 Thread.getUncaughtExceptionHandler ()来查询线程的 UncaughtExceptionHandler 并将线程和异常作为参数传递给 handler 的 uncaughtException ()方法进行处理。</p><h3 id="38-如何在两个线程间共享数据？"><a href="#38-如何在两个线程间共享数据？" class="headerlink" title="38. 如何在两个线程间共享数据？"></a>38. 如何在两个线程间共享数据？</h3><p>通过共享对象来实现这个目的，或者是使用像阻塞队列这样并发的数据结构</p><h3 id="39-Java-中-notify-和-notifyAll-有什么区别"><a href="#39-Java-中-notify-和-notifyAll-有什么区别" class="headerlink" title="39. Java 中 notify 和 notifyAll 有什么区别"></a>39. Java 中 notify 和 notifyAll 有什么区别</h3><p>notify ()方法不能唤醒某个具体的线程，所以只有一个线程在等待的时候它才有用武之地。而 notifyAll ()唤醒所有线程并允许他们争夺锁确保了至少有一个线程能继续运行。</p><h3 id="40-为什么-wait-notify-和-notifyAll-这些方法不在-thread-类里面"><a href="#40-为什么-wait-notify-和-notifyAll-这些方法不在-thread-类里面" class="headerlink" title="40. 为什么 wait, notify 和 notifyAll 这些方法不在 thread 类里面"></a>40. 为什么 wait, notify 和 notifyAll 这些方法不在 thread 类里面</h3><p>一个很明显的原因是 JAVA 提供的锁是对象级的而不是线程级的。如果线程需要等待某些锁那么调用对象中的 wait ()方法就有意义了。如果 wait ()方法定义在 Thread 类中，线程正在等待的是哪个锁就不明显了。简单的说，由于 wait，notify 和 notifyAll 都是锁级别的操作，所以把他们定义在 Object 类中因为锁属于对象。</p><h3 id="41-什么是-FutureTask？"><a href="#41-什么是-FutureTask？" class="headerlink" title="41. 什么是 FutureTask？"></a>41. 什么是 FutureTask？</h3><p>在 Java 并发程序中 FutureTask 表示一个可以取消的异步运算。它有启动和取消运算、查询运算是否完成和取回运算结果等方法。只有当运算完成的时候结果才能取回，如果运算尚未完成 get 方法将会阻塞。一个 FutureTask 对象可以对调用了 Callable 和 Runnable 的对象进行包装，由于 FutureTask 也是调用了 Runnable 接口所以它可以提交给 Executor 来执行。</p><h3 id="42-Java-中-interrupted-和-isInterruptedd-方法的区别"><a href="#42-Java-中-interrupted-和-isInterruptedd-方法的区别" class="headerlink" title="42. Java 中 interrupted 和 isInterruptedd 方法的区别"></a>42. Java 中 interrupted 和 isInterruptedd 方法的区别</h3><p>interrupted是静态方法，isInterruptedd是一个普通方法</p><p>如果当前线程被中断（没有抛出中断异常，否则中断状态就会被清除），你调用interrupted方法，第一次会返回true。然后，当前线程的中断状态被方法内部清除了。第二次调用时就会返回false。如果你刚开始一直调用isInterrupted，则会一直返回true，除非中间线程的中断状态被其他操作清除了。也就是说isInterrupted 只是简单的查询中断状态，不会对状态进行修改。</p><h3 id="43-为什么-wait-和-notify-方法要在同步块中调用"><a href="#43-为什么-wait-和-notify-方法要在同步块中调用" class="headerlink" title="43. 为什么 wait 和 notify 方法要在同步块中调用"></a>43. 为什么 wait 和 notify 方法要在同步块中调用</h3><p>如果不这么做，代码会抛出 IllegalMonitorStateException异常。还有一个原因是为了避免 wait 和 notify 之间产生竞态条件。</p><h3 id="44-为什么你应该在循环中检查等待条件？"><a href="#44-为什么你应该在循环中检查等待条件？" class="headerlink" title="44. 为什么你应该在循环中检查等待条件？"></a>44. 为什么你应该在循环中检查等待条件？</h3><p>处于等待状态的线程可能会收到错误警报和伪唤醒，如果不在循环中检查等待条件，程序就会在没有满足结束条件的情况下退出。因此，当一个等待线程醒来时，不能认为它原来的等待状态仍然是有效的，在 notify 方法调用之后和等待线程醒来之前这段时间它可能会改变。这就是在循环中使用 wait 方法效果更好的原因。</p><h3 id="45-Java-中的同步集合与并发集合有什么区别"><a href="#45-Java-中的同步集合与并发集合有什么区别" class="headerlink" title="45. Java 中的同步集合与并发集合有什么区别"></a>45. Java 中的同步集合与并发集合有什么区别</h3><p>同步集合与并发集合都为多线程和并发提供了合适的线程安全的集合，不过并发集合的可扩展性更高。在 Java1.5 之前程序员们只有同步集合来用且在多线程并发的时候会导致争用，阻碍了系统的扩展性。Java1.5加入了并发集合像 ConcurrentHashMap，不仅提供线程安全还用锁分离和内部分区等现代技术提高了可扩展性。它们大部分位于JUC包下。</p><h3 id="46-什么是线程池？-为什么要使用它？"><a href="#46-什么是线程池？-为什么要使用它？" class="headerlink" title="46. 什么是线程池？ 为什么要使用它？"></a>46. 什么是线程池？ 为什么要使用它？</h3><p>创建线程要花费昂贵的资源和时间，如果任务来了才创建线程那么响应时间会变长，而且一个进程能创建的线程数有限。为了避免这些问题，在程序启动的时候就创建若干线程来响应处理，它们被称为线程池，里面的线程叫工作线程。从 JDK1.5 开始，Java API 提供了 Executor 框架让你可以创建不同的线程池。比如单线程池，每次处理一个任务；数目固定的线程池或者是缓存线程池（一个适合很多生存期短的任务的程序的可扩展线程池）。</p><h3 id="47-如何写代码来解决生产者消费者问题？"><a href="#47-如何写代码来解决生产者消费者问题？" class="headerlink" title="47. 如何写代码来解决生产者消费者问题？"></a>47. 如何写代码来解决生产者消费者问题？</h3><p>在现实中你解决的许多线程问题都属于生产者消费者模型，就是一个线程生产任务供其它线程进行消费，你必须知道怎么进行线程间通信来解决这个问题。比较低级的办法是用 wait 和 notify 来解决这个问题，比较赞的办法是用 Semaphore 或者 BlockingQueue 来实现生产者消费者模型。</p><h3 id="48-如何避免死锁？"><a href="#48-如何避免死锁？" class="headerlink" title="48.如何避免死锁？"></a>48.如何避免死锁？</h3><p>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。这是一个严重的问题，因为死锁会让你的程序挂起无法完成任务，死锁的发生必须满足以下四个条件：</p><p>互斥条件：一个资源每次只能被一个进程使用。</p><p>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</p><p>不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。</p><p>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</p><p>避免死锁最简单的方法就是阻止循环等待条件，将系统中所有的资源设置标志位、排序，规定所有的进程申请资源必须以一定的顺序（升序或降序）做操作来避免死锁。</p><h3 id="49-Java-中活锁和死锁有什么区别？"><a href="#49-Java-中活锁和死锁有什么区别？" class="headerlink" title="49. Java 中活锁和死锁有什么区别？"></a>49. Java 中活锁和死锁有什么区别？</h3><p>活锁和死锁类似，不同之处在于处于活锁的线程或进程的状态是不断改变的，活锁可以认为是一种特殊的饥饿。一个现实的活锁例子是两个人在狭小的走廊碰到，两个人都试着避让对方好让彼此通过，但是因为避让的方向都一样导致最后谁都不能通过走廊。简单的说就是，活锁和死锁的主要区别是前者进程的状态可以改变但是却不能继续执行。</p><h3 id="50-怎么检测一个线程是否拥有锁"><a href="#50-怎么检测一个线程是否拥有锁" class="headerlink" title="50. 怎么检测一个线程是否拥有锁"></a>50. 怎么检测一个线程是否拥有锁</h3><p>在 java.lang.Thread 中有一个方法叫 holdsLock，当且仅当当前线程拥有某个具体对象的锁时它返回true。</p><h3 id="51-你如何在-Java-中获取线程堆栈"><a href="#51-你如何在-Java-中获取线程堆栈" class="headerlink" title="51. 你如何在 Java 中获取线程堆栈"></a>51. 你如何在 Java 中获取线程堆栈</h3><p>在 Linux 下，你可以通过命令 kill -3 PID （Java 进程的进程 ID）来获取 Java 应用的 dump 文件。在 Windows 下，你可以按下 Ctrl + Break 来获取。这样 JVM 就会将线程的 dump 文件打印到标准输出或错误文件中，它可能打印在控制台或者日志文件中，具体位置依赖应用的配置。</p><h3 id="52-Java-中-synchronized-和-ReentrantLock-有什么不同"><a href="#52-Java-中-synchronized-和-ReentrantLock-有什么不同" class="headerlink" title="52.Java 中 synchronized 和 ReentrantLock 有什么不同"></a>52.Java 中 synchronized 和 ReentrantLock 有什么不同</h3><p>Java 在过去很长一段时间只能通过 synchronized 关键字来实现互斥，它有一些缺点。比如你不能扩展锁之外的方法或者块边界，尝试获取锁时不能中途取消等。Java 5 通过 Lock 接口提供了更复杂的控制来解决这些问题。 ReentrantLock 类实现了 Lock，它拥有与 synchronized 相同的并发性和内存语义且它还具有可扩展性。</p><h3 id="53-有三个线程-T1，T2，T3，怎么确保它们按顺序执行"><a href="#53-有三个线程-T1，T2，T3，怎么确保它们按顺序执行" class="headerlink" title="53.有三个线程 T1，T2，T3，怎么确保它们按顺序执行"></a>53.有三个线程 T1，T2，T3，怎么确保它们按顺序执行</h3><p>可以用线程类的 join ()方法。具体操作是在T3的run方法中调用t2.join()，让t2执行完再执行t3；T2的run方法中调用t1.join()，让t1执行完再执行t2。这样就按T1，T2，T3的顺序执行了</p><h3 id="54-Thread-类中的-yield-方法有什么作用"><a href="#54-Thread-类中的-yield-方法有什么作用" class="headerlink" title="54.Thread 类中的 yield 方法有什么作用"></a>54.Thread 类中的 yield 方法有什么作用</h3><p>Yield 方法可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。它是一个静态方法而且只保证当前线程放弃 CPU 占用而不能保证使其它线程一定能占用 CPU，执行 yield的线程有可能在进入到暂停状态后马上又被执行。</p><h3 id="55-Java-中-ConcurrentHashMap-的并发度是什么"><a href="#55-Java-中-ConcurrentHashMap-的并发度是什么" class="headerlink" title="55.Java 中 ConcurrentHashMap 的并发度是什么"></a>55.Java 中 ConcurrentHashMap 的并发度是什么</h3><p>ConcurrentHashMap 把实际 map 划分成若干部分来实现它的可扩展性和线程安全。这种划分是使用并发度获得的，它是 ConcurrentHashMap 类构造函数的一个可选参数，默认值为 16，这样在多线程情况下就能避免争用。</p><h3 id="56-Java-中-Semaphore是什么"><a href="#56-Java-中-Semaphore是什么" class="headerlink" title="56.Java 中 Semaphore是什么"></a>56.Java 中 Semaphore是什么</h3><p>JUC下的一种新的同步类，它是一个计数信号。从概念上讲，Semaphore信号量维护了一个许可集合。如有必要，在许可可用前会阻塞每一个 acquire，然后再获取该许可。每个 release添加一个许可，从而可能释放一个正在阻塞的获取者。但是，不使用实际的许可对象，Semaphore 只对可用许可的号码进行计数，并采取相应的行动。信号量常常用于多线程的代码中，比如数据库连接池。</p><h3 id="57-如果你提交任务时，线程池队列已满。会发会生什么？"><a href="#57-如果你提交任务时，线程池队列已满。会发会生什么？" class="headerlink" title="57.如果你提交任务时，线程池队列已满。会发会生什么？"></a>57.如果你提交任务时，线程池队列已满。会发会生什么？</h3><p>这个问题问得很狡猾，许多程序员会认为该任务会阻塞直到线程池队列有空位。事实上如果一个任务不能被调度执行那么 ThreadPoolExecutor’s submit ()方法将会抛出一个 RejectedExecutionException 异常。</p><h3 id="58-Java-线程池中-submit-和-execute-方法有什么区别"><a href="#58-Java-线程池中-submit-和-execute-方法有什么区别" class="headerlink" title="58.Java 线程池中 submit () 和 execute ()方法有什么区别"></a>58.Java 线程池中 submit () 和 execute ()方法有什么区别</h3><p>两个方法都可以向线程池提交任务，execute ()方法的返回类型是 void，它定义在 Executor 接口中， 而 submit ()方法可以返回持有计算结果的 Future 对象，它定义在 ExecutorService 接口中，它扩展了 Executor 接口，其它线程池类像 ThreadPoolExecutor 和 ScheduledThreadPoolExecutor 都有这些方法。</p><h3 id="59-什么是阻塞式方法？"><a href="#59-什么是阻塞式方法？" class="headerlink" title="59.什么是阻塞式方法？"></a>59.什么是阻塞式方法？</h3><p>阻塞式方法是指程序会一直等待该方法完成期间不做其他事情，ServerSocket 的 accept ()方法就是一直等待客户端连接。这里的阻塞是指调用结果返回之前，当前线程会被挂起，直到得到结果之后才会返回。此外，还有异步和非阻塞式方法在任务完成前就返回。</p><h3 id="60-Swing-是线程安全的吗？"><a href="#60-Swing-是线程安全的吗？" class="headerlink" title="60.Swing 是线程安全的吗？"></a>60.Swing 是线程安全的吗？</h3><p>你可以很肯定的给出回答，Swing 不是线程安全的。你不能通过任何线程来更新 Swing 组件，如 JTable、JList 或 JPanel，事实上，它们只能通过 GUI 或 AWT 线程来更新。这就是为什么 Swing 提供 invokeAndWait() 和 invokeLater() 方法来获取其他线程的 GUI 更新请求。这些方法将更新请求放入 AWT 的线程队列中，可以一直等待，也可以通过异步更新直接返回结果。</p><h3 id="61-Java-中-invokeAndWait-和-invokeLater-有什么区别"><a href="#61-Java-中-invokeAndWait-和-invokeLater-有什么区别" class="headerlink" title="61.Java 中 invokeAndWait 和 invokeLater 有什么区别"></a>61.Java 中 invokeAndWait 和 invokeLater 有什么区别</h3><p>这两个方法是 Swing API 提供给 Java 开发者用来从当前线程而不是事件派发线程更新 GUI 组件用的。InvokeAndWait ()同步更新 GUI 组件，比如一个进度条，一旦进度更新了，进度条也要做出相应改变。如果进度被多个线程跟踪，那么就调用 invokeAndWait ()方法请求事件派发线程对组件进行相应更新。而 invokeLater ()方法是异步调用更新组件的。</p><h3 id="62-Swing-API-中那些方法是线程安全的？"><a href="#62-Swing-API-中那些方法是线程安全的？" class="headerlink" title="62.Swing API 中那些方法是线程安全的？"></a>62.Swing API 中那些方法是线程安全的？</h3><p>虽然Swing不是线程安全的但是有一些方法是可以被多线程安全调用的。如repaint ()， revalidate ()。 JTextComponent 的 setText ()方法和 JTextArea 的 insert () 和 append () 方法也是线程安全的。</p><h3 id="63-如何在-Java-中创建-Immutable-对象"><a href="#63-如何在-Java-中创建-Immutable-对象" class="headerlink" title="63.如何在 Java 中创建 Immutable 对象"></a>63.如何在 Java 中创建 Immutable 对象</h3><p>Immutable 对象可以在没有同步的情况下共享，降低了对该对象进行并发访问时的同步化开销。可是 Java 没有@Immutable 这个注解符，要创建不可变类，要实现下面几个步骤：通过构造方法初始化所有成员、对变量不要提供 setter 方法、将所有的成员声明为私有的，这样就不允许直接访问这些成员、在 getter 方法中，不要直接返回对象本身，而是克隆对象，并返回对象的拷贝。</p><h3 id="64-Java-中的-ReadWriteLock-是什么？"><a href="#64-Java-中的-ReadWriteLock-是什么？" class="headerlink" title="64.Java 中的 ReadWriteLock 是什么？"></a>64.Java 中的 ReadWriteLock 是什么？</h3><p>一般而言，读写锁是用来提升并发程序性能的锁分离技术的成果。Java 中的 ReadWriteLock 是 Java 5 中新增的一个接口，一个 ReadWriteLock 维护一对关联的锁，一个用于只读操作一个用于写。在没有写线程的情况下一个读锁可能会同时被多个读线程持有。写锁是独占的，你可以使用 JDK 中的 ReentrantReadWriteLock 来实现这个规则，它最多支持 65535 个写锁和 65535 个读锁。</p><h3 id="65-多线程中的忙循环是什么"><a href="#65-多线程中的忙循环是什么" class="headerlink" title="65.多线程中的忙循环是什么?"></a>65.多线程中的忙循环是什么?</h3><p>忙循环就是程序员用循环让一个线程等待，不像传统方法 wait ()， sleep () 或 yield () 它们都放弃了 CPU 控制，而忙循环不会放弃 CPU，它就是在运行一个空循环。这么做的目的是为了保留 CPU 缓存，在多核系统中，一个等待线程醒来的时候可能会在另一个内核运行，这样会重建缓存。为了避免重建缓存和减少等待重建的时间就可以使用它了。</p><h3 id="66-volatile-变量和-atomic-变量有什么不同"><a href="#66-volatile-变量和-atomic-变量有什么不同" class="headerlink" title="66.volatile 变量和 atomic 变量有什么不同"></a>66.volatile 变量和 atomic 变量有什么不同</h3><p>volatile 变量和 atomic 变量看起来很像，但功能却不一样。volatile 变量可以确保先行关系，即写操作会发生在后续的读操作之前， 但它并不能保证原子性。例如用 volatile 修饰 count 变量那么 count++ 操作并不是原子性的。而 AtomicInteger 类提供的 atomic 方法可以让这种操作具有原子性如 getAndIncrement ()方法会原子性的进行增量操作把当前值加一，其它数据类型和引用变量也可以进行相似操作。</p><h3 id="67-如果同步块内的线程抛出异常会发生什么？"><a href="#67-如果同步块内的线程抛出异常会发生什么？" class="headerlink" title="67.如果同步块内的线程抛出异常会发生什么？"></a>67.如果同步块内的线程抛出异常会发生什么？</h3><p>无论你的同步块是正常还是异常退出的，里面的线程都会释放锁，所以对比锁接口我更喜欢同步块，因为它不用我花费精力去释放锁，该功能可以在 finally block 里释放锁实现。</p><h3 id="68-如何在-Java-中创建线程安全的-Singleton"><a href="#68-如何在-Java-中创建线程安全的-Singleton" class="headerlink" title="68.如何在 Java 中创建线程安全的 Singleton"></a>68.如何在 Java 中创建线程安全的 Singleton</h3><p>5种，急加载，同步方法，双检锁，静态内部类，枚举</p><h3 id="69-如何强制启动一个线程？"><a href="#69-如何强制启动一个线程？" class="headerlink" title="69.如何强制启动一个线程？"></a>69.如何强制启动一个线程？</h3><p>这个问题就像是如何强制进行 Java 垃圾回收，目前还没有觉得方法，虽然你可以使用 System.gc ()来进行垃圾回收，但是不保证能成功。在 Java 里面没有办法强制启动一个线程，它是被线程调度器控制着且 Java 没有公布相关的 API。</p><h3 id="70-Java-中的-fork-join-框架是什么？"><a href="#70-Java-中的-fork-join-框架是什么？" class="headerlink" title="70.Java 中的 fork join 框架是什么？"></a>70.Java 中的 fork join 框架是什么？</h3><p>fork join 框架是 JDK7 中出现的一款高效的工具，Java 开发人员可以通过它充分利用现代服务器上的多处理器。它是专门为了那些可以递归划分成许多子模块设计的，目的是将所有可用的处理能力用来提升程序的性能。fork join 框架一个巨大的优势是它使用了工作窃取算法，可以完成更多任务的工作线程可以从其它线程中窃取任务来执行。</p><h3 id="71-Java-多线程中调用-wait-和-sleep-方法有什么不同？"><a href="#71-Java-多线程中调用-wait-和-sleep-方法有什么不同？" class="headerlink" title="71.Java 多线程中调用 wait () 和 sleep ()方法有什么不同？"></a>71.Java 多线程中调用 wait () 和 sleep ()方法有什么不同？</h3><p>Java 程序中 wait 和 sleep 都会造成某种形式的暂停，它们可以满足不同的需要。wait ()方法意味着条件等待，如果等待条件为真且其它线程被唤醒时它会释放锁，而 sleep ()方法仅仅释放 CPU 资源或者让当前线程短暂停顿，但不会释放锁。</p><h3 id="72-可重入锁"><a href="#72-可重入锁" class="headerlink" title="72.可重入锁"></a>72.可重入锁</h3><p>可重入锁：如果当前线程已经获得了某个监视器对象所持有的锁，那么该线程在该方法中调用另外一个同步方法也同样持有该锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> synchrnozied <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    xxxxxx;</span><br><span class="line">    test2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    yyyyy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面代码段中，执行 test 方法需要获得当前对象作为监视器的对象锁，但方法中又调用了 test2 的同步方法。</p><p>如果锁是具有可重入性的话，那么该线程在调用 test2 时并不需要再次获得当前对象的锁，可以直接进入 test2 方法进行操作。</p><p>如果锁是不具有可重入性的话，那么该线程在调用test2前会等待当前对象锁的释放，实际上该对象锁已被当前线程所持有，不可能再次获得。</p><p>如果锁是不具有可重入性特点的话，那么线程在调用同步方法、含有锁的方法时就会产生死锁。</p><h3 id="73-同步方法和同步代码块"><a href="#73-同步方法和同步代码块" class="headerlink" title="73. 同步方法和同步代码块"></a>73. 同步方法和同步代码块</h3><p>同步方法默认用this或者当前类class对象作为锁；<br>同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法。</p><hr><h2 id="四、Java虚拟机"><a href="#四、Java虚拟机" class="headerlink" title="四、Java虚拟机"></a>四、Java虚拟机</h2><h3 id="0-对哪些区域回收"><a href="#0-对哪些区域回收" class="headerlink" title="0. 对哪些区域回收"></a>0. 对哪些区域回收</h3><p>Java运行时数据区域：程序计数器、JVM栈、本地方法栈、方法区和堆。</p><p>由于程序计数器、JVM栈、本地方法栈3个区域随线程而生随线程而灭，对这几个区域内存的回收和分配具有确定性。而方法区和堆则不一样，程序需要在运行时才知道创建哪些对象，对这部分内存的分配是动态的，GC关注的也就是这部分内存。</p><h3 id="1-主动GC"><a href="#1-主动GC" class="headerlink" title="1. 主动GC"></a>1. 主动GC</h3><p>调用system.gc() Runtime.getRuntime.gc()</p><h3 id="2-垃圾回收"><a href="#2-垃圾回收" class="headerlink" title="2. 垃圾回收"></a>2. 垃圾回收</h3><p>释放那些不在持有任何引用的对象的内存</p><h3 id="3-怎样判断是否需要收集"><a href="#3-怎样判断是否需要收集" class="headerlink" title="3. 怎样判断是否需要收集"></a>3. 怎样判断是否需要收集</h3><ul><li>引用计数法：对象没有任何引用与之关联(无法解决循环引用)</li></ul><p>ext：Python使用引用计数法</p><ul><li>可达性分析法：通过一组称为GC Root的对象为起点,从这些节点向下搜索，如果某对象不能从这些根对象的一个(至少一个)所到达,则判定该对象应当回收。</li></ul><p>ext：可作为GCRoot的对象：虚拟机栈中引用的对象。方法区中类静态属性引用的对象，方法区中类常量引用的对象，本地方法栈中JNI引用的对象</p><h3 id="4-对象的自我救赎"><a href="#4-对象的自我救赎" class="headerlink" title="4.对象的自我救赎"></a>4.对象的自我救赎</h3><p>即使在可达性算法中判定为不可达时，也并非一定被回收。对象存在自我救赎的可能。要真正宣告对象的死亡，需要经历2次标记的过程。如果对象经过可达性分析法发现不可达时，对象将被第一次标记被进行筛选，筛选的条件是此对象是否有必要执行finalize方法。如果对象没有重写finalize方法或finalize方法已经被JVM调用过，则判定为不需要执行。</p><p>如果对象被判定为需要执行finalize方法，该对象将被放置在一个叫做F-Queue的队列中，JVM会建立一个低优先级的线程执行finalize方法，如果对象想要完成自我救赎需要在finalize方法中与引用链上的对象关联，比如把自己也就是this赋值给某个类变量。当GC第二次对F-Queue中对象标记时，该对象将被移出“即将回收”的集合，完成自我救赎。简言之，finalize方法是对象逃脱死亡命运的最后机会，并且任何对象的finalize方法只会被JVM调用一次。</p><h3 id="5-垃圾回收算法"><a href="#5-垃圾回收算法" class="headerlink" title="5.垃圾回收算法"></a>5.垃圾回收算法</h3><p>Mark-Sweep法：标记清除法 容易产生内存碎片，导致分配较大对象时没有足够的连续内存空间而提前出发GC。这里涉及到另一个问题，即对象创建时的内存分配，对象创建内存分配主要有2种方法，分别是指针碰撞法和空闲列表法。指针碰撞法：使用的内存在一侧，空闲的在另一侧，中间使用一个指针作为分界点指示器，对象内存分配时只要指针向空闲的移动对象大小的距离即可。<br>空闲列表法：使用的和空闲的内存相互交错无法进行指针碰撞，JVM必须维护一个列表记录哪些内存块可用，分配时从列表中找出一个足够的分配给对象，并更新列表记录。所以，当采用Mark-Sweep算法的垃圾回收器时，内存分配通常采用空闲列表法。</p><p>Copy法：将内存分为2块，每次使用其中的一块，当一块满了，将存活的对象复制到另一块，把使用过的那一块一次性清除。显然，Copy法解决了内存碎片的问题，但算法的代价是内存缩小为原来的一半。现代的垃圾收集器对新生代采用的正是Copy算法。但通常不执行1:1的策略，HotSpot虚拟机默认Eden区Survivor区8:1。每次使用Eden和其中一块Survivor区。也就是说新生代可用内存为新生代内存空间的90%。</p><p>Mark-Compact法：标记整理法。它的第一阶段与Mark-Sweep法一样，但不直接清除，而是将存活对象向一端移动，然后清除端边界以外的内存，这样也不存在内存碎片。</p><p>分代收集算法：将堆内存划分为新生代，老年代，根据新生代老年代的特点选取不同的收集算法。因为新生代对象大多朝生夕死，而老年代对象存活率高，没有额外空间进行分配担保，通常对新生代执行复制算法，老年代执行Mark-Sweep算法或Mark-Compact算法。</p><h3 id="6-垃圾收集器"><a href="#6-垃圾收集器" class="headerlink" title="6.垃圾收集器"></a>6.垃圾收集器</h3><p>通常来说，新生代老年代使用不同的垃圾收集器。新生代的垃圾收集器有Serial（单线程）、ParNew（Serial的多线程版本）、ParallelScavenge（吞吐量优先的垃圾收集器），老年代有SerialOld（单线程老年代）、ParallelOld（与ParallelScavenge搭配的多线程执行标记整理算法的老年代收集器）、CMS（标记清除算法，容易产生内存碎片，可以开启内存整理的参数），以及当前最先进的垃圾收集器G1，G1通常面向服务器端的垃圾收集器，在我自己的Java应用程序中通过-XX:+PrintGCDetails，发现自己的垃圾收集器是使用了ParallelScavenge + ParallelOld的组合。</p><h3 id="7-不同垃圾回收算法对比"><a href="#7-不同垃圾回收算法对比" class="headerlink" title="7. 不同垃圾回收算法对比"></a>7. 不同垃圾回收算法对比</h3><ul><li>标记清除法(Mark-Sweeping):易产生内存碎片</li><li>复制回收法(Copying)：为了解决Mark-Sweep法而提出,内存空间减至一半</li><li>标记压缩法(Mark-Compact):为了解决Copying法的缺陷,标记后移动到一端再清除</li><li>分代回收法(GenerationalCollection):新生代对象存活周期短,需要大量回收对象,需要复制的少,执行copy算法;老年代对象存活周期相对长,回收少量对象,执行mark-compact算法.新生代划分：较大的eden区 和 2个survivor区</li></ul><h3 id="8-内存分配"><a href="#8-内存分配" class="headerlink" title="8. 内存分配"></a>8. 内存分配</h3><ul><li><p>新生代的三部分 |Eden Space|From Space|To Space|，对象主要分配在新生代的Eden区</p></li><li><p>大对象直接进入老年代<br>大对象比如大数组直接进入老年代，可通过虚拟机参数-XX：PretenureSizeThreshold参数设置</p></li><li><p>长期存活的对象进入老年代<br>ext：虚拟机为每个对象定义一个年龄计数器，如果对象在Eden区出生并经过一次MinorGC仍然存活，将其移入Survivor的To区，GC完成标记互换后，相当于存活的对象进入From区，对象年龄加1，当增加到默认15岁时，晋升老年代。可通过-XX：MaxTenuringThreshold设置</p></li><li><p>GC的过程：GC开始前，对象只存在于Eden区和From区，To区逻辑上始终为空。对象分配在Eden区，Eden区空间不足，发起MinorGC，将Eden区所有存活的对象复制到To区，From区存活的对象根据年龄判断去向，若到达年龄阈值移入老年代，否则也移入To区，GC完成后Eden区和From区被清空，From区和To区标记互换。对象每在Survivor区躲过一次MinorGC年龄加一。MinorGC将重复这样的过程，直到To区被填满，To区满了以后，将把所有对象移入老年代。</p></li><li><p>动态对象年龄判定 suvivor区相同年龄对象总和大于suvivor区空间的一半,年龄大于等于该值的对象直接进入老年代</p></li><li><p>空间分配担保 在MinorGC开始前，虚拟机检查老年代最大可用连续空间是否大于新生代所有对象总空间，如果成立，MinorGC可以确保是安全的。否则，虚拟机会查看HandlePromotionFailure设置值是否允许担保失败，如果允许，继续查看老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于则尝试MinorGC，尽管这次MinorGC是有风险的。如果小于，或者HandlerPromotionFailure设置不允许，则要改为FullGC。</p></li><li><p>新生代的回收称为MinorGC,对老年代的回收成为MajorGC又名FullGC</p></li></ul><h3 id="9-关于GC的虚拟机参数"><a href="#9-关于GC的虚拟机参数" class="headerlink" title="9. 关于GC的虚拟机参数"></a>9. 关于GC的虚拟机参数</h3><p>GC相关</p><p>-XX:NewSize和-XX:MaxNewSize 新生代大小<br>-XX:SurvivorRatio Eden和其中一个survivor的比值<br>-XX：PretenureSizeThreshold 大对象进入老年代的阈值<br>-XX:MaxTenuringThreshold 晋升老年代的对象年龄</p><p>收集器设置<br>-XX:+UseSerialGC:设置串行收集器<br>-XX:+UseParallelGC:设置并行收集器<br>-XX:+UseParalledlOldGC:设置并行年老代收集器<br>-XX:+UseConcMarkSweepGC:设置并发收集器</p><p>堆大小设置</p><p>-Xmx:最大堆大小<br>-Xms:初始堆大小(最小内存值)<br>-Xmn:年轻代大小<br>-XXSurvivorRatio:3 意思是Eden:Survivor=3:2<br>-Xss栈容量</p><p>垃圾回收统计信息</p><p>-XX:+PrintGC 输出GC日志<br>-XX:+PrintGCDetails 输出GC的详细日志</p><h3 id="10-方法区的回收"><a href="#10-方法区的回收" class="headerlink" title="10. 方法区的回收"></a>10. 方法区的回收</h3><p>方法区通常会与永久代划等号，实际上二者并不等价，只不过是HotSpot虚拟机设计者用永久代实现方法区，并将GC分代扩展至方法区。<br>永久代垃圾回收通常包括两部分内容：废弃常量和无用的类。常量的回收与堆区对象的回收类似，当没有其他地方引用该字面量时，如果有必要，将被清理出常量池。</p><p>判定无用的类的3个条件：</p><p>1.该类的所有实例都已经被回收，也就是说堆中不存在该类的任何实例</p><p>2.加载该类的ClassLoader已经被回收</p><p>3.该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</p><p>当然，这也仅仅是判定，不代表立即卸载该类。</p><h3 id="11-JVM工具"><a href="#11-JVM工具" class="headerlink" title="11. JVM工具"></a>11. JVM工具</h3><p>命令行</p><ol><li>jps(jvm processor status)虚拟机进程状况工具</li><li>jstat(jvm statistics monitoring)统计信息监视</li><li>jinfo(configuration info for java)配置信息工具</li><li>jmap(memory map for java)Java内存映射工具</li><li>jhat(JVM Heap Analysis Tool)虚拟机堆转储快照分析工具</li><li>jstack(Stack Trace for Java)Java堆栈跟踪工具</li><li>HSDIS：JIT生成代码反汇编</li></ol><p>可视化</p><ol><li>JConsole(Java Monitoring and Management Console):Java监视与管理控制台</li><li>VisualVM(All-in-one Java Troubleshooting Tool):多合一故障处理工具</li></ol><h3 id="12-JVM内存结构"><a href="#12-JVM内存结构" class="headerlink" title="12. JVM内存结构"></a>12. JVM内存结构</h3><ol><li>堆:新生代和年老代</li><li>方法区(非堆):持久代, 代码缓存, 线程共享</li><li>JVM栈:中间结果,局部变量,线程隔离</li><li>本地栈:本地方法(非Java代码)</li><li>程序计数器 ：线程私有，每个线程都有自己独立的程序计数器，用来指示下一条指令的地址</li><li>注：持久代Java8消失, 取代的称为元空间(本地堆内存的一部分)</li></ol><h3 id="13-JVM的方法区"><a href="#13-JVM的方法区" class="headerlink" title="13. JVM的方法区"></a>13. JVM的方法区</h3><p>与堆一样，是线程共享的区域。方法区中存储：被虚拟机加载的类信息，常量，静态变量，JIT编译后的代码等数据。参见我是一个Java Class。</p><h3 id="14-Java类加载器"><a href="#14-Java类加载器" class="headerlink" title="14. Java类加载器"></a>14. Java类加载器</h3><p>一个jvm中默认的classloader有Bootstrap ClassLoader、Extension ClassLoader、App ClassLoader，分别各司其职： </p><ol><li>Bootstrap ClassLoader(引导类加载器) 负责加载java基础类，主要是 %JRE_HOME/lib/目录下的rt.jar、resources.jar、charsets.jar等</li><li>Extension ClassLoader(扩展类加载器) 负责加载java扩展类，主要是 %JRE_HOME/lib/ext目录下的jar等</li><li>App ClassLoader(系统类加载器) 负责加载当前java应用的classpath中的所有类。<br>classloader 加载类用的是全盘负责委托机制。 所谓全盘负责，即是当一个classloader加载一个Class的时候，这个Class所依赖的和引用的所有 Class也由这个classloader负责载入，除非是显式的使用另外一个classloader载入。<br>所以，当我们自定义的classloader加载成功了com.company.MyClass以后，MyClass里所有依赖的class都由这个classLoader来加载完成。</li></ol><h3 id="15-64-位-JVM-中，int-的长度是多大？"><a href="#15-64-位-JVM-中，int-的长度是多大？" class="headerlink" title="15. 64 位 JVM 中，int 的长度是多大？"></a>15. 64 位 JVM 中，int 的长度是多大？</h3><p>Java 中，int 类型变量的长度是一个固定值，与平台无关，都是 32 位。意思就是说，在 32 位 和 64 位 的Java 虚拟机中，int 类型的长度是相同的。</p><h3 id="16-Serial-与-Parallel-GC之间的不同之处？"><a href="#16-Serial-与-Parallel-GC之间的不同之处？" class="headerlink" title="16. Serial 与 Parallel GC之间的不同之处？"></a>16. Serial 与 Parallel GC之间的不同之处？</h3><p>Serial 与 Parallel 在GC执行的时候都会引起 stop-the-world。它们之间主要不同 serial 收集器是默认的复制收集器，执行 GC 的时候只有一个线程，而 parallel 收集器使用多个 GC 线程来执行。</p><h3 id="17-Java-中-WeakReference-与-SoftReference的区别？"><a href="#17-Java-中-WeakReference-与-SoftReference的区别？" class="headerlink" title="17.Java 中 WeakReference 与 SoftReference的区别？"></a>17.Java 中 WeakReference 与 SoftReference的区别？</h3><p>Java中一共有四种类型的引用。StrongReference、 SoftReference、 WeakReference 以及 PhantomReference。</p><p>StrongReference：Java 的默认引用实现, 它会尽可能长时间的存活于 JVM 内，当没有任何对象指向它时将会被GC回收</p><p>SoftReference：尽可能长时间保留引用，直到JVM内存不足，适合某些缓存应用</p><p>WeakReference：顾名思义, 是一个弱引用, 当所引用的对象在 JVM 内不再有强引用时, 下一次将被GC回收</p><p>PhantomReference：它是最弱的一种引用关系，也无法通过PhantomReference取得对象的实例。仅用来当该对象被回收时收到一个通知</p><p>虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一旦失去最后一个强引用，就会被 GC 回收，而 SoftReference 会尽可能长的保留引用直到 JVM 内存不足时才会被回收(虚拟机保证), 这一特性使得 SoftReference 非常适合缓存应用。</p><h3 id="18-WeakHashMap-是怎么工作的？"><a href="#18-WeakHashMap-是怎么工作的？" class="headerlink" title="18. WeakHashMap 是怎么工作的？"></a>18. WeakHashMap 是怎么工作的？</h3><p>WeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key/value 将会被回收。</p><h3 id="19-JVM-选项-XX-UseCompressedOops-有什么作用？为什么要使用？"><a href="#19-JVM-选项-XX-UseCompressedOops-有什么作用？为什么要使用？" class="headerlink" title="19. JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用？"></a>19. JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用？</h3><p>当你将你的应用从 32 位的 JVM 迁移到 64 位的 JVM 时，由于对象的指针从 32 位增加到了 64 位，因此堆内存会突然增加，差不多要翻倍。这也会对 CPU 缓存（容量比内存小很多）的数据产生不利的影响。因为，迁移到 64 位的 JVM 主要动机在于可以指定最大堆大小，通过压缩 OOP 可以节省一定的内存。通过 -XX:+UseCompressedOops 选项，JVM 会使用 32 位的 OOP，而不是 64 位的 OOP。</p><h3 id="20-怎样通过-Java-程序来判断-JVM-是-32-位-还是-64-位？"><a href="#20-怎样通过-Java-程序来判断-JVM-是-32-位-还是-64-位？" class="headerlink" title="20. 怎样通过 Java 程序来判断 JVM 是 32 位 还是 64 位？"></a>20. 怎样通过 Java 程序来判断 JVM 是 32 位 还是 64 位？</h3><p>你可以检查某些系统属性如 sun.arch.data.model 或 os.arch 来获取该信息。</p><h3 id="21-32-位-JVM-和-64-位-JVM-的最大堆内存分别是多数？"><a href="#21-32-位-JVM-和-64-位-JVM-的最大堆内存分别是多数？" class="headerlink" title="21. 32 位 JVM 和 64 位 JVM 的最大堆内存分别是多数？"></a>21. 32 位 JVM 和 64 位 JVM 的最大堆内存分别是多数？</h3><p>理论上说上 32 位的 JVM 堆内存可以到达 2^32，即 4GB，但实际上会比这个小很多。不同操作系统之间不同，如 Windows 系统大约 1.5 GB，Solaris 大约 3GB。64 位 JVM允许指定最大的堆内存，理论上可以达到 2^64，这是一个非常大的数字，实际上你可以指定堆内存大小到 100GB。甚至有的 JVM，如 Azul，堆内存到 1000G 都是可能的。</p><h3 id="22-JRE、JDK、JVM-及-JIT-之间有什么不同？"><a href="#22-JRE、JDK、JVM-及-JIT-之间有什么不同？" class="headerlink" title="22. JRE、JDK、JVM 及 JIT 之间有什么不同？"></a>22. JRE、JDK、JVM 及 JIT 之间有什么不同？</h3><p>JRE 代表 Java 运行时（Java run-time），是运行 Java 应用所必须的。JDK 代表 Java 开发工具（Java development kit），是 Java 程序的开发工具，如 Java 编译器，它也包含 JRE。JVM 代表 Java 虚拟机（Java virtual machine），它的责任是运行 Java 应用。JIT 代表即时编译（Just In Time compilation），当代码执行的次数超过一定的阈值时，会将 Java 字节码转换为本地代码，如，主要的热点代码会被准换为本地代码，这样有利大幅度提高 Java 应用的性能。</p><h3 id="23-解释-Java-堆空间及-GC？"><a href="#23-解释-Java-堆空间及-GC？" class="headerlink" title="23. 解释 Java 堆空间及 GC？"></a>23. 解释 Java 堆空间及 GC？</h3><p>当通过 Java 命令启动 Java 进程的时候，会为它分配内存。内存的一部分用于创建堆空间，当程序中创建对象的时候，就从对空间中分配内存。GC 是 JVM 内部的一个后台进程，回收无效对象的内存用于将来的分配。</p><h3 id="24-你能保证-GC-执行吗？"><a href="#24-你能保证-GC-执行吗？" class="headerlink" title="24. 你能保证 GC 执行吗？"></a>24. 你能保证 GC 执行吗？</h3><p>不能，虽然你可以调用 System.gc() 或者 Runtime.getRuntime().gc()，但是没有办法保证 GC 的执行。</p><h3 id="25-怎么获取-Java-程序使用的内存？堆使用的百分比？"><a href="#25-怎么获取-Java-程序使用的内存？堆使用的百分比？" class="headerlink" title="25. 怎么获取 Java 程序使用的内存？堆使用的百分比？"></a>25. 怎么获取 Java 程序使用的内存？堆使用的百分比？</h3><p>可以通过 java.lang.Runtime 类中与内存相关方法来获取剩余的内存，总内存及最大堆内存。通过这些方法你也可以获取到堆使用的百分比及堆内存的剩余空间。Runtime.freeMemory() 方法返回剩余空间的字节数，Runtime.totalMemory() 方法总内存的字节数，Runtime.maxMemory() 返回最大内存的字节数。</p><h3 id="26-Java-中堆和栈有什么区别？"><a href="#26-Java-中堆和栈有什么区别？" class="headerlink" title="26. Java 中堆和栈有什么区别？"></a>26. Java 中堆和栈有什么区别？</h3><p>JVM 中堆和栈属于不同的内存区域，使用目的也不同。栈常用于保存方法帧和局部变量，而对象总是在堆上分配。栈通常都比堆小，也不会在多个线程之间共享，而堆被整个 JVM 的所有线程共享。</p><h3 id="27-JVM调优"><a href="#27-JVM调优" class="headerlink" title="27. JVM调优"></a>27. JVM调优</h3><p>使用工具Jconsol、VisualVM、JProfiler等</p><p><strong>堆信息查看</strong></p><p>可查看堆空间大小分配（年轻代、年老代、持久代分配）<br>提供即时的垃圾回收功能<br>垃圾监控（长时间监控回收情况）</p><p>查看堆内类、对象信息查看：数量、类型等</p><p>对象引用情况查看</p><p>有了堆信息查看方面的功能，我们一般可以顺利解决以下问题：</p><p>  年老代年轻代大小划分是否合理<br>  内存泄漏<br>  垃圾回收算法设置是否合理</p><p><strong>线程监控</strong></p><p>线程信息监控：系统线程数量。<br>线程状态监控：各个线程都处在什么样的状态下</p><p>Dump线程详细信息：查看线程内部运行情况<br>死锁检查</p><p>热点分析</p><p>CPU热点：检查系统哪些方法占用的大量CPU时间<br>内存热点：检查哪些对象在系统中数量最大（一定时间内存活对象和销毁对象一起统计）</p><p>快照<br>系统两个不同运行时刻，对象（或类、线程等）的不同<br>举例说，我要检查系统进行垃圾回收以后，是否还有该收回的对象被遗漏下来的了。那么，我可以在进行垃圾回收前后，分别进行一次堆情况的快照，然后对比两次快照的对象情况。</p><p><strong>内存泄漏检查</strong></p><p>年老代堆空间被占满<br>持久代被占满<br>堆栈溢出<br>线程堆栈满<br>系统内存被占满</p><h3 id="28-Java中有内存泄漏吗？"><a href="#28-Java中有内存泄漏吗？" class="headerlink" title="28. Java中有内存泄漏吗？"></a>28. Java中有内存泄漏吗？</h3><p>内存泄露的定义: 当某些对象不再被应用程序所使用,但是由于仍然被引用而导致垃圾收集器不能释放。</p><p>内存泄漏的原因：对象的生命周期不同。比如说对象A引用了对象B. A的生命周期比B的要长得多，当对象B在应用程序中不会再被使用以后, 对象 A 仍然持有着B的引用. (根据虚拟机规范)在这种情况下GC不能将B从内存中释放。这种情况很可能会引起内存问题，倘若A还持有着其他对象的引用,那么这些被引用的(无用)对象也不会被回收,并占用着内存空间。甚至有可能B也持有一大堆其他对象的引用。这些对象由于被B所引用,也不会被垃圾收集器所回收，所有这些无用的对象将消耗大量宝贵的内存空间。并可能导致内存泄漏。</p><p>怎样防止：<br>1、当心集合类, 比如HashMap, ArrayList等,因为这是最容易发生内存泄露的地方.当集合对象被声明为static时,他们的生命周期一般和整个应用程序一样长。</p><h3 id="29-OOM解决办法"><a href="#29-OOM解决办法" class="headerlink" title="29. OOM解决办法"></a>29. OOM解决办法</h3><p>内存溢出的空间：Permanent Generation和Heap Space，也就是永久代和堆区</p><p><strong>1、永久代的OOM</strong></p><p>解决办法有2种：<br>a.通过虚拟机参数-XX：PermSize和-XX：MaxPermSize调整永久代大小<br>b.清理程序中的重复的Jar文件，减少类的重复加载</p><p><strong>2、堆区的溢出</strong></p><p>发生这种问题的原因是java虚拟机创建的对象太多，在进行垃圾回收之间，虚拟机分配的到堆内存空间已经用满了，与Heap Space的size有关。解决这类问题有两种思路：</p><ol><li>检查程序，看是否存在死循环或不必要地重复创建大量对象，定位原因，修改程序和算法。</li><li>通过虚拟机参数-Xms和-Xmx设置初始堆和最大堆的大小</li></ol><h3 id="30-DirectMemory直接内存"><a href="#30-DirectMemory直接内存" class="headerlink" title="30. DirectMemory直接内存"></a>30. DirectMemory直接内存</h3><p>直接内存并不是Java虚拟机规范定义的内存区域的一部分，但是这部分内存也被频繁使用，而且也可能导致OOM异常的出现。</p><p>JDK1.4引入了NIO，这是一种基于通道和缓冲区的非阻塞IO模式，它可以使用Native函数库分配直接堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，使得在某些场合显著提高性能，因为它避免了在Java堆和本地堆之间来回复制数据。</p><h3 id="31-Java-中堆和栈有什么不同"><a href="#31-Java-中堆和栈有什么不同" class="headerlink" title="31. Java 中堆和栈有什么不同"></a>31. Java 中堆和栈有什么不同</h3><p>每个线程都有自己的栈内存，用于存储本地变量，方法参数和栈调用，一个线程中存储的变量对其它线程是不可见的。而堆是所有线程共享的一片公用内存区域。对象都在堆里创建，为了提升效率线程会从堆中弄一个缓存到自己的栈，如果多个线程使用该变量就可能引发问题，这时 volatile 变量就可以发挥作用了，它要求线程从主存中读取变量的值。</p><h3 id="32-双亲委派模型中的方法"><a href="#32-双亲委派模型中的方法" class="headerlink" title="32. 双亲委派模型中的方法"></a>32. 双亲委派模型中的方法</h3><p>findLoadedClass(),LoadClass(),findBootstrapClassOrNull(),findClass(),resolveClass()</p><h3 id="33-IO模型"><a href="#33-IO模型" class="headerlink" title="33. IO模型"></a>33. IO模型</h3><p>一般来说 I/O 模型可以分为：同步阻塞，同步非阻塞，异步阻塞，异步非阻塞 四种IO模型</p><p><strong>同步阻塞 IO ：</strong><br>在此种方式下，用户进程在发起一个 IO 操作以后，必须等待 IO 操作的完成，只有当真正完成了 IO 操作以后，用户进程才能运行。 JAVA传统的 IO 模型属于此种方式！</p><p><strong>同步非阻塞 IO：</strong><br>在此种方式下，用户进程发起一个 IO 操作以后可返回做其它事情，但是用户进程需要时不时的询问 IO 操作是否就绪，这就要求用户进程不停的去询问，从而引入不必要的 CPU 资源浪费。其中目前 JAVA 的 NIO 就属于同步非阻塞 IO 。</p><p><strong>异步阻塞 IO：</strong><br>此种方式下是指应用发起一个 IO 操作以后，不等待内核 IO 操作的完成，等内核完成 IO 操作以后会通知应用程序，这其实就是同步和异步最关键的区别，同步必须等待或者主动的去询问 IO 是否完成，那么为什么说是阻塞的呢？因为此时是通过 select 系统调用来完成的，而 select 函数本身的实现方式是阻塞的，而采用 select 函数有个好处就是它可以同时监听多个文件句柄，从而提高系统的并发性！</p><p><strong>异步非阻塞 IO：</strong><br>在此种模式下，用户进程只需要发起一个 IO 操作然后立即返回，等 IO 操作真正的完成以后，应用程序会得到 IO 操作完成的通知，此时用户进程只需要对数据进行处理就好了，不需要进行实际的 IO 读写操作，因为 真正的 IO读取或者写入操作已经由 内核完成了。目前 Java7的AIO正是此种类型。</p><p>BIO即同步阻塞IO，适用于连接数目较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4之前的唯一选择，但程序直观、简单、易理解。</p><p>NIO即同步非阻塞IO，适用于连接数目多且连接比较短的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。</p><p>AIO即异步非阻塞IO，适用于连接数目多且连接比较长的架构，如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK1.7开始支持</p><h3 id="34-类加载器按照层次，从顶层到底层，分别加载哪些类？"><a href="#34-类加载器按照层次，从顶层到底层，分别加载哪些类？" class="headerlink" title="34. 类加载器按照层次，从顶层到底层，分别加载哪些类？"></a>34. 类加载器按照层次，从顶层到底层，分别加载哪些类？</h3><p>启动类加载器：负责将存放在JAVA_HOME/lib下的，或者被－Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用。</p><p>扩展类加载器：这个加载器负责加载JAVA_HOME/lib/ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器</p><p>应用程序类加载器：这个加载器是ClassLoader中getSystemClassLoader()方法的返回值，所以一般也称它为系统类加载器。它负责加载用户类路径（Classpath）上所指定的类库，可直接使用这个加载器，如果应用程序没有自定义自己的类加载器，一般情况下这个就是程序中默认的类加载器</p><p>实现自己的加载器</p><p>只需要继承ClassLoader，并覆盖findClass方法。<br>在调用loadClass方法时，会先根据委派模型在父加载器中加载，如果加载失败，则会调用自己的findClass方法来完成加载</p><hr><h2 id="五、数据库（Sql、MySQL、Redis等）"><a href="#五、数据库（Sql、MySQL、Redis等）" class="headerlink" title="五、数据库（Sql、MySQL、Redis等）"></a>五、数据库（Sql、MySQL、Redis等）</h2><h3 id="1-Statement"><a href="#1-Statement" class="headerlink" title="1. Statement"></a>1. Statement</h3><p>1.1 基本内容</p><ul><li>Statement是最基本的用法, 不传参, 采用字符串拼接，存在注入漏洞</li><li>PreparedStatement传入参数化的sql语句, 同时检查合法性, 效率高可以重用, 防止sql注入</li><li>CallableStatement接口扩展PreparedStatement，用来调用存储过程</li><li>BatchedStatement用于批量操作数据库，BatchedStatement不是标准的Statement类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallableStatement</span> <span class="keyword">extends</span> <span class="title">PreparedStatement</span> </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">PreparedStatement</span> <span class="keyword">extends</span> <span class="title">Statement</span></span></span><br></pre></td></tr></table></figure><p>1.2 Statement与PrepareStatement的区别</p><ul><li><p>创建时的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Statement statement = conn.createStatement();</span><br><span class="line">PreparedStatement preStatement = conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure></li><li><p>执行的时候</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ResultSet rSet = statement.executeQuery(sql);</span><br><span class="line">ResultSet pSet = preStatement.executeQuery();</span><br></pre></td></tr></table></figure></li></ul><p>由上可以看出，PreparedStatement有预编译的过程，已经绑定sql，之后无论执行多少遍，都不会再去进行编译，而 statement 不同，如果执行多遍，则相应的就要编译多少遍sql，所以从这点看，preStatement 的效率会比 Statement要高一些</p><ul><li>安全性</li></ul><p>PreparedStatement是预编译的，所以可以有效的防止SQL注入等问题</p><ul><li>代码的可读性和可维护性</li></ul><p>PreparedStatement更胜一筹</p><h3 id="2-游标"><a href="#2-游标" class="headerlink" title="2. 游标"></a>2. 游标</h3><h3 id="3-列出-5-个应该遵循的-JDBC-最佳实践"><a href="#3-列出-5-个应该遵循的-JDBC-最佳实践" class="headerlink" title="3. 列出 5 个应该遵循的 JDBC 最佳实践"></a>3. 列出 5 个应该遵循的 JDBC 最佳实践</h3><p>有很多的最佳实践，你可以根据你的喜好来例举。下面是一些更通用的原则：</p><p>a）使用批量的操作来插入和更新数据<br>b）使用 PreparedStatement 来避免 SQL 异常，并提高性能<br>c）使用数据库连接池<br>d）通过列名来获取结果集，不要使用列的下标来获取</p><h3 id="4-数据库索引的实现"><a href="#4-数据库索引的实现" class="headerlink" title="4. 数据库索引的实现"></a>4. 数据库索引的实现</h3><p>数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。</p><p>B树：</p><p>一棵m阶B树(balanced tree of order m)是一棵平衡的m路搜索树。它或者是空树，或者是满足下列性质的树：</p><p>1、根结点至少有两个子女；<br>2、每个非根节点所包含的关键字个数 j 满足：┌m/2┐ - 1 &lt;= j &lt;= m - 1；<br>3、除根结点以外的所有结点（不包括叶子结点）的度数正好是关键字总数加1，故内部子树个数 k 满足：┌m/2┐ &lt;= k &lt;= m ；<br>4、所有的叶子结点都位于同一层。</p><p>由于B-Tree的特性，在B-Tree中按key检索数据的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到null指针，前者查找成功，后者查找失败。</p><p>一个度为d的B-Tree，设其索引N个key，则其树高h的上限为logd((N+1)/2)，检索一个key，其查找节点个数的渐进复杂度为O(logdN)。从这点可以看出，B-Tree是一个非常有效率的索引数据结构。</p><p>B+树：</p><p>B-Tree有许多变种，其中最常见的是B+Tree，例如MySQL就普遍使用B+Tree实现其索引结构。</p><p>B+树是B树的变形，它把所有的data都放在叶子结点中，只将关键字和子女指针保存于内结点，内结点完全是索引的功能。</p><p>与B-Tree相比，B+Tree有以下不同点：</p><p>1、每个节点的指针上限为2d而不是2d+1。</p><p>2、内节点不存储data，只存储key；叶子节点存储data不存储指针。</p><p>一般在数据库系统或文件系统中使用的B+Tree结构都在经典B+Tree的基础上进行了优化，增加了顺序访问指针。</p><p>在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针</p><p>例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。</p><p>为什么B树（B+树）？</p><p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I/O消耗，相对于内存存取，I/O存取的消耗要高几个数量级，所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I/O操作次数的渐进复杂度。换句话说，索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数。</p><p>这涉及到磁盘存取原理、局部性原理和磁盘预读。</p><p>先从B-Tree分析，根据B-Tree的定义，### 可知检索一次最多需要访问h个节点。数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。**为了达到这个目的，在实际实现B-Tree还需要使用如下技巧：</p><p><strong>每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个node只需一次I/O。</strong></p><p><strong>B-Tree中一次检索最多需要h-1次I/O（根节点常驻内存），渐进复杂度为O(h)=O(logdN)。一般实际应用中，出度d是非常大的数字，通常超过100，因此h非常小（通常不超过3）。</strong></p><p>综上所述，用B-Tree作为索引结构效率是非常高的。</p><p>而红黑树这种结构，h明显要深的多。由于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，所以红黑树的I/O渐进复杂度也为O(h)，效率明显比B-Tree差很多。</p><p>至于B+Tree为什么更适合外存索引，原因和内节点出度d有关。</p><p>由于B+Tree内节点去掉了data域，因此可以拥有更大的出度，拥有更好的性能。</p><hr><h2 id="六、算法与数据结构"><a href="#六、算法与数据结构" class="headerlink" title="六、算法与数据结构"></a>六、算法与数据结构</h2><h3 id="1-二叉搜索树"><a href="#1-二叉搜索树" class="headerlink" title="1. 二叉搜索树"></a>1. 二叉搜索树</h3><p>(Binary Search Tree又名：二叉查找树,二叉排序树)它或者是一棵空树,或者是具有下列性质的二叉树： 若它的左子树不空,则左子树上所有结点的值均小于它的根结点的值；若它的右子树不空,则右子树上所有结点的值均大于它的根结点的值；它的左、右子树也分别为二叉搜索树。</p><h3 id="2-RBT红黑树"><a href="#2-RBT红黑树" class="headerlink" title="2. RBT红黑树"></a>2. RBT红黑树</h3><p>红黑树是一棵二叉搜索树，它在每个结点上增加一个存储位来表示结点的颜色，可以是RED或BLACK。通过对任何一条从根到叶子的简单路径上各个结点的颜色进行约束，红黑树没有一条路径会比其他路径长出2倍，所以红黑树是近似平衡的，使得红黑树的查找、插入、删除等操作的时间复杂度最坏为O(log n)，但需要注意到在红黑树上执行插入或删除后将不在满足红黑树性质，恢复红黑树的属性需要少量(O(log<br>n))的颜色变更(实际是非常快速的)和不超过三次树旋转(对于插入操作是两次)。虽然插入和删除很复杂，但操作时间仍可以保持为 O(log n) 次。具体如何保证？引出红黑树的5个性质。</p><p>红黑树的5个性质：满足以下五个性质的二叉搜索树</p><ol><li>每个结点或是红色的或是黑色的</li><li>根结点是黑色的</li><li>每个叶结点是黑色的</li><li>如果一个结点是红色的,则它的两个子结点是黑色的</li><li>对于每个结点,从该结点到其后代叶结点的简单路径上,均包含相同数目的黑色结点</li></ol><p>插入操作：</p><p>由于性质的约束，插入的结点都是红色的。插入时性质1、3始终保持。破坏性质2当且仅当当前插入结点为根节点。变一下颜色即可。如果是破坏性质4或5，则需要旋转和变色来继续满足红黑树的性质。下面说一说插入的几种情况，约定当前插入结点为N，其父结点为P，叔叔为U，祖父为G</p><p>情形1：树空，直接插入违反性质1，将红色改黑。</p><p>情形2：N的父结点为黑，不必修改，直接插入</p><p>从情形3开始的情形假定N结点的父结点P为红色，所以存在G，并且G为黑色。且N存在一个叔叔结点U，尽管U可能为叶结点。</p><p>情形3：P为红，U为红（G结点一定存在且为黑）这里不论P是G的左孩子还是右孩子；不论N是P的左孩子还是右孩子。</p><p>首先把P、U改黑，G改红，并以G作为一个新插入的红结点重新进行各种情况的检查，若一路检索至根节点还未结束，则将根结点变黑。</p><p>情形4：P为红，U为黑或不存在（G结点一定存在且为黑），且P为G的左孩子，N为P的左孩子（或者P为G的右孩子，N为P的右孩子，保证同向的）。<br>P、G右旋并将P、G变相反色。因为P取代之前黑G的位置，所以P变黑可以理解，而G变红是为了不违反性质5。</p><p>情形5：P为红，U为黑或不存在，且P为G的左孩子，N为P的右孩子（或P为G的右孩子，N为P的左孩子，保证是反向的），对N，P进行一次左旋转换为情形4</p><p>删除操作比插入复杂一些，但最多不超过三次旋转可以让红黑树恢复平衡。</p><p>其他</p><ul><li>黑高从某个结点x出发(不含x)到达一个叶结点的任意一条简单路径上的黑色结点个数称为该结点的黑高。红黑树的黑高为其根结点的黑高。</li><li>一个具有n个内部结点的红黑树的高度h&lt;=2lg(n+1)</li><li>结点的属性(五元组):color key left right p</li><li>动态集合操作最坏时间复杂度为O(lgn)</li></ul><h3 id="3-排序算法"><a href="#3-排序算法" class="headerlink" title="3. 排序算法"></a>3. 排序算法</h3><ul><li><p>稳定排序:插入排序、冒泡排序、归并排序、基数排序</p></li><li><p>插入排序[稳定]<br>适用于小数组,数组已排好序或接近于排好序速度将会非常快<br>复杂度：O(n^2) - O(n) - O(n^2) - O(1)[平均 - 最好 - 最坏 - 空间复杂度]</p></li><li><p>归并排序[稳定]<br>采用分治法<br>复杂度：O(nlogn) - O(nlgn) - O(nlgn) - O(n)[平均 - 最好 - 最坏 - 空间复杂度]</p></li><li><p>冒泡排序[稳定]<br>复杂度：O(n^2) - O(n) - O(n^2) - O(1)[平均 - 最好 - 最坏 - 空间复杂度]</p></li><li><p>基数排序 分配+收集[稳定]<br>复杂度： O(d(n+r)) r为基数d为位数 空间复杂度O(n+r)</p></li><li><p>树排序[不稳定]<br>应用：TreeSet的add方法、TreeMap的put方法<br>不支持相同元素,没有稳定性问题<br>复杂度：平均最差O(nlogn)</p></li><li><p>堆排序(就地排序)[不稳定]<br>复杂度：O(nlogn) - O(nlgn) - O(nlgn) - O(1)[平均 - 最好 - 最坏 - 空间复杂度]</p></li><li><p>快速排序[不稳定]<br>复杂度：O(nlgn) - O(nlgn) - O(n^2) - O(1)[平均 - 最好 - 最坏 - 空间复杂度]<br>栈空间0(lgn) - O(n)</p></li><li><p>选择排序[不稳定]<br>复杂度：O(n^2) - O(n^2) - O(n^2) - O(1)[平均 - 最好 - 最坏 - 空间复杂度]</p></li><li><p>希尔排序[不稳定]<br>复杂度 小于O(n^2) 平均 O(nlgn) 最差O(n^s)[1&lt;s&lt;2] 空间O(1)</p></li></ul><h3 id="4-查找与散列"><a href="#4-查找与散列" class="headerlink" title="4. 查找与散列"></a>4. 查找与散列</h3><p><strong>4.1 散列函数设计</strong></p><ul><li>直接定址法:<code>f(key) = a*key+b</code></li></ul><p>简单、均匀,不易产生冲突。但需事先知道关键字的分布情况,适合查找表较小且连续的情况,故现实中并不常用</p><ul><li><p>除留余数法:<code>f(key) = key mod p (p&lt;=m) p取小于表长的最大质数 m为表长</code></p></li><li><p>DJBX33A算法(time33哈希算法<code>hash = hash*33+(unsigned int)str[i];</code></p></li></ul><p>平方取中法 折叠法 更多….</p><p><strong>4.2 冲突处理</strong></p><p>闭散列(开放地址方法):要求装填因子a较小，闭散列方法把所有记录直接存储在散列表中</p><ul><li>线性探测:易产生堆积现象(基地址不同堆积在一起)</li><li>二次探测:f(key) = (f(key)+di) % m di=1^2,-1^2,2^2,-2^2…可以消除基本聚集</li><li>随机探测:f(key) = (f(key)+di),di采用随机函数得到,可以消除基本聚集</li><li>双散列:避免二次聚集</li></ul><p>开散列(链地址法):原地处理</p><ul><li>同义词记录存储在一个单链表中,散列表中子存储单链表的头指针。</li><li>优点:无堆积 事先无需确定表长 删除结点易于实现 装载因子a&gt;=1,缺点:需要额外空间</li></ul><h3 id="5-跳表"><a href="#5-跳表" class="headerlink" title="5. 跳表"></a>5. 跳表</h3><p>为什么选择跳表？</p><p>目前经常使用的平衡数据结构有：B树，红黑树，AVL树，Splay Tree, Treep等。<br>想象一下，给你一张草稿纸，一只笔，一个编辑器，你能立即实现一颗红黑树，或者AVL树<br>出来吗？ 很难吧，这需要时间，要考虑很多细节，要参考一堆算法与数据结构之类的树，<br>还要参考网上的代码，相当麻烦。<br>用跳表吧，跳表是一种随机化的数据结构，目前开源软件 Redis 和 LevelDB 都有用到它，<br>它的效率和红黑树以及 AVL 树不相上下，但跳表的原理相当简单，只要你能熟练操作链表，<br>就能去实现一个 SkipList。</p><p>跳跃表是一种随机化数据结构，基于并联的链表，其效率可比拟于二叉查找树(对于大多数操作需要O(log n)平均时间)，并且对并发算法友好。</p><p>Skip list(跳表）是一种可以代替平衡树的数据结构，默认是按照Key值升序的。Skip list让已排序的数据分布在多层链表中，以0-1随机数决定一个数据的向上攀升与否，是一种“空间来换取时间”的一个算法，在每个节点中增加了指向下一层的指针，在插入、删除、查找时可以忽略一些不可能涉及到的结点，从而提高了效率。</p><p>在Java的API中已经有了实现：分别是<br>ConcurrentSkipListMap(在功能上对应HashTable、HashMap、TreeMap) ；<br>ConcurrentSkipListSet(在功能上对应HashSet)</p><p>Skip list的性质<br>(1) 由很多层结构组成，level是通过一定的概率随机产生的<br>(2) 每一层都是一个有序的链表，默认是升序<br>(3) 最底层(Level 1)的链表包含所有元素<br>(4) 如果一个元素出现在Level i 的链表中，则它在Level i 之下的链表也都会出现<br>(5) 每个节点包含两个指针，一个指向同一链表中的下一个元素，一个指向下面一层的元素<br>时间复杂度O(lgn) 最坏O(2lgn)</p><h3 id="6-AVL树"><a href="#6-AVL树" class="headerlink" title="6. AVL树"></a>6. AVL树</h3><p><strong>1.LL型</strong></p><p>在某一节点的左孩子的左子树上插入一个新的节点，使得该节点不再平衡。<br>举例 A B Ar Bl Br 在Bl下插入N，执行一次右旋即可，即把B变为父结点，原来的根节点A变为B的左孩子，B的右子树变为A的左子树。</p><p><strong>2.RR型</strong></p><p>与LL型是对称的，执行一次左旋即可。</p><p><strong>3.LR型</strong></p><p>指在AVL树某一结点左孩子的右子树上插入一个结点，使得该节点不在平衡。这时需要两次旋转，先左旋再右旋。</p><p><strong>4.RL型</strong></p><p>与LR对称，执行一次右旋，再执行一次左旋。</p><p><strong>删除</strong></p><p>1、被删的节点是叶子节点</p><p>将该节点直接从树中删除，并利用递归的特点和高度的变化，反向推算其父节点和祖先节点是否失衡。</p><p>2、被删的节点只有左子树或只有右子树</p><p>将左子树（右子树）替代原有节点的位置，并利用递归的特点和高度的变化，反向推算父节点和祖先节点是否失衡。</p><p>3、被删的节点既有左子树又有右子树</p><p>找到被删节点的左子树的最右端的节点，将该结点的的值赋给待删除结点，再用该结点的左孩子替换它本来的位置，然后释放该结点，并利用递归特点，反向推断父节点和祖父节点是否失衡。</p><h3 id="7-一致性Hash"><a href="#7-一致性Hash" class="headerlink" title="7. 一致性Hash"></a>7. 一致性Hash</h3><p>第一：简单介绍<br>一致性哈希算法是分布式系统中常用的算法。比如，一个分布式的存储系统，要将对象存储到具体的节点上，如果采用普通的hash方法，将数据映射到具体的节点上，如key%N，N是机器节点数。</p><p>1、考虑到比如一个服务器down掉，服务器结点N变为N-1，映射公式必须变为key%(N-1)</p><p>2、访问量加重，需要添加服务器结点，N变为N+1，映射公式变为hash(object)%(N+1)</p><p>当出现1,2的情况意味着我们的映射都将无效，对服务器来说将是一场灾难，尤其是对缓存服务器来说，因为缓存服务器映射的失效，洪水般的访问都将冲向后台服务器。</p><p>第二点：hash算法的单调性</p><p>Hash 算法的一个衡量指标是单调性，单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中。哈希的结果应能够保证原有已分配的内容可以被映射到新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。</p><p>consistent hash 也是一种hash 算法，简单的说，在移除 / 添加一个结点时，它能够尽可能小的改变已存在的映射关系，尽可能的满足单调性的要求。</p><p>第三点：将对象和服务器结点分别映射到环型空间</p><p>通常的一致性哈希做法是将 value 映射到一个 32 位的 key 值，也即是 0~2^32-1 次方的数值空间；我们可以将这个空间想象成一个首（ 0 ）尾（ 2^32-1 ）相接的圆环。</p><p>我们可以通过hash函数将我们的key映射到环型空间中，同时根据相同的哈希算法把服务器也映射到环型空间中，顺便提一下服务器或者某个计算节点的 hash 计算，一般的方法可以使用机器的 IP 地址或者机器名作为 hash 输入。</p><p>第四点：将对象映射到服务器</p><p>在这个环形空间中，如果沿着顺时针方向从对象的 key 值出发，直到遇见一个 服务器结点，那么就将该对象存储在这个服务器结点上，因为对象和服务器的hash 值是固定的，因此这个 cache 必然是唯一和确定的。</p><p>这时候考察某个服务器down机或者需要添加服务器结点，也就是移除和添加的操作，我们只需要几个对象的映射。</p><p>第五点：虚拟结点</p><p> Hash 算法的另一个指标是平衡性 (Balance)。平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用。</p><p> 对于上述的做法，可能导致某些对象都映射到某个服务器，使得分布不平衡。为此可以采用“虚拟结点”的做法。</p><p> “虚拟结点”（ virtual node ）是实际节点在 hash 空间的复制品，一实际结点对应了若干个“虚拟节点”，这个对应个数也成为“复制个数”，“虚拟节点”在 hash 空间中以 hash 值排列。引入“虚拟结点”会让我们的映射分布更为平衡一些。</p><p>引入“虚拟结点”前：<br>Hash(“192.168.1.1”);</p><p>引入“虚拟结点”后：<br>Hash(“192.168.1.1#1”);<br>Hash(“192.168.1.1#2”);</p><h3 id="8-如何判断链表是否有环"><a href="#8-如何判断链表是否有环" class="headerlink" title="8. 如何判断链表是否有环"></a>8. 如何判断链表是否有环</h3><p>方法1：快慢指针法 2.设两个工作指针p、q，p总是向前走，但q每次都从头开始走，对于每个节点，看p走的步数是否和q一样。比如p从A走到D，用了4步，而q则用了14步。因而步数不等，出现矛盾，存在环。</p><h3 id="9-熟悉哪些算法？"><a href="#9-熟悉哪些算法？" class="headerlink" title="9. 熟悉哪些算法？"></a>9. 熟悉哪些算法？</h3><ul><li>[哈希算法] 一致性哈希 time33哈希 FNV1_32_HASH</li><li>[排序算法] 快速排序</li><li>[搜索算法] DFS BFS</li><li>[最小生成树算法] Kruskal Prim</li><li>[最短路径算法] Dijkstra Floyed </li></ul><hr><h2 id="七、计算机网络"><a href="#七、计算机网络" class="headerlink" title="七、计算机网络"></a>七、计算机网络</h2><h3 id="1-停止等待协议"><a href="#1-停止等待协议" class="headerlink" title="1.停止等待协议"></a>1.停止等待协议</h3><p>停止等待协议是最基本的数据链路层协议，它的工作原理是这样的。<br>在发送端，每发送完一帧就停止发送，等待接收端的确认，如果收到确认就发送下一帧。<br>在接收端，每收到一个无差错的帧，就把这个帧交付上层并向发送端发送确认。若该帧有差错，就丢弃，其他什么也不做。</p><p>其他细节：<br>停止等待协议为了可靠交付，需要对帧进行编号，由于每次只发送一帧，所以停止等待协议使用1个比特编号，编号0和1<br>停止等待协议会出现死锁现象（A等待B的确认），解决办法，启动超时计时器，超时计时器有一个重传时间。重传时间一般选择略大于“正常情况下从发完数据帧到收到确认帧所需的平均时间”。</p><h3 id="2-滑动窗口协议"><a href="#2-滑动窗口协议" class="headerlink" title="2.滑动窗口协议"></a>2.滑动窗口协议</h3><p>再说滑动窗口之前，先说下连续ARQ，连续ARQ又称Go-back-N ARQ，意思是当出现差错必须重传时，要向回走N个帧，然后再开始重传，也就意味着只要有一帧出现差错，即使已经正确的帧也需要重传，白白浪费时间，增大开销。为此，应该对发送出去但未被确认的帧的数目加以限制，这就是滑动窗口协议。滑动窗口指收发两端分别维护一个发送窗口和接收窗口，发送窗口有一个窗口值Wt，窗口值Wt代表在没有收到对方确认的情况下最多可以发送的帧的数目。当发送的帧的序号被接收窗口正确收下后，接收端向前滑动并向发送端发去确认，发送端收到确认后，发送窗口向前滑动。收发两端按规律向前推进。</p><p>连续ARQ和选择重传ARQ均是窗口大于1的滑动窗口协议，而停止等待协议相当于收发两端窗口等于1。</p><p>滑动窗口指接收和发送两端的窗口按规律不断向前推进，是一种流量控制的策略。</p><h3 id="3-Http1-0和Http1-1的区别"><a href="#3-Http1-0和Http1-1的区别" class="headerlink" title="3.Http1.0和Http1.1的区别"></a>3.Http1.0和Http1.1的区别</h3><ol><li>HTTP/1.0协议使用非持久连接,即在非持久连接下,一个tcp连接只传输一个Web对象。</li><li>HTTP/1.1默认使用持久连接(然而,HTTP/1.1协议的客户机和服务器可以配置成使用非持久连接)。在持久连接下,不必为每个Web对象的传送建立一个新的连接,一个连接中可以传输多个对象。</li></ol><h3 id="4-Post和Get的区别"><a href="#4-Post和Get的区别" class="headerlink" title="4.Post和Get的区别"></a>4.Post和Get的区别</h3><p>1.安全性上说：get的方式是把数据在地址栏中明文的形式发送，URL中可见，POST方式对用户是透明的，安全性更高。<br>2.数据量说：Get传送的数据量较小，一般不能大于2KB，POST传送的数据量更大。<br>3.适用范围说：查询用Get，数据添加、修改和删除建议Post</p><h3 id="5-TCP-IP体系各层功能及协议"><a href="#5-TCP-IP体系各层功能及协议" class="headerlink" title="5. TCP/IP体系各层功能及协议"></a>5. TCP/IP体系各层功能及协议</h3><p>TCP/IP体系共有四个层次，分别为网络接口层Host-to-Network Layer, 网际层 Internet Layer， 传输层Transport Layer，应用层Application Layer。</p><h4 id="网络接口层-gt-接收和发送数据报"><a href="#网络接口层-gt-接收和发送数据报" class="headerlink" title="网络接口层 -&gt; 接收和发送数据报"></a>网络接口层 -&gt; 接收和发送数据报</h4><p>主要负责将数据发送到网络传输介质上以及从网络上接收TCP/IP数据报，相当于OSI参考模型的物理层和数据链路层。在实际中，先后流行的以太网、令牌环网、ATM、帧中继等都可视为其底层协议。它将发送的信息组装成帧并通过物理层向选定网络发送，或者从网络上接收物理帧，将去除控制信息后的IP数据报交给网络层。</p><h4 id="网际层-gt-数据报封装和路由寻址"><a href="#网际层-gt-数据报封装和路由寻址" class="headerlink" title="网际层 -&gt; 数据报封装和路由寻址"></a>网际层 -&gt; 数据报封装和路由寻址</h4><p>网际层主要功能是寻址和对数据报的封装以及路由选择功能。这些功能大部分通过IP协议完成，并通过地址解析协议ARP、逆地址解析协议RARP、因特网控制报文协议ICMP、因特网组管理协议IGMP从旁协助。所以IP协议是网络层的核心。</p><p>网际协议IP：IP协议是一个无连接的协议，主要负责将数据报从源结点转发到目的结点。也就是说IP协议通过对数据报中源地址和目的地址进行分析，然后进行路由选择，最后再转发到目的地。需要注意的是：IP协议只负责对数据进行转发，并不对数据进行检查，也就是说，它不负责数据的可靠性，这样设计的主要目的是提高IP协议传送和转发数据的效率。</p><p>ARP：该协议负责将IP地址解析转换为计算机的物理地址。</p><p>虽然我们使用IP地址进行通信，但IP地址只是主机在抽象的网络层中的地址。最终要传到数据链路层封装成MAC帧才能发送到实际的网络。因此不管使用什么协议最终需要的还是硬件地址。</p><p>每个主机拥有一个ARP高速缓存（存放所在局域网内主机和路由器的IP地址到硬件地址的映射表）</p><p>举例：A发送B</p><p>(1)A在自己的ARP高速缓存中查到B的MAC地址，写入MAC帧发往此B</p><p>(2)没查到，A向本局域网广播ARP请求分组，内容包括自己的地址映射和B的IP地址</p><p>(3)B发送ARP响应分组，内容为自己的IP地址到物理地址的映射，同时将A的映射写入自己的ARP高速缓存（单播的方式）</p><p>注：ARP Cache映射项目具有一个生存时间。</p><p>RARP：将计算机物理地址转换为IP地址</p><p>ICMP：该协议主要负责发送和传递包含控制信息的数据报，这些控制信息包括了哪台计算机出现了什么错误，网络路由出现了什么错误等内容。</p><h4 id="传输层-gt-应用进程间端到端的通信"><a href="#传输层-gt-应用进程间端到端的通信" class="headerlink" title="传输层 -&gt; 应用进程间端到端的通信"></a>传输层 -&gt; 应用进程间端到端的通信</h4><p>传输层主要负责应用进程间“端到端”的通信，即从某个应用进程传输到另一个应用进程，它与OSI参考模型的传输层功能类似。<br>传输层在某个时刻可能要同时为多个不同的应用进程服务，因此传输层在每个分组中必须增加用于识别应用进程的标识，即端口。<br>TCP/IP体系的传输层主要包含两个主要协议，即传输控制协议TCP和用户数据报协议UDP。TCP协议是一种可靠的、面向连接的协议，保证收发两端有可靠的字节流传输，进行了流量控制，协调双方的发送和接收速度，达到正确传输的目的。<br>UDP是一种不可靠的、无连接的协议，其特点是协议简单、额外开销小、效率较高，不能保证可靠传输。<br>传输层提供应用进程间的逻辑通信。它使应用进程看见的就好像是在两个运输层实体间一条端到端的逻辑通信信道。<br>当运输层采用TCP时，尽管下面的网络是不可靠的，但这种逻辑通信信道相当于一条全双工的可靠信道。可以做到报文的无差错、按序、无丢失、无重复。</p><p>注：单单面向连接只是可靠的必要条件，不充分。还需要其他措施，如确认重传，按序接收，无丢失无重复。</p><p>熟知端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">20 FTP数据连接 </span><br><span class="line">21 FTP控制连接 </span><br><span class="line">22 SSH </span><br><span class="line">23 TELNET </span><br><span class="line">25 SMTP </span><br><span class="line">53 DNS </span><br><span class="line">69 TFTP</span><br><span class="line">80 HTTP</span><br><span class="line">161 SNMP</span><br></pre></td></tr></table></figure><p><strong>UDP</strong>重要</p><p>UDP的优点：</p><p>1.发送之前无需建立连接，减小了开销和发送数据的时延<br>2.UDP不使用连接，不使用可靠交付，因此主机不需要维护复杂的参数表、连接状态表<br>3.UDP用户数据报只有8个字节的首部开销，而TCP要20字节。<br>4.由于没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（IP电话等实时应用要求源主机以恒定的速率发送数据是有利的）</p><p>Table，使用TCP和UDP的应用</p><table><thead><tr><th>应用</th><th>应用层协议</th><th>运输层协议</th></tr></thead><tbody><tr><td>名字转换</td><td>DNS</td><td>UDP</td></tr><tr><td>文件传送</td><td>TFTP</td><td>UDP</td></tr><tr><td>路由选择协议</td><td>RIP</td><td>UDP</td></tr><tr><td>IP地址配置</td><td>BOOTTP,DHCP</td><td>UDP</td></tr><tr><td>网络管理</td><td>SNMP</td><td>UDP</td></tr><tr><td>远程文件服务器</td><td>NFS</td><td>UDP</td></tr><tr><td>IP电话</td><td>专用协议</td><td>UDP</td></tr><tr><td>流式多媒体通信</td><td>专用协议</td><td>UDP</td></tr><tr><td>电子邮件</td><td>SMTP</td><td>TCP</td></tr><tr><td>远程终端接入</td><td>TELNET</td><td>TCP</td></tr><tr><td>万维网</td><td>HTTP</td><td>TCP</td></tr><tr><td>文件传送</td><td>FTP</td><td>TCP</td></tr></tbody></table><p>注：TFTP：Trivial File Transfer Protocol</p><p>UDP的过程（以TFTP举例）：</p><ol><li><p>服务器进程运行着，等待TFTP客户进程的服务请求。客户端TFTP进程启动时，向操作系统申请一个临时端口号，然后操作系统为该进程创建2个队列，<br>入队列和出队列。只要进程在执行，2个队列一直存在。</p></li><li><p>客户进程将报文发送到出队列中。UDP按报文在队列的先后顺序发送。在传送到IP层之前给报文加上UDP首部，其中目的端口后为69，然后发给IP层。<br>出队列若溢出，则操作系统通知应用层TFTP客户进程暂停发送。</p></li><li><p>客户端收到来自IP层的报文时，UDP检查报文中目的端口号是否正确，若正确，放入入队列队尾，客户进程按先后顺序一一取走。若不正确，UDP丢弃该报文，并请ICMP发送”端口不可达“差错报文给服务器端。入队列可能会溢出，若溢出，UDP丢弃该报文，不通知对方。</p></li></ol><p>服务器端类似。</p><p>UDP首部：源端口 - 目的端口 - 长度 - 检验和，每个字段22字节。</p><p>注：IP数据报检验和只检验IP数据报的首部，而UDP的检验和将首部和数据部分一起都检验。</p><p><strong>TCP重要</strong></p><p>细节：</p><p>TCP报文段是面向字节的数据流。</p><p>TCP首部：20字节固定首部</p><p>确认比特ACK，ACK=1 确认号字段才有效；同步比特SYN：SYN=1 ACK=0表示一个连接请求报文段；终止比特FIN，FIN=1时要求释放连接。</p><p>窗口：将TCP收发两端记为A和B，A根据TCP缓存空间的大小确定自己的接收窗口大小。并在A发送给B的窗口字段写入该值。作为B的发送窗口的上限。意味着B在未收到A的确认情况下，最多发送的字节数。</p><p>选项：最大报文段长度MSS，MSS告诉对方TCP：我的缓存所能接收的报文段的数据字段的最大长度是MSS个字节。若主机未填写，默认为536字节。</p><p>TCP的可靠是使用了序号和确认。当TCP发送一个报文时，在自己的重传队列中存放一个副本。若收到确认，删除副本。</p><p>TCP使用捎带确认。</p><p>TCP报文段的发送时机：1.维持一个变量等于MSS，发送缓存达到MSS就发送 2.发送端应用进程指明要发送，即TCP支持的PUSH操作。3.设定计时器</p><p><strong>TCP的拥塞控制：TCP使用慢开始和拥塞避免算法进行拥塞控制</strong></p><p><strong>慢开始和拥塞避免</strong></p><p>接收端根据自身资源情况控制发送端发送窗口的大小。</p><p>每个TCP连接需要维持一下2个状态变量：</p><p>接收端窗口rwnd（receiver window）：接收端根据目前接收缓存大小设置的窗口值，是来自接收端的流量控制</p><p>拥塞窗口cwnd（congestion window）：是发送端根据自己估计的网络拥塞程度设置的窗口值，是来自发送端的流量控制</p><p>发送端的窗口上限值=Min(rwnd, cwnd)</p><p>慢开始算法原理：主机刚开始发送数据时，如果立即将较大的发送窗口的全部字节注入网络，由于不清楚网络状况，可能会引起拥塞。通常的做法是将cwnd设置为1个MSS，每收到一个确认，将cwnd+1，由小到大逐步增大cwnd，使分组注入网络的速率更加合理。为了防止拥塞窗口增长引起网络拥塞，还需设置一个状态变量ssthresh，即慢开始门限。</p><p>慢开始门限：ssthresh，当cwnd &lt; ssthresh,执行慢开始算法；cwnd &gt; ssthresh，改用拥塞避免算法。 cwnd = ssthresh时，都可以。</p><p>拥塞避免算法使发送端的拥塞窗口每经过一个RTT增加一个MSS（而不管在此期间收到多少ACK），这样，拥塞窗口cwnd按线性规律增长，拥塞窗口此时比慢开始增长速率缓慢很多。这一过程称为加法增大，目的在于使拥塞窗口缓慢增长，防止网络过早拥塞。</p><p>无论是慢开始还是拥塞避免，只要发送端发现网络出现拥塞（根据是没有按时收到ACK或者收到重复ACK），就将慢开始门限ssthresh设置为拥塞窗口值的一半并将拥塞窗口cwnd置为1，重新执行慢开始算法。这一过程称为乘法减小。目的在于迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p><p>上述TCP确认都是通过捎带确认执行的。</p><p><strong>快重传和快恢复</strong></p><p>上述的慢开始和拥塞避免算法是早期TCP使用的拥塞控制算法。因为有时TCP连接会在重传时因等待重传计时器的超时时间而空闲。为此在快重传中规定：只要发送端一连收到三个重复的ACK,即可断定分组丢失，不必等待重传计数器，立即重传丢失的报文。</p><p>与快重传搭配使用的还有快恢复：当不使用快恢复时，发送端若发现网络拥塞就将拥塞窗口降为1，然后执行慢开始算法，这样的缺点是网络不能很快恢复到正常状态。快恢复是指当发送端收到3个重复的ACK时，执行乘法减小，ssthresh变为拥塞窗口值的一半。但是cwnd不是置为1，而是ssthresh+3xMSS。若收到的重复ACK<br>为n(n &gt; 3)，则cwnd=ssthresh+n*MSS.这样做的理由是基于发送端已经收到3个重复的ACK，它表明已经有3个分组离开了网络，它们不在消耗网络的资源。</p><p>注意的是：在使用快恢复算法时，慢开始算法只在TCP连接建立时使用。</p><p>TCP的重传机制</p><p>每发送一个报文段，就对这个报文段设置一次计时器。新的重传时间=γ*旧的重传时间。</p><p><strong>TCP连接建立和释放的过程</strong></p><p>SYN置1和FIN的报文段要消耗一个序号。</p><p>客户端连接状态变迁：CLOSED -&gt; 主动打开,发送SYN=1 -&gt; SYN_SENT -&gt; 收到服务器的SYN=1和ACK时,发送三次握手的最后一个ACK<br>-&gt; ESTABLISHED -&gt; 数据传送 -&gt; 主动关闭 -&gt; 发送FIN=1,等待确认ACK的到达 -&gt; FIN_WAIT_1 -&gt; 收到确认ACK后 -&gt; FIN_WAIT_2<br>-&gt; 收到服务器发送的FIN=1报文，响应，发送四次挥手的的最后一个确认ACK -&gt; 进入TIME_WAIT状态<br>-&gt; 经过2倍报文寿命，TCP删除连接记录 -&gt; 回到CLOSED状态 </p><p>客户端状态：CLOSED - SYN_SENT- ESTABLISHED - FIN_WAIT_1 - FIN_WAIT_2 - TIME_WAIT - CLOSED</p><p>服务器端连接状态变迁：CLOSED -&gt; 被动打开 -&gt; LISTEN -&gt; 收到SYN=1的报文，发送SYN=1和确认ACK -&gt; 进入SYN_RCVD -&gt; 收到三次握手<br>的最后一个确认ACK -&gt; ESTABLISHED -&gt; 数据传送 -&gt; 数据传送完毕，收到FIN=1 -&gt; 发送确认ACK并进入CLOSED_WAIT -&gt; 发送FIN=1给客户端 -&gt; LAST_ACK<br>-&gt; 收到客户端四次挥手的最后一个确认ACK -&gt; 删除连接记录 -&gt; 回到CLOSED状态</p><p>服务器端：CLOSED - LISTEN - SYN_RCVD - ESTABLISHED - CLOSED_WAIT - LAST_ACK - CLOSED </p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>应用层位于TCP/IP体系结构的最高一层，也是直接为应用进程服务的一层，即当不同的应用进程数据交换时，就去调用应用层的不同协议实体，让这些实体去调用传输层的TCP或者UDP来进行网络传输。具体的应用层协议有，SMTP 25、DNS 53、HTTP 80、FTP 20数据端口 21控制端口、TFTP 69、TELNET 23、SNMP 161等</p><h4 id="网络的划分"><a href="#网络的划分" class="headerlink" title="网络的划分"></a>网络的划分</h4><p>按网络拓扑结构：总线、星型、环型、树型、网状结构和混合型。</p><p>按覆盖范围：局域网、城域网、广域网</p><p>按传播方式：广播网络和点对点网络</p><p>广播式网络是指网络中的计算机使用一个共享信道进行数据传播，网络中的所有结点都能收到某一结点发出的数据信息。</p><p>单播：一对一的发送形式。</p><p>组播：采用一对一组的发送形式，将数据发送给网络中的某一组主机。</p><p>广播：采用一对所有，将数据发送给网络所有目的结点。</p><p>点对点网络中两个结点间的通信方式是点对点的。如果两台计算机之间没有直连的线路，则需要中间结点的接收、存储、转发直至目的结点。</p><h3 id="6-TCP的三次握手和四次挥手的过程"><a href="#6-TCP的三次握手和四次挥手的过程" class="headerlink" title="6. TCP的三次握手和四次挥手的过程"></a>6. TCP的三次握手和四次挥手的过程</h3><p>以客户端为例</p><p>连接建立（三次握手）：首先Client端发送连接请求报文SYN并进入SYN_SENT状态，Server收到后发送ACK+SYN报文，并为这次连接分配资源。Client端接收到Server端的SYN+ACK后发送三次握手的最后一个ACK，并分配资源，连接建立。</p><p>连接释放（四次挥手）：假设Client端发起断开连接请求，首先发送FIN=1,等待确认ACK的到达 -&gt; FIN_WAIT_1 -&gt; 收到Server端的确认ACK后时 -&gt; FIN_WAIT_2<br>-&gt;收到服务器发送的FIN=1报文，响应，发送四次挥手的的最后一个确认ACK -&gt;进入TIME_WAIT状态<br>-&gt; 经过2倍报文寿命，TCP删除连接记录 -&gt; 回到CLOSED状态</p><h3 id="7-为什么连接建立是三次握手，而连接释放要四次挥手？"><a href="#7-为什么连接建立是三次握手，而连接释放要四次挥手？" class="headerlink" title="7. 为什么连接建立是三次握手，而连接释放要四次挥手？"></a>7. 为什么连接建立是三次握手，而连接释放要四次挥手？</h3><p>因为当Server端收到Client端发送的SYN连接请求报文后，可以直接发送SYN+ACK报文，其中ACK用来应答，SYN用来同步。但是关闭连接时，当Server端收到FIN报文后，并不会立即关闭socket，所以先回复一个ACK，告诉Client端“你的FIN我收到了”，只有等Server端的所有报文发送完了，Server端才发送FIN报文，因此不能一起发送，故需要四次挥手。</p><h3 id="8-为什么TIME-WAIT状态需要2MSL（最大报文段生存时间）才能返回Closed状态？"><a href="#8-为什么TIME-WAIT状态需要2MSL（最大报文段生存时间）才能返回Closed状态？" class="headerlink" title="8. 为什么TIME_WAIT状态需要2MSL（最大报文段生存时间）才能返回Closed状态？"></a>8. 为什么TIME_WAIT状态需要2MSL（最大报文段生存时间）才能返回Closed状态？</h3><p>这是因为虽然双方都同意关闭连接了，而且四次挥手的报文也都协调发送完毕。但是我们必须假想网络是不可靠的，无法保证最后发送的ACK报文一定被对方收到，因此处于LAST_ACK状态下的<br>Server端可能会因未收到ACK而重发FIN，所以TIME_WAIT状态的作用就是用来重发可能丢失的ACK报文。</p><h3 id="9-Http报文格式"><a href="#9-Http报文格式" class="headerlink" title="9. Http报文格式"></a>9. Http报文格式</h3><p>Http请求报文格式：1.请求行 2.Http头 3.报文主体<br>请求行由三部分组成，分别是请求方法，请求地址，Http版本<br>Http头：有三种，分别为请求头（request header），普通头（General Header）和实体头（entity header）。Get方法没有实体头。<br>报文主体：只在POST方法请求中存在。<br>Http响应报文：1.状态行 2.Http头 3.返回内容<br>状态行：第一部分为Http版本，第二部分为响应状态码 第三部分为状态码的描述<br>其中第三部分为状态码的描述，信息类100-199 响应成功200-299 重定向类300-399 客户端错误400-499 服务器端错误500-599</p><p>常见的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">100 continue 初始请求已接受，客户端应继续发送请求剩余部分</span><br><span class="line">200 OK</span><br><span class="line">202 Accepted 已接受，处理尚未完成 </span><br><span class="line">301 永久重定向</span><br><span class="line">302 临时重定向</span><br><span class="line">400 Bad Request</span><br><span class="line">401 Unauthorized</span><br><span class="line">403 Forbidden 资源不可用</span><br><span class="line">404 Not Found</span><br><span class="line">500 Internal Server Error 服务器错误</span><br><span class="line">502 Bad Gateway</span><br><span class="line">503 Service Unavailable 服务器负载过重</span><br><span class="line">504 Gateway Timeout 未能及时从远程服务器获得应答</span><br></pre></td></tr></table></figure><p>Http头：响应头（Response Header），普通头（General Header）和实体头(Entity Header)<br>返回内容：即Http请求的信息，可以是HTML也可以是图片等等。</p><h3 id="10-Http和Https的区别"><a href="#10-Http和Https的区别" class="headerlink" title="10. Http和Https的区别"></a>10. Http和Https的区别</h3><p>Https即Secure Hypertext Transfer Protocol，即安全超文本传输协议，它是一个安全通信信道，基于Http开发，用于在客户机和服务器间交换信息。它使用安全套接字层SSL进行信息交换，是Http的安全版。<br>Https协议需要到CA申请证书，一般免费证书很少，需要交费。<br>Http是超文本传输协议，信息是明文传输，https则是具有安全性的tls/ssl加密传输协议。<br>http是80端口，https是443端口</p><h3 id="11-浏览器输入一个URL的过程"><a href="#11-浏览器输入一个URL的过程" class="headerlink" title="11. 浏览器输入一个URL的过程"></a>11. 浏览器输入一个URL的过程</h3><ol><li>浏览器向DNS服务器请求解析该URL中的域名所对应的IP地址</li><li>解析出IP地址后，根据IP地址和默认端口80和服务器建立TCP连接</li><li>浏览器发出Http请求，该请求报文作为TCP三次握手的第三个报文的数据发送给服务器</li><li>服务器做出响应，把对应的请求资源发送给浏览器</li><li>释放TCP连接</li><li>浏览器解析并显示内容</li></ol><h3 id="12-中间人攻击"><a href="#12-中间人攻击" class="headerlink" title="12. 中间人攻击"></a>12. 中间人攻击</h3><p>中间人获取server发给client的公钥，自己伪造一对公私钥，然后伪造自己让client以为它是server，然后将伪造的公钥发给client，并拦截client发给server的密文，用伪造的私钥即可得到client发出去的内容，最后用真实的公钥对内容加密发给server。</p><p>解决办法：数字证书，证书链，可信任的中间人</p><h3 id="13-差错检测"><a href="#13-差错检测" class="headerlink" title="13. 差错检测"></a>13. 差错检测</h3><p>误码率：传输错误的比特与传输总比特数的比率<br>CRC是检错方法并不能纠错，FCS（Frame Check Sequence）是冗余码。<br>计算冗余码（余数R）的方法：先补0（n个）再对生成多项式取模。<br>CRC只能表示以接近1的概率认为它没有差错。但不能做到可靠传输。可靠传输还需要确认和重传机制。<br>生成多项式P(X)：CRC-16，CRC-CCITT，CRC-32</p><h3 id="14-数据链路层的协议"><a href="#14-数据链路层的协议" class="headerlink" title="14. 数据链路层的协议"></a>14. 数据链路层的协议</h3><p>停止等待协议 - 连续ARQ - 选择重传ARQ - PPP - 以太网协议- 帧中继 - ATM - HDLC</p><h3 id="15-截断二进制指数退避算法"><a href="#15-截断二进制指数退避算法" class="headerlink" title="15. 截断二进制指数退避算法"></a>15. 截断二进制指数退避算法</h3><p>是以太网用于解决当发生碰撞时就停止发送然后重发再碰撞这一问题。</p><p>截断二进制指数退避算法：基本退避时间为2τ k=min{重传次数，10} r=random(0~2^k-1) 重传所需时延为r倍的基本退避时间</p><hr><h2 id="八、操作系统（OS基础、Linux等）"><a href="#八、操作系统（OS基础、Linux等）" class="headerlink" title="八、操作系统（OS基础、Linux等）"></a>八、操作系统（OS基础、Linux等）</h2><h3 id="1-并发和并行"><a href="#1-并发和并行" class="headerlink" title="1. 并发和并行"></a>1. 并发和并行</h3><p>“并行”是指无论从微观还是宏观，二者都是一起执行的，也就是同一时刻执行而“并发”在微观上不是同时执行的。是在同一时间间隔交替轮流执行</p><h3 id="2-进程间通信的方式"><a href="#2-进程间通信的方式" class="headerlink" title="2. 进程间通信的方式"></a>2. 进程间通信的方式</h3><ul><li>管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</li><li>有名管道 (named pipe) ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</li><li>信号量( semophore ) ：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li><li>消息队列( message queue )  消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li><li>信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li><li>共享内存( shared memory ) 共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量配合使用，来实现进程间的同步和通信。</li><li>套接字( socket ) ：套接字也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信。</li></ul><h3 id="3-LinuxIO模型"><a href="#3-LinuxIO模型" class="headerlink" title="3. LinuxIO模型"></a>3. LinuxIO模型</h3><p><strong>1、阻塞IO模型</strong><br>以socket为例，在进程空间调用recvfrom，其系统调用知道数据包到达且被复制到应用进程的缓冲区或者发生错误才返回，在此期间一直等待，进程从调用recvfrom开始到它返回的整段时间内都是被阻塞的，因此称为阻塞IO</p><p><strong>2、非阻塞IO模型</strong><br>应用进程调用recvfrom，如果缓冲区没有数据直接返回EWOULDBLOCK错误。一般对非阻塞IO进行轮询，以确定是否有数据到来。</p><p><strong>3、IO多路复用模型</strong></p><p>Linux提供select/poll，通过将一个或多个fd传递给select或poll系统调用，阻塞在select上。select/poll顺序扫描fd是否就绪。</p><p><strong>4、信号驱动IO</strong></p><p>开启套接字接口信号驱动IO功能，并通过系统调用sigaction执行信号处理函数。当数据准备就绪时，为该进程生成SIGIO信号，通过信号回调通知应用程序调用recvfrom来读取数据，并通知主函数处理数据。</p><p><strong>5、异步IO</strong></p><p>告知内核启动某个操作，并让内核在整个操作完成后通知我们。它与信号驱动IO的区别在于信号驱动IO由内核通知我们何时可以开始IO操作。而异步IO模型由内核通知我们IO操作已经完成。</p><h2 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h2><h3 id="1-开源软件有哪些？"><a href="#1-开源软件有哪些？" class="headerlink" title="1. 开源软件有哪些？"></a>1. 开源软件有哪些？</h3><p>Eclipse、Linux及其Linux下的大多数软件、Git等。</p><p>Apache下的众多软件：Lucene、Velocity、Maven、高性能Java网络框架MINA、版本控制系统SVN、应用服务器Tomcat、Http服务器Apache、MVC框架Struts、持久层框架iBATIS、Apache SPARK、ActiveMQ</p><h3 id="2-开源协议"><a href="#2-开源协议" class="headerlink" title="2. 开源协议"></a>2. 开源协议</h3><ul><li>MIT：相对宽松。适用：JQuery</li><li>Apache：相对宽松与MIT类似的协议，考虑有专利的情况。适用：Apache服务器、SVN</li><li>GPL：GPLV2和GPLV3，如果你在乎作品的传播和别人的修改，希望别人也以相同的协议分享出来。</li><li>LGPL：主要用于一些代码库。衍生代码可以以此协议发布（言下之意你可以用其他协议），但与此协议相关的代码必需遵循此协议。</li><li>BSD：较为宽松的协议，包含两个变种BSD 2-Clause 和BSD 3-Clause，两者都与MIT协议只存在细微差异。</li></ul><p>上面各协议只是针对软件或代码作品，如果你的作品不是代码，比如视频，音乐，图片，文章等，共享于公众之前，也最好声明一下协议以保证自己的权益不被侵犯，CC协议。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Java基础（语言、集合框架、OOP、设计模式等）&quot;&gt;&lt;a href=&quot;#一、Java基础（语言、集合框架、OOP、设计模式等）&quot; class=&quot;headerlink&quot; title=&quot;一、Java基础（语言、集合框架、OOP、设计模式等）&quot;&gt;&lt;/a&gt;一、Java基础（语言、集合框架、OOP、设计模式等）&lt;/h2&gt;&lt;h3 id=&quot;1-HashMap和Hashtable的区别&quot;&gt;&lt;a href=&quot;#1-HashMap和Hashtable的区别&quot; class=&quot;headerlink&quot; title=&quot;1. HashMap和Hashtable的区别&quot;&gt;&lt;/a&gt;1. HashMap和Hashtable的区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Hashtable是基于陈旧的Dictionary的Map接口的实现，而HashMap是基于哈希表的Map接口的实现&lt;/li&gt;
&lt;li&gt;从方法上看，HashMap去掉了Hashtable的contains方法&lt;/li&gt;
&lt;li&gt;HashTable是同步的(线程安全)，而HashMap线程不安全，效率上HashMap更快&lt;/li&gt;
&lt;li&gt;HashMap允许空键值，而Hashtable不允许&lt;/li&gt;
&lt;li&gt;HashMap的iterator迭代器执行快速失败机制，也就是说在迭代过程中修改集合结构，除非调用迭代器自身的remove方法，否则以其他任何方式的修改都将抛出并发修改异常。而Hashtable返回的Enumeration不是快速失败的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：&lt;code&gt;Fast-fail&lt;/code&gt;机制:在使用迭代器的过程中有其它线程修改了集合对象结构或元素数量,都将抛出ConcurrentModifiedException，但是抛出这个异常是不保证的，我们不能编写依赖于此异常的程序。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://dijia478.cn/categories/Java/"/>
    
    
      <category term="知识点总结" scheme="http://dijia478.cn/tags/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>23种设计模式-装饰者模式</title>
    <link href="http://dijia478.cn/blog/2016/11/02/2016-11-02-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://dijia478.cn/blog/2016/11/02/2016-11-02-23种设计模式-装饰者模式/</id>
    <published>2016-11-02T06:52:55.000Z</published>
    <updated>2018-02-11T11:15:36.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>定义：</strong></p><p>​    在不必改变原类文件和原类使用的继承的情况下，动态地扩展一个对象的功能。</p><p>​    它是通过创建一个包装对象，也就是用装饰来包裹真实的对象来实现。<br><a id="more"></a><br><strong>角色：</strong></p><p>​    <strong>抽象构件角色（Project）：</strong>给出一个接口，以规范准备接收附加责任的对象。</p><p>​    <strong>具体构件角色（Employe）：</strong>定义一个将要接收附加责任的类。</p><p>​    <strong>装饰角色（Manager）：</strong>持有一个构件对象的实例，并定义一个与抽象构件接口一致的接口。</p><p>​    <strong>具体装饰角色（ManagerA、ManagerB）：</strong>负责给构件对象“贴上”附加的责任。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>公共接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被装饰对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldPerson</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"吃饭"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewPerson</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> OldPerson p;  </span><br><span class="line"></span><br><span class="line">    NewPerson(OldPerson p) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.p = p;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"生火"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"做饭"</span>);  </span><br><span class="line">        p.eat();  </span><br><span class="line">        System.out.println(<span class="string">"刷碗"</span>);   </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        OldPerson old = <span class="keyword">new</span> OldPerson();  </span><br><span class="line">        <span class="comment">//old.eat(); </span></span><br><span class="line">        NewPerson np = <span class="keyword">new</span> NewPerson(old);  </span><br><span class="line">        np.eat();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        通过例子可以看到，没有改变原来的OldPerson类，同时也没有定义他的子类而实现了Person的扩展，这就是装饰者模式的作用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点：</strong></p><p>​        1，使用装饰者模式比使用继承更加灵活，因为它选择通过一种动态的方式来扩展一个对象的功能，在运行时可以选择不同的装饰器，从而实现不同的行为。</p><p>​        2，通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合。可以使用多个具体装饰类来装饰同一对象，得到功能更为强大的对象。</p><p>​        3，具体构件类与具体装饰类可以独立变化，他能是低耦合的。用户可以根据需要来增加新的具体构件类和具体装饰类，在使用时再对其进行各种组合，原有代码无须改变，符合“开闭原则”。</p><p><strong>缺点：</strong></p><p>​        1，会产生很多的小对象，增加了系统的复杂性</p><p>​        2，这种比继承更加灵活机动的特性，也同时意味着装饰模式比继承更加易于出错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为烦琐。</p><p><strong>装饰者与适配者模式的区别：</strong></p><p>   1，适配器模式主要用来兼容那些不能在一起工作的类，使他们转化为可以兼容目标接口，虽然也可以实现和装饰者一样的增加新职责，但目的不在此。</p><p>​        装饰者模式主要是给被装饰者增加新职责的。</p><p>   2，适配器模式是用新接口来调用原接口，原接口对新系统是不可见或者说不可用的。</p><p>​        装饰者模式原封不动的使用原接口，系统对装饰的对象也通过原接口来完成使用。</p><p>   3，适配器是知道被适配者的详细情况的（就是那个类或那个接口）。</p><p>​        装饰者只知道其接口是什么，至于其具体类型（是基类还是其他派生类）只有在运行期间才知道。</p><p><strong>装饰者和继承的区别：</strong></p><p>继承：</p><p>　　优点：代码结构清晰，而且实现简单</p><p>　　缺点：对于每一个的需要增强的类都要创建具体的子类来帮助其增强，这样会导致继承体系过于庞大。</p><p>装饰者：</p><p>　　优点：内部可以通过多态技术对多个需要增强的类进行增强</p><p>​       缺点：需要内部通过多态技术维护需要增强的类的实例。进而使得代码稍微复杂。</p><p><strong>使用场景：</strong></p><p>​        1，需要扩展一个类的功能，或给一个类添加附加职责。</p><p>​        2，需要动态的给一个对象添加功能，这些功能可能不明确或者暂时的，可以随时很方便的动态撤销掉。</p><p>​        3，需要增加由一些基本功能的排列组合而产生的非常大量的功能，从而使继承关系变的不现实。</p><p>​        4. 当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    在不必改变原类文件和原类使用的继承的情况下，动态地扩展一个对象的功能。&lt;/p&gt;
&lt;p&gt;​    它是通过创建一个包装对象，也就是用装饰来包裹真实的对象来实现。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://dijia478.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="装饰者模式" scheme="http://dijia478.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="装饰者模式" scheme="http://dijia478.cn/tags/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>23种设计模式-适配器模式</title>
    <link href="http://dijia478.cn/blog/2016/10/31/2016-10-31-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://dijia478.cn/blog/2016/10/31/2016-10-31-23种设计模式-适配器模式/</id>
    <published>2016-10-31T10:21:44.000Z</published>
    <updated>2018-02-11T10:29:23.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>定义：</strong></p><p>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。<br><a id="more"></a><br><strong>角色：</strong></p><p>​    目标(Target)角色：这就是所期待得到的接口，也就是这类的接口是符合我们要求的。</p><p>​    源(Adapee)角色：我们要使用的接口，但是这个接口不符合我们的要求，也就是现在需要适配的接口。</p><p>​    适配器(Adaper)角色：适配器类是适配器模式的核心。适配器把源接口转换成目标接口。显然，这一角色不可以是接口，而必须是具体类。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li><strong>类适配器模式</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;         </span><br><span class="line">    <span class="function">publicvoid <span class="title">specificRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"特殊请求，这个是源角色"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这个是目标角色，所期待的接口*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;         </span><br><span class="line">    <span class="function">publicvoid <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   现在想要实现这个Target接口，但是不想重构，想要用上已有的Adaptee类，这时可以定义一个适配器类，继承想要使用的类，并且实现期待的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="title">implementsTarget</span></span>&#123;</span><br><span class="line">         <span class="function">publicvoid <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">super</span>.specificRequest();</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，使用适配器类和实现目标接口就完成了计划，测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">         <span class="function">publicstatic <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                   <span class="comment">//使用特殊功能类，即适配类</span></span><br><span class="line">                   Targetadapter = <span class="keyword">new</span> Adapter();</span><br><span class="line">                   adapter.request();</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>对象适配器模式</strong></li></ol><p>适配器类关联已有的Adaptee类，并且实现标准接口，这样做的好处是不再需要继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">         privateAdaptee adaptee;</span><br><span class="line"></span><br><span class="line">         publicAdapter (Adaptee adaptee) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.adaptee= adaptee;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function">publicvoid <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">this</span>.adaptee.specificRequest();</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以想到，此时输出结果和类适配器模式是相同的，测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">         <span class="function">publicstatic <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                   Targetadapter = <span class="keyword">new</span> Adapter(<span class="keyword">new</span> Adaptee());</span><br><span class="line">                   adapter.request();</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区别：</p><p>  对象的适配器模式不是使用继承关系连接到Adaptee类，而是使用委派关系连接到Adaptee类。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>适配器模式不适合在详细设计阶段使用它，它是一种补偿模式，专用来在系统后期扩展、修改时所用，适配器模式更像是一种补救措施。</p><p><strong>优点：</strong></p><p>复用性</p><p>系统需要使用现有的类，而此类的接口不符合系统的需要。那么通过适配器模式就可以让这些功能得到更好的复用。</p><p>扩展性</p><p>在实现适配器功能的时候，可以自由调用自己开发的功能，从而自然地扩展系统的功能。</p><p><strong>缺点：</strong></p><p>过多的使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是A接口，其实内部被适配成了B接口的实现。所以适配器模式不适合在详细设计阶段使用它，它是一种补偿模式，专用来在系统后期扩展、修改时所用。</p><p><strong>适用场景：</strong></p><p>1、已经存在的类的接口不符合我们的需求；</p><p>2、创建一个可以复用的类，使得该类可以与其他不相关的类或不可预见的类协同工作；</p><p>3、使用一些已经存在的子类而不需要对其进行子类化来匹配接口。</p><p>4、旧的系统开发的类已经实现了一些功能，但是客户端却只能以另外接口的形式访问，但我们不希望手动更改原有类的时候。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://dijia478.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="适配器模式" scheme="http://dijia478.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="适配器模式" scheme="http://dijia478.cn/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>23种设计模式-模板方法模式</title>
    <link href="http://dijia478.cn/blog/2016/10/25/2016-10-25-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://dijia478.cn/blog/2016/10/25/2016-10-25-23种设计模式-模板方法模式/</id>
    <published>2016-10-25T11:41:08.000Z</published>
    <updated>2018-02-10T14:33:56.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>定义：</strong>定义一个操作中算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变算法的结构即可重定义该算法中的某些特定步骤。<br><a id="more"></a><br><strong>类型：</strong>行为类模式 </p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>某日，程序员A拿到一个任务：给定一个整数数组，把数组中的数由小到大排序，然后把排序之后的结果打印出来。经过分析之后，这个任务大体上可分为两部分，排序和打印，打印功能好实现，排序就有点麻烦了。但是A有办法，先把打印功能完成，排序功能另找人做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSort</span> </span>&#123;  </span><br><span class="line">     </span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * 将数组array由小到大排序 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> array </span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>;  </span><br><span class="line">     </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSortResult</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;  </span><br><span class="line">       <span class="keyword">this</span>.sort(array);  </span><br><span class="line">       System.out.print(<span class="string">"排序结果："</span>);  </span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;  </span><br><span class="line">           System.out.printf(<span class="string">"%3s"</span>, array[i]);  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完后，A找到刚毕业入职不久的同事B说：有个任务，主要逻辑我已经写好了，你把剩下的逻辑实现一下吧。于是把AbstractSort类给B，让B写实现。B拿过来一看，太简单了，10分钟搞定，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSort</span> <span class="keyword">extends</span> <span class="title">AbstractSort</span> </span>&#123;  </span><br><span class="line">     </span><br><span class="line">       <span class="meta">@Override</span>  </span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;  </span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.length-<span class="number">1</span>; i++)&#123;  </span><br><span class="line">               selectSort(array, i);  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;  </span><br><span class="line">         </span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">           <span class="keyword">int</span> MinValue = <span class="number">32767</span>; <span class="comment">// 最小值变量  </span></span><br><span class="line">           <span class="keyword">int</span> indexMin = <span class="number">0</span>; <span class="comment">// 最小值索引变量  </span></span><br><span class="line">           <span class="keyword">int</span> Temp; <span class="comment">// 暂存变量  </span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; array.length; i++) &#123;  </span><br><span class="line">               <span class="keyword">if</span> (array[i] &lt; MinValue)&#123; <span class="comment">// 找到最小值  </span></span><br><span class="line">                   MinValue = array[i]; <span class="comment">// 储存最小值  </span></span><br><span class="line">                   indexMin = i;   </span><br><span class="line">               &#125;  </span><br><span class="line">           &#125;  </span><br><span class="line">           Temp = array[index]; <span class="comment">// 交换两数值  </span></span><br><span class="line">           array[index] = array[indexMin];  </span><br><span class="line">           array[indexMin] = Temp;  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>写好后交给A，A拿来一运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;  </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] a = &#123; <span class="number">10</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span> &#125;; </span><br><span class="line">   <span class="comment">// 预设数据数组  </span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </span><br><span class="line">       AbstractSort s = <span class="keyword">new</span> ConcreteSort();  </span><br><span class="line">       s.showSortResult(a);  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>排序结果：  0  1  3  4  5  7  9 10 12 32</p><p>​        运行正常。行了，任务完成。没错，这就是模版方法模式。大部分刚步入职场的毕业生应该都有类似B的经历。一个复杂的任务，由公司中的牛人们将主要的逻辑写好，然后把那些看上去比较简单的方法写成抽象的，交给其他的同事去开发。这种分工方式在编程人员水平层次比较明显的公司中经常用到。比如一个项目组，有架构师，高级工程师，初级工程师，则一般由架构师使用大量的接口、抽象类将整个系统的逻辑串起来，实现的编码则根据难度的不同分别交给高级工程师和初级工程师来完成。怎么样，是不是用到过模版方法模式？</p><h2 id="模版方法模式的结构"><a href="#模版方法模式的结构" class="headerlink" title="模版方法模式的结构"></a>模版方法模式的结构</h2><p>模版方法模式由一个抽象类和一个（或一组）实现类通过继承结构组成，抽象类中的方法分为三种：</p><p><strong>抽象方法：</strong>父类中只声明但不加以实现，而是定义好规范，然后由它的子类去实现。</p><p><strong>模版方法：</strong>由抽象类声明并加以实现。一般来说，模版方法调用抽象方法来完成主要的逻辑功能，并且，模版方法大多会定义为final类型，指明主要的逻辑功能在子类中不能被重写。</p><p><strong>钩子方法：</strong>由抽象类声明并加以实现。但是子类可以去扩展，子类可以通过扩展钩子方法来影响模版方法的逻辑。</p><p>抽象类的任务是搭建逻辑的框架，通常由经验丰富的人员编写，因为抽象类的好坏直接决定了程序是否稳定性。</p><p>​       实现类用来实现细节。抽象类中的模版方法正是通过实现类扩展的方法来完成业务逻辑。只要实现类中的扩展方法通过了单元测试，在模版方法正确的前提下，整体功能一般不会出现大的错误。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点</strong></p><p>容易扩展。一般来说，抽象类中的模版方法是不易反生改变的部分，而抽象方法是容易反生变化的部分，因此通过增加实现类一般可以很容易实现功能的扩展，符合开闭原则。</p><p>便于维护。对于模版方法模式来说，正是由于他们的主要逻辑相同，才使用了模版方法，假如不使用模版方法，任由这些相同的代码散乱的分布在不同的类中，维护起来是非常不方便的。</p><p>比较灵活。因为有钩子方法，因此，子类的实现也可以影响父类中主逻辑的运行。但是，在灵活的同时，由于子类影响到了父类，违反了里氏替换原则，也会给程序带来风险。这就对抽象类的设计有了更高的要求。</p><p><strong>缺点</strong></p><p>每个不同的实现都需要定义一个子类，这会导致类的个数的增加，设计更加抽象。</p><p><strong>适用场景</strong></p><p>在多个子类拥有相同的方法，并且这些方法逻辑相同时，可以考虑使用模版方法模式。</p><p>在程序的主框架相同，细节不同的场合下，也比较适合使用这种模式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;定义一个操作中算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变算法的结构即可重定义该算法中的某些特定步骤。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://dijia478.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="模板方法模式" scheme="http://dijia478.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="模板方法模式" scheme="http://dijia478.cn/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
